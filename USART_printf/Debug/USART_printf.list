
USART_printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080023f8  080023f8  000033f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002428  08002428  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002428  08002428  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002428  08002428  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002428  08002428  00003428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800242c  0800242c  0000342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002430  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002498  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002498  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000744f  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001580  00000000  00000000  0000b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000ca60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051f  00000000  00000000  0000d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017885  00000000  00000000  0000d647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f34  00000000  00000000  00024ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083fe6  00000000  00000000  0002ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0de6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002078  00000000  00000000  000b0e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b2ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080023e0 	.word	0x080023e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080023e0 	.word	0x080023e0

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch =='\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f001 fa38 	bl	80015d8 <HAL_UART_Transmit>
	HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f001 fa31 	bl	80015d8 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	080023f8 	.word	0x080023f8
 8000184:	20000084 	.word	0x20000084

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018e:	f000 fa71 	bl	8000674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000192:	f000 f81f 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000196:	f000 f889 	bl	80002ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800019a:	f000 f85d 	bl	8000258 <MX_USART2_UART_Init>
  while (1)
  {
//	  HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
//	  printf("%c\n",ch);

	  HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 800019e:	1df9      	adds	r1, r7, #7
 80001a0:	f04f 33ff 	mov.w	r3, #4294967295
 80001a4:	2201      	movs	r2, #1
 80001a6:	4809      	ldr	r0, [pc, #36]	@ (80001cc <main+0x44>)
 80001a8:	f001 faa1 	bl	80016ee <HAL_UART_Receive>
	  printf("%c",ch);
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	4618      	mov	r0, r3
 80001b0:	f001 fdfc 	bl	8001dac <putchar>
	  fflush(stdout);
 80001b4:	4b06      	ldr	r3, [pc, #24]	@ (80001d0 <main+0x48>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	689b      	ldr	r3, [r3, #8]
 80001ba:	4618      	mov	r0, r3
 80001bc:	f001 fd20 	bl	8001c00 <fflush>
//	  if(ch == 'a') HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
//	  else HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);

	  HAL_Delay(100);
 80001c0:	2064      	movs	r0, #100	@ 0x64
 80001c2:	f000 fab9 	bl	8000738 <HAL_Delay>
	  HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 80001c6:	bf00      	nop
 80001c8:	e7e9      	b.n	800019e <main+0x16>
 80001ca:	bf00      	nop
 80001cc:	20000084 	.word	0x20000084
 80001d0:	20000018 	.word	0x20000018

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	@ 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	@ 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f001 fe2d 	bl	8001e42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fa:	2301      	movs	r3, #1
 80001fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fe:	2310      	movs	r3, #16
 8000200:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000202:	2302      	movs	r3, #2
 8000204:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000206:	2300      	movs	r3, #0
 8000208:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800020a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800020e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0318 	add.w	r3, r7, #24
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fd7f 	bl	8000d18 <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000220:	f000 f8b2 	bl	8000388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000228:	2302      	movs	r3, #2
 800022a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f000 ffec 	bl	800121c <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800024a:	f000 f89d 	bl	8000388 <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	@ 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 800025e:	4a12      	ldr	r2, [pc, #72]	@ (80002a8 <MX_USART2_UART_Init+0x50>)
 8000260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000262:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026a:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000276:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 800027e:	220c      	movs	r2, #12
 8000280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000282:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800028e:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000290:	f001 f952 	bl	8001538 <HAL_UART_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800029a:	f000 f875 	bl	8000388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	20000084 	.word	0x20000084
 80002a8:	40004400 	.word	0x40004400

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0310 	and.w	r3, r3, #16
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d8:	4b27      	ldr	r3, [pc, #156]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a26      	ldr	r2, [pc, #152]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b24      	ldr	r3, [pc, #144]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b21      	ldr	r3, [pc, #132]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <MX_GPIO_Init+0xcc>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a1a      	ldr	r2, [pc, #104]	@ (8000378 <MX_GPIO_Init+0xcc>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_GPIO_Init+0xcc>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	4815      	ldr	r0, [pc, #84]	@ (800037c <MX_GPIO_Init+0xd0>)
 8000326:	f000 fcbd 	bl	8000ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800032a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <MX_GPIO_Init+0xd4>)
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4811      	ldr	r0, [pc, #68]	@ (8000384 <MX_GPIO_Init+0xd8>)
 8000340:	f000 fb2c 	bl	800099c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000344:	2320      	movs	r3, #32
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	2302      	movs	r3, #2
 8000352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	4808      	ldr	r0, [pc, #32]	@ (800037c <MX_GPIO_Init+0xd0>)
 800035c:	f000 fb1e 	bl	800099c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2100      	movs	r1, #0
 8000364:	2028      	movs	r0, #40	@ 0x28
 8000366:	f000 fae2 	bl	800092e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800036a:	2028      	movs	r0, #40	@ 0x28
 800036c:	f000 fafb 	bl	8000966 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40010800 	.word	0x40010800
 8000380:	10110000 	.word	0x10110000
 8000384:	40011000 	.word	0x40011000

08000388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038c:	b672      	cpsid	i
}
 800038e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <Error_Handler+0x8>

08000394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <HAL_MspInit+0x5c>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a14      	ldr	r2, [pc, #80]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	60bb      	str	r3, [r7, #8]
 80003b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003bc:	61d3      	str	r3, [r2, #28]
 80003be:	4b0c      	ldr	r3, [pc, #48]	@ (80003f0 <HAL_MspInit+0x5c>)
 80003c0:	69db      	ldr	r3, [r3, #28]
 80003c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ca:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <HAL_MspInit+0x60>)
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <HAL_MspInit+0x60>)
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003e6:	bf00      	nop
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40010000 	.word	0x40010000

080003f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b088      	sub	sp, #32
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a15      	ldr	r2, [pc, #84]	@ (8000468 <HAL_UART_MspInit+0x70>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d123      	bne.n	8000460 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <HAL_UART_MspInit+0x74>)
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	4a13      	ldr	r2, [pc, #76]	@ (800046c <HAL_UART_MspInit+0x74>)
 800041e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000422:	61d3      	str	r3, [r2, #28]
 8000424:	4b11      	ldr	r3, [pc, #68]	@ (800046c <HAL_UART_MspInit+0x74>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <HAL_UART_MspInit+0x74>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a0d      	ldr	r2, [pc, #52]	@ (800046c <HAL_UART_MspInit+0x74>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <HAL_UART_MspInit+0x74>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000448:	230c      	movs	r3, #12
 800044a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044c:	2302      	movs	r3, #2
 800044e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2302      	movs	r3, #2
 8000452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <HAL_UART_MspInit+0x78>)
 800045c:	f000 fa9e 	bl	800099c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40004400 	.word	0x40004400
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800

08000474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <NMI_Handler+0x4>

0800047c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <HardFault_Handler+0x4>

08000484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <MemManage_Handler+0x4>

0800048c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <UsageFault_Handler+0x4>

0800049c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c4:	f000 f91c 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d4:	f000 fbfe 	bl	8000cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
 80004ec:	e00a      	b.n	8000504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ee:	f3af 8000 	nop.w
 80004f2:	4601      	mov	r1, r0
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	1c5a      	adds	r2, r3, #1
 80004f8:	60ba      	str	r2, [r7, #8]
 80004fa:	b2ca      	uxtb	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf0      	blt.n	80004ee <_read+0x12>
  }

  return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b086      	sub	sp, #24
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
 8000526:	e009      	b.n	800053c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	60ba      	str	r2, [r7, #8]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe0b 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	3301      	adds	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf1      	blt.n	8000528 <_write+0x12>
  }
  return len;
 8000544:	687b      	ldr	r3, [r7, #4]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_close>:

int _close(int file)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000574:	605a      	str	r2, [r3, #4]
  return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_isatty>:

int _isatty(int file)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr

08000596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000596:	b480      	push	{r7}
 8000598:	b085      	sub	sp, #20
 800059a:	af00      	add	r7, sp, #0
 800059c:	60f8      	str	r0, [r7, #12]
 800059e:	60b9      	str	r1, [r7, #8]
 80005a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
	...

080005b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b8:	4a14      	ldr	r2, [pc, #80]	@ (800060c <_sbrk+0x5c>)
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <_sbrk+0x60>)
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c4:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <_sbrk+0x64>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d102      	bne.n	80005d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <_sbrk+0x64>)
 80005ce:	4a12      	ldr	r2, [pc, #72]	@ (8000618 <_sbrk+0x68>)
 80005d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005d2:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d207      	bcs.n	80005f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005e0:	f001 fc7e 	bl	8001ee0 <__errno>
 80005e4:	4603      	mov	r3, r0
 80005e6:	220c      	movs	r2, #12
 80005e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	e009      	b.n	8000604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005f0:	4b08      	ldr	r3, [pc, #32]	@ (8000614 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	4a05      	ldr	r2, [pc, #20]	@ (8000614 <_sbrk+0x64>)
 8000600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000602:	68fb      	ldr	r3, [r7, #12]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20005000 	.word	0x20005000
 8000610:	00000400 	.word	0x00000400
 8000614:	200000cc 	.word	0x200000cc
 8000618:	20000220 	.word	0x20000220

0800061c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000628:	f7ff fff8 	bl	800061c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480b      	ldr	r0, [pc, #44]	@ (800065c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800062e:	490c      	ldr	r1, [pc, #48]	@ (8000660 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000630:	4a0c      	ldr	r2, [pc, #48]	@ (8000664 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000644:	4c09      	ldr	r4, [pc, #36]	@ (800066c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000652:	f001 fc4b 	bl	8001eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff fd97 	bl	8000188 <main>
  bx lr
 800065a:	4770      	bx	lr
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000664:	08002430 	.word	0x08002430
  ldr r2, =_sbss
 8000668:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800066c:	20000220 	.word	0x20000220

08000670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_2_IRQHandler>
	...

08000674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <HAL_Init+0x28>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a07      	ldr	r2, [pc, #28]	@ (800069c <HAL_Init+0x28>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000684:	2003      	movs	r0, #3
 8000686:	f000 f947 	bl	8000918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 f808 	bl	80006a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000690:	f7ff fe80 	bl	8000394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40022000 	.word	0x40022000

080006a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_InitTick+0x54>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <HAL_InitTick+0x58>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f95f 	bl	8000982 <HAL_SYSTICK_Config>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00e      	b.n	80006ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	d80a      	bhi.n	80006ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d4:	2200      	movs	r2, #0
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f000 f927 	bl	800092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e0:	4a06      	ldr	r2, [pc, #24]	@ (80006fc <HAL_InitTick+0x5c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e000      	b.n	80006ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000704:	4b05      	ldr	r3, [pc, #20]	@ (800071c <HAL_IncTick+0x1c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <HAL_IncTick+0x20>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a03      	ldr	r2, [pc, #12]	@ (8000720 <HAL_IncTick+0x20>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000008 	.word	0x20000008
 8000720:	200000d0 	.word	0x200000d0

08000724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return uwTick;
 8000728:	4b02      	ldr	r3, [pc, #8]	@ (8000734 <HAL_GetTick+0x10>)
 800072a:	681b      	ldr	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	200000d0 	.word	0x200000d0

08000738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff fff0 	bl	8000724 <HAL_GetTick>
 8000744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000750:	d005      	beq.n	800075e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_Delay+0x44>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4413      	add	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800075e:	bf00      	nop
 8000760:	f7ff ffe0 	bl	8000724 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	429a      	cmp	r2, r3
 800076e:	d8f7      	bhi.n	8000760 <HAL_Delay+0x28>
  {
  }
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000008 	.word	0x20000008

08000780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800079c:	4013      	ands	r3, r2
 800079e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007b2:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <__NVIC_SetPriorityGrouping+0x44>)
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	60d3      	str	r3, [r2, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	0a1b      	lsrs	r3, r3, #8
 80007d2:	f003 0307 	and.w	r3, r3, #7
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	db0b      	blt.n	800080e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	f003 021f 	and.w	r2, r3, #31
 80007fc:	4906      	ldr	r1, [pc, #24]	@ (8000818 <__NVIC_EnableIRQ+0x34>)
 80007fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	2001      	movs	r0, #1
 8000806:	fa00 f202 	lsl.w	r2, r0, r2
 800080a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	db0a      	blt.n	8000846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	490c      	ldr	r1, [pc, #48]	@ (8000868 <__NVIC_SetPriority+0x4c>)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	0112      	lsls	r2, r2, #4
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	440b      	add	r3, r1
 8000840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000844:	e00a      	b.n	800085c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4908      	ldr	r1, [pc, #32]	@ (800086c <__NVIC_SetPriority+0x50>)
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	3b04      	subs	r3, #4
 8000854:	0112      	lsls	r2, r2, #4
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	440b      	add	r3, r1
 800085a:	761a      	strb	r2, [r3, #24]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000870:	b480      	push	{r7}
 8000872:	b089      	sub	sp, #36	@ 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2b04      	cmp	r3, #4
 800088c:	bf28      	it	cs
 800088e:	2304      	movcs	r3, #4
 8000890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3304      	adds	r3, #4
 8000896:	2b06      	cmp	r3, #6
 8000898:	d902      	bls.n	80008a0 <NVIC_EncodePriority+0x30>
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	3b03      	subs	r3, #3
 800089e:	e000      	b.n	80008a2 <NVIC_EncodePriority+0x32>
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	401a      	ands	r2, r3
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b8:	f04f 31ff 	mov.w	r1, #4294967295
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	fa01 f303 	lsl.w	r3, r1, r3
 80008c2:	43d9      	mvns	r1, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	4313      	orrs	r3, r2
         );
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3724      	adds	r7, #36	@ 0x24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008e4:	d301      	bcc.n	80008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00f      	b.n	800090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000914 <SysTick_Config+0x40>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008f2:	210f      	movs	r1, #15
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f7ff ff90 	bl	800081c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <SysTick_Config+0x40>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000902:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <SysTick_Config+0x40>)
 8000904:	2207      	movs	r2, #7
 8000906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	e000e010 	.word	0xe000e010

08000918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff2d 	bl	8000780 <__NVIC_SetPriorityGrouping>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800092e:	b580      	push	{r7, lr}
 8000930:	b086      	sub	sp, #24
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000940:	f7ff ff42 	bl	80007c8 <__NVIC_GetPriorityGrouping>
 8000944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	6978      	ldr	r0, [r7, #20]
 800094c:	f7ff ff90 	bl	8000870 <NVIC_EncodePriority>
 8000950:	4602      	mov	r2, r0
 8000952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff5f 	bl	800081c <__NVIC_SetPriority>
}
 800095e:	bf00      	nop
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff35 	bl	80007e4 <__NVIC_EnableIRQ>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffa2 	bl	80008d4 <SysTick_Config>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b08b      	sub	sp, #44	@ 0x2c
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ae:	e169      	b.n	8000c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009b0:	2201      	movs	r2, #1
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	f040 8158 	bne.w	8000c7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4a9a      	ldr	r2, [pc, #616]	@ (8000c3c <HAL_GPIO_Init+0x2a0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d05e      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009d8:	4a98      	ldr	r2, [pc, #608]	@ (8000c3c <HAL_GPIO_Init+0x2a0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d875      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009de:	4a98      	ldr	r2, [pc, #608]	@ (8000c40 <HAL_GPIO_Init+0x2a4>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d058      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009e4:	4a96      	ldr	r2, [pc, #600]	@ (8000c40 <HAL_GPIO_Init+0x2a4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d86f      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009ea:	4a96      	ldr	r2, [pc, #600]	@ (8000c44 <HAL_GPIO_Init+0x2a8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d052      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009f0:	4a94      	ldr	r2, [pc, #592]	@ (8000c44 <HAL_GPIO_Init+0x2a8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d869      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 80009f6:	4a94      	ldr	r2, [pc, #592]	@ (8000c48 <HAL_GPIO_Init+0x2ac>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d04c      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 80009fc:	4a92      	ldr	r2, [pc, #584]	@ (8000c48 <HAL_GPIO_Init+0x2ac>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d863      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a02:	4a92      	ldr	r2, [pc, #584]	@ (8000c4c <HAL_GPIO_Init+0x2b0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d046      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
 8000a08:	4a90      	ldr	r2, [pc, #576]	@ (8000c4c <HAL_GPIO_Init+0x2b0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d85d      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a0e:	2b12      	cmp	r3, #18
 8000a10:	d82a      	bhi.n	8000a68 <HAL_GPIO_Init+0xcc>
 8000a12:	2b12      	cmp	r3, #18
 8000a14:	d859      	bhi.n	8000aca <HAL_GPIO_Init+0x12e>
 8000a16:	a201      	add	r2, pc, #4	@ (adr r2, 8000a1c <HAL_GPIO_Init+0x80>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a97 	.word	0x08000a97
 8000a20:	08000a71 	.word	0x08000a71
 8000a24:	08000a83 	.word	0x08000a83
 8000a28:	08000ac5 	.word	0x08000ac5
 8000a2c:	08000acb 	.word	0x08000acb
 8000a30:	08000acb 	.word	0x08000acb
 8000a34:	08000acb 	.word	0x08000acb
 8000a38:	08000acb 	.word	0x08000acb
 8000a3c:	08000acb 	.word	0x08000acb
 8000a40:	08000acb 	.word	0x08000acb
 8000a44:	08000acb 	.word	0x08000acb
 8000a48:	08000acb 	.word	0x08000acb
 8000a4c:	08000acb 	.word	0x08000acb
 8000a50:	08000acb 	.word	0x08000acb
 8000a54:	08000acb 	.word	0x08000acb
 8000a58:	08000acb 	.word	0x08000acb
 8000a5c:	08000acb 	.word	0x08000acb
 8000a60:	08000a79 	.word	0x08000a79
 8000a64:	08000a8d 	.word	0x08000a8d
 8000a68:	4a79      	ldr	r2, [pc, #484]	@ (8000c50 <HAL_GPIO_Init+0x2b4>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a6e:	e02c      	b.n	8000aca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	623b      	str	r3, [r7, #32]
          break;
 8000a76:	e029      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	623b      	str	r3, [r7, #32]
          break;
 8000a80:	e024      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	3308      	adds	r3, #8
 8000a88:	623b      	str	r3, [r7, #32]
          break;
 8000a8a:	e01f      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	330c      	adds	r3, #12
 8000a92:	623b      	str	r3, [r7, #32]
          break;
 8000a94:	e01a      	b.n	8000acc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e013      	b.n	8000acc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d105      	bne.n	8000ab8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aac:	2308      	movs	r3, #8
 8000aae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	611a      	str	r2, [r3, #16]
          break;
 8000ab6:	e009      	b.n	8000acc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	615a      	str	r2, [r3, #20]
          break;
 8000ac2:	e003      	b.n	8000acc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x130>
          break;
 8000aca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	2bff      	cmp	r3, #255	@ 0xff
 8000ad0:	d801      	bhi.n	8000ad6 <HAL_GPIO_Init+0x13a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	e001      	b.n	8000ada <HAL_GPIO_Init+0x13e>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	2bff      	cmp	r3, #255	@ 0xff
 8000ae0:	d802      	bhi.n	8000ae8 <HAL_GPIO_Init+0x14c>
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_Init+0x152>
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aea:	3b08      	subs	r3, #8
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	210f      	movs	r1, #15
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	401a      	ands	r2, r3
 8000b00:	6a39      	ldr	r1, [r7, #32]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	fa01 f303 	lsl.w	r3, r1, r3
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 80b1 	beq.w	8000c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a4c      	ldr	r2, [pc, #304]	@ (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b4a      	ldr	r3, [pc, #296]	@ (8000c54 <HAL_GPIO_Init+0x2b8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b34:	4a48      	ldr	r2, [pc, #288]	@ (8000c58 <HAL_GPIO_Init+0x2bc>)
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	43db      	mvns	r3, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a40      	ldr	r2, [pc, #256]	@ (8000c5c <HAL_GPIO_Init+0x2c0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d013      	beq.n	8000b88 <HAL_GPIO_Init+0x1ec>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a3f      	ldr	r2, [pc, #252]	@ (8000c60 <HAL_GPIO_Init+0x2c4>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d00d      	beq.n	8000b84 <HAL_GPIO_Init+0x1e8>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a3e      	ldr	r2, [pc, #248]	@ (8000c64 <HAL_GPIO_Init+0x2c8>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d007      	beq.n	8000b80 <HAL_GPIO_Init+0x1e4>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <HAL_GPIO_Init+0x2cc>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d101      	bne.n	8000b7c <HAL_GPIO_Init+0x1e0>
 8000b78:	2303      	movs	r3, #3
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e004      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e002      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <HAL_GPIO_Init+0x1ee>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b8c:	f002 0203 	and.w	r2, r2, #3
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4093      	lsls	r3, r2
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b9a:	492f      	ldr	r1, [pc, #188]	@ (8000c58 <HAL_GPIO_Init+0x2bc>)
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9e:	089b      	lsrs	r3, r3, #2
 8000ba0:	3302      	adds	r3, #2
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	492c      	ldr	r1, [pc, #176]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	608b      	str	r3, [r1, #8]
 8000bc0:	e006      	b.n	8000bd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	4928      	ldr	r1, [pc, #160]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bdc:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bde:	68da      	ldr	r2, [r3, #12]
 8000be0:	4922      	ldr	r1, [pc, #136]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	60cb      	str	r3, [r1, #12]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	491e      	ldr	r1, [pc, #120]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c04:	4b19      	ldr	r3, [pc, #100]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	4918      	ldr	r1, [pc, #96]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c12:	4b16      	ldr	r3, [pc, #88]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4914      	ldr	r1, [pc, #80]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d021      	beq.n	8000c70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	490e      	ldr	r1, [pc, #56]	@ (8000c6c <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	600b      	str	r3, [r1, #0]
 8000c38:	e021      	b.n	8000c7e <HAL_GPIO_Init+0x2e2>
 8000c3a:	bf00      	nop
 8000c3c:	10320000 	.word	0x10320000
 8000c40:	10310000 	.word	0x10310000
 8000c44:	10220000 	.word	0x10220000
 8000c48:	10210000 	.word	0x10210000
 8000c4c:	10120000 	.word	0x10120000
 8000c50:	10110000 	.word	0x10110000
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40010c00 	.word	0x40010c00
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40011400 	.word	0x40011400
 8000c6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <HAL_GPIO_Init+0x304>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	4909      	ldr	r1, [pc, #36]	@ (8000ca0 <HAL_GPIO_Init+0x304>)
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c80:	3301      	adds	r3, #1
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f47f ae8e 	bne.w	80009b0 <HAL_GPIO_Init+0x14>
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	372c      	adds	r7, #44	@ 0x2c
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40010400 	.word	0x40010400

08000ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cb4:	787b      	ldrb	r3, [r7, #1]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cc0:	e003      	b.n	8000cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	041a      	lsls	r2, r3, #16
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	611a      	str	r2, [r3, #16]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f806 	bl	8000d04 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40010400 	.word	0x40010400

08000d04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e272      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8087 	beq.w	8000e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d38:	4b92      	ldr	r3, [pc, #584]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d00c      	beq.n	8000d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d44:	4b8f      	ldr	r3, [pc, #572]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 030c 	and.w	r3, r3, #12
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d112      	bne.n	8000d76 <HAL_RCC_OscConfig+0x5e>
 8000d50:	4b8c      	ldr	r3, [pc, #560]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d5c:	d10b      	bne.n	8000d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5e:	4b89      	ldr	r3, [pc, #548]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d06c      	beq.n	8000e44 <HAL_RCC_OscConfig+0x12c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d168      	bne.n	8000e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e24c      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d7e:	d106      	bne.n	8000d8e <HAL_RCC_OscConfig+0x76>
 8000d80:	4b80      	ldr	r3, [pc, #512]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a7f      	ldr	r2, [pc, #508]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e02e      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x98>
 8000d96:	4b7b      	ldr	r3, [pc, #492]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b78      	ldr	r3, [pc, #480]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a77      	ldr	r2, [pc, #476]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e01d      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000db8:	d10c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xbc>
 8000dba:	4b72      	ldr	r3, [pc, #456]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a71      	ldr	r2, [pc, #452]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a6e      	ldr	r2, [pc, #440]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e00b      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000dd4:	4b6b      	ldr	r3, [pc, #428]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a6a      	ldr	r2, [pc, #424]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b68      	ldr	r3, [pc, #416]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a67      	ldr	r2, [pc, #412]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d013      	beq.n	8000e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fc96 	bl	8000724 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fc92 	bl	8000724 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b64      	cmp	r3, #100	@ 0x64
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e200      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0xe4>
 8000e1a:	e014      	b.n	8000e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff fc82 	bl	8000724 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fc7e 	bl	8000724 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	@ 0x64
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e1ec      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	4b53      	ldr	r3, [pc, #332]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0x10c>
 8000e42:	e000      	b.n	8000e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d063      	beq.n	8000f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e52:	4b4c      	ldr	r3, [pc, #304]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e5e:	4b49      	ldr	r3, [pc, #292]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d11c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x18c>
 8000e6a:	4b46      	ldr	r3, [pc, #280]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d116      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	4b43      	ldr	r3, [pc, #268]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d001      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e1c0      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4939      	ldr	r1, [pc, #228]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	e03a      	b.n	8000f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d020      	beq.n	8000eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eac:	4b36      	ldr	r3, [pc, #216]	@ (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb2:	f7ff fc37 	bl	8000724 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff fc33 	bl	8000724 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e1a1      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4927      	ldr	r1, [pc, #156]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
 8000eec:	e015      	b.n	8000f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eee:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fc16 	bl	8000724 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efc:	f7ff fc12 	bl	8000724 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e180      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d03a      	beq.n	8000f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d019      	beq.n	8000f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2e:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_RCC_OscConfig+0x274>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fbf6 	bl	8000724 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fbf2 	bl	8000724 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e160      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f000 face 	bl	80014fc <RCC_Delay>
 8000f60:	e01c      	b.n	8000f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_RCC_OscConfig+0x274>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff fbdc 	bl	8000724 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6e:	e00f      	b.n	8000f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff fbd8 	bl	8000724 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d908      	bls.n	8000f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e146      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	42420000 	.word	0x42420000
 8000f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f90:	4b92      	ldr	r3, [pc, #584]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e9      	bne.n	8000f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80a6 	beq.w	80010f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fae:	4b8b      	ldr	r3, [pc, #556]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b88      	ldr	r3, [pc, #544]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a87      	ldr	r2, [pc, #540]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b85      	ldr	r3, [pc, #532]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd6:	4b82      	ldr	r3, [pc, #520]	@ (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d118      	bne.n	8001014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fb99 	bl	8000724 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff6:	f7ff fb95 	bl	8000724 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	@ 0x64
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e103      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001008:	4b75      	ldr	r3, [pc, #468]	@ (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x312>
 800101c:	4b6f      	ldr	r3, [pc, #444]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a6e      	ldr	r2, [pc, #440]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e02d      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x334>
 8001032:	4b6a      	ldr	r3, [pc, #424]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a69      	ldr	r2, [pc, #420]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6213      	str	r3, [r2, #32]
 800103e:	4b67      	ldr	r3, [pc, #412]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a66      	ldr	r2, [pc, #408]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 0304 	bic.w	r3, r3, #4
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	e01c      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d10c      	bne.n	800106e <HAL_RCC_OscConfig+0x356>
 8001054:	4b61      	ldr	r3, [pc, #388]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a60      	ldr	r2, [pc, #384]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	4b5e      	ldr	r3, [pc, #376]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a5d      	ldr	r2, [pc, #372]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800106e:	4b5b      	ldr	r3, [pc, #364]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a5a      	ldr	r2, [pc, #360]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	4b58      	ldr	r3, [pc, #352]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a57      	ldr	r2, [pc, #348]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d015      	beq.n	80010ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff fb49 	bl	8000724 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff fb45 	bl	8000724 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0b1      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	4b4b      	ldr	r3, [pc, #300]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ee      	beq.n	8001096 <HAL_RCC_OscConfig+0x37e>
 80010b8:	e014      	b.n	80010e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb33 	bl	8000724 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fb2f 	bl	8000724 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e09b      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	4b40      	ldr	r3, [pc, #256]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ee      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d105      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ea:	4b3c      	ldr	r3, [pc, #240]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a3b      	ldr	r2, [pc, #236]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8087 	beq.w	800120e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b08      	cmp	r3, #8
 800110a:	d061      	beq.n	80011d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d146      	bne.n	80011a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001114:	4b33      	ldr	r3, [pc, #204]	@ (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff fb03 	bl	8000724 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff faff 	bl	8000724 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e06d      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001134:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001148:	d108      	bne.n	800115c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800114a:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4921      	ldr	r1, [pc, #132]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115c:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a19      	ldr	r1, [r3, #32]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	430b      	orrs	r3, r1
 800116e:	491b      	ldr	r1, [pc, #108]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff fad3 	bl	8000724 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001182:	f7ff facf 	bl	8000724 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e03d      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x46a>
 80011a0:	e035      	b.n	800120e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fabc 	bl	8000724 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff fab8 	bl	8000724 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e026      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x498>
 80011ce:	e01e      	b.n	800120e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d107      	bne.n	80011e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e019      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40007000 	.word	0x40007000
 80011e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <HAL_RCC_OscConfig+0x500>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0d0      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001230:	4b6a      	ldr	r3, [pc, #424]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d910      	bls.n	8001260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b67      	ldr	r3, [pc, #412]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 0207 	bic.w	r2, r3, #7
 8001246:	4965      	ldr	r1, [pc, #404]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124e:	4b63      	ldr	r3, [pc, #396]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0b8      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001278:	4b59      	ldr	r3, [pc, #356]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a58      	ldr	r2, [pc, #352]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001290:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800129a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800129c:	4b50      	ldr	r3, [pc, #320]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	494d      	ldr	r1, [pc, #308]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d040      	beq.n	800133c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b47      	ldr	r3, [pc, #284]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d115      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e07f      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	4b41      	ldr	r3, [pc, #260]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e073      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e06b      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fa:	4b39      	ldr	r3, [pc, #228]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f023 0203 	bic.w	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4936      	ldr	r1, [pc, #216]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800130c:	f7ff fa0a 	bl	8000724 <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	e00a      	b.n	800132a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	f7ff fa06 	bl	8000724 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e053      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	4b2d      	ldr	r3, [pc, #180]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 020c 	and.w	r2, r3, #12
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d1eb      	bne.n	8001314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800133c:	4b27      	ldr	r3, [pc, #156]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d210      	bcs.n	800136c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b24      	ldr	r3, [pc, #144]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 0207 	bic.w	r2, r3, #7
 8001352:	4922      	ldr	r1, [pc, #136]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b20      	ldr	r3, [pc, #128]	@ (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e032      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001378:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4916      	ldr	r1, [pc, #88]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001396:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	490e      	ldr	r1, [pc, #56]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013aa:	f000 f821 	bl	80013f0 <HAL_RCC_GetSysClockFreq>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	490a      	ldr	r1, [pc, #40]	@ (80013e4 <HAL_RCC_ClockConfig+0x1c8>)
 80013bc:	5ccb      	ldrb	r3, [r1, r3]
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <HAL_RCC_ClockConfig+0x1cc>)
 80013c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <HAL_RCC_ClockConfig+0x1d0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f968 	bl	80006a0 <HAL_InitTick>

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	080023fc 	.word	0x080023fc
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <HAL_RCC_GetSysClockFreq+0x94>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b04      	cmp	r3, #4
 8001418:	d002      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x30>
 800141a:	2b08      	cmp	r3, #8
 800141c:	d003      	beq.n	8001426 <HAL_RCC_GetSysClockFreq+0x36>
 800141e:	e027      	b.n	8001470 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_RCC_GetSysClockFreq+0x98>)
 8001422:	613b      	str	r3, [r7, #16]
      break;
 8001424:	e027      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	0c9b      	lsrs	r3, r3, #18
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	4a17      	ldr	r2, [pc, #92]	@ (800148c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001430:	5cd3      	ldrb	r3, [r2, r3]
 8001432:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d010      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_RCC_GetSysClockFreq+0x94>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0c5b      	lsrs	r3, r3, #17
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <HAL_RCC_GetSysClockFreq+0xa0>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <HAL_RCC_GetSysClockFreq+0x98>)
 8001452:	fb03 f202 	mul.w	r2, r3, r2
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	fbb2 f3f3 	udiv	r3, r2, r3
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e004      	b.n	800146a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a0c      	ldr	r2, [pc, #48]	@ (8001494 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001464:	fb02 f303 	mul.w	r3, r2, r3
 8001468:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	613b      	str	r3, [r7, #16]
      break;
 800146e:	e002      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_RCC_GetSysClockFreq+0x98>)
 8001472:	613b      	str	r3, [r7, #16]
      break;
 8001474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001476:	693b      	ldr	r3, [r7, #16]
}
 8001478:	4618      	mov	r0, r3
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	007a1200 	.word	0x007a1200
 800148c:	08002414 	.word	0x08002414
 8001490:	08002424 	.word	0x08002424
 8001494:	003d0900 	.word	0x003d0900

08001498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800149c:	4b02      	ldr	r3, [pc, #8]	@ (80014a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800149e:	681b      	ldr	r3, [r3, #0]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000000 	.word	0x20000000

080014ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014b0:	f7ff fff2 	bl	8001498 <HAL_RCC_GetHCLKFreq>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	0a1b      	lsrs	r3, r3, #8
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	4903      	ldr	r1, [pc, #12]	@ (80014d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	0800240c 	.word	0x0800240c

080014d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014d8:	f7ff ffde 	bl	8001498 <HAL_RCC_GetHCLKFreq>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	0adb      	lsrs	r3, r3, #11
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	4903      	ldr	r1, [pc, #12]	@ (80014f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ea:	5ccb      	ldrb	r3, [r1, r3]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40021000 	.word	0x40021000
 80014f8:	0800240c 	.word	0x0800240c

080014fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001504:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <RCC_Delay+0x34>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <RCC_Delay+0x38>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	0a5b      	lsrs	r3, r3, #9
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001518:	bf00      	nop
  }
  while (Delay --);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1e5a      	subs	r2, r3, #1
 800151e:	60fa      	str	r2, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f9      	bne.n	8001518 <RCC_Delay+0x1c>
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000000 	.word	0x20000000
 8001534:	10624dd3 	.word	0x10624dd3

08001538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e042      	b.n	80015d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7fe ff4a 	bl	80003f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2224      	movs	r2, #36	@ 0x24
 8001568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800157a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fa09 	bl	8001994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80015a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2220      	movs	r2, #32
 80015bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	af02      	add	r7, sp, #8
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	4613      	mov	r3, r2
 80015e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b20      	cmp	r3, #32
 80015f6:	d175      	bne.n	80016e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <HAL_UART_Transmit+0x2c>
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e06e      	b.n	80016e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2221      	movs	r2, #33	@ 0x21
 8001612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001616:	f7ff f885 	bl	8000724 <HAL_GetTick>
 800161a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	88fa      	ldrh	r2, [r7, #6]
 8001626:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001630:	d108      	bne.n	8001644 <HAL_UART_Transmit+0x6c>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d104      	bne.n	8001644 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	e003      	b.n	800164c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800164c:	e02e      	b.n	80016ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2200      	movs	r2, #0
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f8df 	bl	800181c <UART_WaitOnFlagUntilTimeout>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e03a      	b.n	80016e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10b      	bne.n	800168e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	3302      	adds	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	e007      	b.n	800169e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	3301      	adds	r3, #1
 800169c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	3b01      	subs	r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1cb      	bne.n	800164e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2200      	movs	r2, #0
 80016be:	2140      	movs	r1, #64	@ 0x40
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f8ab 	bl	800181c <UART_WaitOnFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2220      	movs	r2, #32
 80016d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e006      	b.n	80016e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2220      	movs	r2, #32
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e000      	b.n	80016e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80016e4:	2302      	movs	r3, #2
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b08a      	sub	sp, #40	@ 0x28
 80016f2:	af02      	add	r7, sp, #8
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4613      	mov	r3, r2
 80016fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b20      	cmp	r3, #32
 800170c:	f040 8081 	bne.w	8001812 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <HAL_UART_Receive+0x2e>
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e079      	b.n	8001814 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2222      	movs	r2, #34	@ 0x22
 800172a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001734:	f7fe fff6 	bl	8000724 <HAL_GetTick>
 8001738:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	88fa      	ldrh	r2, [r7, #6]
 800173e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800174e:	d108      	bne.n	8001762 <HAL_UART_Receive+0x74>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	61bb      	str	r3, [r7, #24]
 8001760:	e003      	b.n	800176a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800176a:	e047      	b.n	80017fc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2200      	movs	r2, #0
 8001774:	2120      	movs	r1, #32
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f850 	bl	800181c <UART_WaitOnFlagUntilTimeout>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e042      	b.n	8001814 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10c      	bne.n	80017ae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	b29b      	uxth	r3, r3
 800179c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	3302      	adds	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	e01f      	b.n	80017ee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017b6:	d007      	beq.n	80017c8 <HAL_UART_Receive+0xda>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10a      	bne.n	80017d6 <HAL_UART_Receive+0xe8>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d106      	bne.n	80017d6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	e008      	b.n	80017e8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	3301      	adds	r3, #1
 80017ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001800:	b29b      	uxth	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1b2      	bne.n	800176c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	4613      	mov	r3, r2
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800182c:	e03b      	b.n	80018a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d037      	beq.n	80018a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001836:	f7fe ff75 	bl	8000724 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	6a3a      	ldr	r2, [r7, #32]
 8001842:	429a      	cmp	r2, r3
 8001844:	d302      	bcc.n	800184c <UART_WaitOnFlagUntilTimeout+0x30>
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e03a      	b.n	80018c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d023      	beq.n	80018a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b80      	cmp	r3, #128	@ 0x80
 8001862:	d020      	beq.n	80018a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b40      	cmp	r3, #64	@ 0x40
 8001868:	d01d      	beq.n	80018a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b08      	cmp	r3, #8
 8001876:	d116      	bne.n	80018a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 f81d 	bl	80018ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2208      	movs	r2, #8
 8001898:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00f      	b.n	80018c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	4013      	ands	r3, r2
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d0b4      	beq.n	800182e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b095      	sub	sp, #84	@ 0x54
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	330c      	adds	r3, #12
 80018dc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e0:	e853 3f00 	ldrex	r3, [r3]
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80018e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80018ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	330c      	adds	r3, #12
 80018f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80018f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80018fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80018fe:	e841 2300 	strex	r3, r2, [r1]
 8001902:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1e5      	bne.n	80018d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3314      	adds	r3, #20
 8001910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	e853 3f00 	ldrex	r3, [r3]
 8001918:	61fb      	str	r3, [r7, #28]
   return(result);
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	3314      	adds	r3, #20
 8001928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800192a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800192e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001932:	e841 2300 	strex	r3, r2, [r1]
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1e5      	bne.n	800190a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	2b01      	cmp	r3, #1
 8001944:	d119      	bne.n	800197a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	330c      	adds	r3, #12
 800194c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	e853 3f00 	ldrex	r3, [r3]
 8001954:	60bb      	str	r3, [r7, #8]
   return(result);
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f023 0310 	bic.w	r3, r3, #16
 800195c:	647b      	str	r3, [r7, #68]	@ 0x44
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	330c      	adds	r3, #12
 8001964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001966:	61ba      	str	r2, [r7, #24]
 8001968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800196a:	6979      	ldr	r1, [r7, #20]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	e841 2300 	strex	r3, r2, [r1]
 8001972:	613b      	str	r3, [r7, #16]
   return(result);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e5      	bne.n	8001946 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2220      	movs	r2, #32
 800197e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001988:	bf00      	nop
 800198a:	3754      	adds	r7, #84	@ 0x54
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
	...

08001994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80019ce:	f023 030c 	bic.w	r3, r3, #12
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	430b      	orrs	r3, r1
 80019da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699a      	ldr	r2, [r3, #24]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa8 <UART_SetConfig+0x114>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d103      	bne.n	8001a04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019fc:	f7ff fd6a 	bl	80014d4 <HAL_RCC_GetPCLK2Freq>
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	e002      	b.n	8001a0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a04:	f7ff fd52 	bl	80014ac <HAL_RCC_GetPCLK1Freq>
 8001a08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	009a      	lsls	r2, r3, #2
 8001a14:	441a      	add	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <UART_SetConfig+0x118>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	095b      	lsrs	r3, r3, #5
 8001a28:	0119      	lsls	r1, r3, #4
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009a      	lsls	r2, r3, #2
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a40:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <UART_SetConfig+0x118>)
 8001a42:	fba3 0302 	umull	r0, r3, r3, r2
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2064      	movs	r0, #100	@ 0x64
 8001a4a:	fb00 f303 	mul.w	r3, r0, r3
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	3332      	adds	r3, #50	@ 0x32
 8001a54:	4a15      	ldr	r2, [pc, #84]	@ (8001aac <UART_SetConfig+0x118>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a60:	4419      	add	r1, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	009a      	lsls	r2, r3, #2
 8001a6c:	441a      	add	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <UART_SetConfig+0x118>)
 8001a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2064      	movs	r0, #100	@ 0x64
 8001a82:	fb00 f303 	mul.w	r3, r0, r3
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	3332      	adds	r3, #50	@ 0x32
 8001a8c:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <UART_SetConfig+0x118>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	f003 020f 	and.w	r2, r3, #15
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	440a      	add	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40013800 	.word	0x40013800
 8001aac:	51eb851f 	.word	0x51eb851f

08001ab0 <__sflush_r>:
 8001ab0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	0716      	lsls	r6, r2, #28
 8001ab8:	4605      	mov	r5, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	d454      	bmi.n	8001b68 <__sflush_r+0xb8>
 8001abe:	684b      	ldr	r3, [r1, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	dc02      	bgt.n	8001aca <__sflush_r+0x1a>
 8001ac4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	dd48      	ble.n	8001b5c <__sflush_r+0xac>
 8001aca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001acc:	2e00      	cmp	r6, #0
 8001ace:	d045      	beq.n	8001b5c <__sflush_r+0xac>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001ad6:	682f      	ldr	r7, [r5, #0]
 8001ad8:	6a21      	ldr	r1, [r4, #32]
 8001ada:	602b      	str	r3, [r5, #0]
 8001adc:	d030      	beq.n	8001b40 <__sflush_r+0x90>
 8001ade:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	0759      	lsls	r1, r3, #29
 8001ae4:	d505      	bpl.n	8001af2 <__sflush_r+0x42>
 8001ae6:	6863      	ldr	r3, [r4, #4]
 8001ae8:	1ad2      	subs	r2, r2, r3
 8001aea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001aec:	b10b      	cbz	r3, 8001af2 <__sflush_r+0x42>
 8001aee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001af0:	1ad2      	subs	r2, r2, r3
 8001af2:	2300      	movs	r3, #0
 8001af4:	4628      	mov	r0, r5
 8001af6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001af8:	6a21      	ldr	r1, [r4, #32]
 8001afa:	47b0      	blx	r6
 8001afc:	1c43      	adds	r3, r0, #1
 8001afe:	89a3      	ldrh	r3, [r4, #12]
 8001b00:	d106      	bne.n	8001b10 <__sflush_r+0x60>
 8001b02:	6829      	ldr	r1, [r5, #0]
 8001b04:	291d      	cmp	r1, #29
 8001b06:	d82b      	bhi.n	8001b60 <__sflush_r+0xb0>
 8001b08:	4a28      	ldr	r2, [pc, #160]	@ (8001bac <__sflush_r+0xfc>)
 8001b0a:	40ca      	lsrs	r2, r1
 8001b0c:	07d6      	lsls	r6, r2, #31
 8001b0e:	d527      	bpl.n	8001b60 <__sflush_r+0xb0>
 8001b10:	2200      	movs	r2, #0
 8001b12:	6062      	str	r2, [r4, #4]
 8001b14:	6922      	ldr	r2, [r4, #16]
 8001b16:	04d9      	lsls	r1, r3, #19
 8001b18:	6022      	str	r2, [r4, #0]
 8001b1a:	d504      	bpl.n	8001b26 <__sflush_r+0x76>
 8001b1c:	1c42      	adds	r2, r0, #1
 8001b1e:	d101      	bne.n	8001b24 <__sflush_r+0x74>
 8001b20:	682b      	ldr	r3, [r5, #0]
 8001b22:	b903      	cbnz	r3, 8001b26 <__sflush_r+0x76>
 8001b24:	6560      	str	r0, [r4, #84]	@ 0x54
 8001b26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b28:	602f      	str	r7, [r5, #0]
 8001b2a:	b1b9      	cbz	r1, 8001b5c <__sflush_r+0xac>
 8001b2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d002      	beq.n	8001b3a <__sflush_r+0x8a>
 8001b34:	4628      	mov	r0, r5
 8001b36:	f000 fa01 	bl	8001f3c <_free_r>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b3e:	e00d      	b.n	8001b5c <__sflush_r+0xac>
 8001b40:	2301      	movs	r3, #1
 8001b42:	4628      	mov	r0, r5
 8001b44:	47b0      	blx	r6
 8001b46:	4602      	mov	r2, r0
 8001b48:	1c50      	adds	r0, r2, #1
 8001b4a:	d1c9      	bne.n	8001ae0 <__sflush_r+0x30>
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0c6      	beq.n	8001ae0 <__sflush_r+0x30>
 8001b52:	2b1d      	cmp	r3, #29
 8001b54:	d001      	beq.n	8001b5a <__sflush_r+0xaa>
 8001b56:	2b16      	cmp	r3, #22
 8001b58:	d11d      	bne.n	8001b96 <__sflush_r+0xe6>
 8001b5a:	602f      	str	r7, [r5, #0]
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	e021      	b.n	8001ba4 <__sflush_r+0xf4>
 8001b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	e01a      	b.n	8001b9e <__sflush_r+0xee>
 8001b68:	690f      	ldr	r7, [r1, #16]
 8001b6a:	2f00      	cmp	r7, #0
 8001b6c:	d0f6      	beq.n	8001b5c <__sflush_r+0xac>
 8001b6e:	0793      	lsls	r3, r2, #30
 8001b70:	bf18      	it	ne
 8001b72:	2300      	movne	r3, #0
 8001b74:	680e      	ldr	r6, [r1, #0]
 8001b76:	bf08      	it	eq
 8001b78:	694b      	ldreq	r3, [r1, #20]
 8001b7a:	1bf6      	subs	r6, r6, r7
 8001b7c:	600f      	str	r7, [r1, #0]
 8001b7e:	608b      	str	r3, [r1, #8]
 8001b80:	2e00      	cmp	r6, #0
 8001b82:	ddeb      	ble.n	8001b5c <__sflush_r+0xac>
 8001b84:	4633      	mov	r3, r6
 8001b86:	463a      	mov	r2, r7
 8001b88:	4628      	mov	r0, r5
 8001b8a:	6a21      	ldr	r1, [r4, #32]
 8001b8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001b90:	47e0      	blx	ip
 8001b92:	2800      	cmp	r0, #0
 8001b94:	dc07      	bgt.n	8001ba6 <__sflush_r+0xf6>
 8001b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba2:	81a3      	strh	r3, [r4, #12]
 8001ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba6:	4407      	add	r7, r0
 8001ba8:	1a36      	subs	r6, r6, r0
 8001baa:	e7e9      	b.n	8001b80 <__sflush_r+0xd0>
 8001bac:	20400001 	.word	0x20400001

08001bb0 <_fflush_r>:
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	690b      	ldr	r3, [r1, #16]
 8001bb4:	4605      	mov	r5, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	b913      	cbnz	r3, 8001bc0 <_fflush_r+0x10>
 8001bba:	2500      	movs	r5, #0
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	bd38      	pop	{r3, r4, r5, pc}
 8001bc0:	b118      	cbz	r0, 8001bca <_fflush_r+0x1a>
 8001bc2:	6a03      	ldr	r3, [r0, #32]
 8001bc4:	b90b      	cbnz	r3, 8001bca <_fflush_r+0x1a>
 8001bc6:	f000 f8bb 	bl	8001d40 <__sinit>
 8001bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f3      	beq.n	8001bba <_fflush_r+0xa>
 8001bd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001bd4:	07d0      	lsls	r0, r2, #31
 8001bd6:	d404      	bmi.n	8001be2 <_fflush_r+0x32>
 8001bd8:	0599      	lsls	r1, r3, #22
 8001bda:	d402      	bmi.n	8001be2 <_fflush_r+0x32>
 8001bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bde:	f000 f9aa 	bl	8001f36 <__retarget_lock_acquire_recursive>
 8001be2:	4628      	mov	r0, r5
 8001be4:	4621      	mov	r1, r4
 8001be6:	f7ff ff63 	bl	8001ab0 <__sflush_r>
 8001bea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001bec:	4605      	mov	r5, r0
 8001bee:	07da      	lsls	r2, r3, #31
 8001bf0:	d4e4      	bmi.n	8001bbc <_fflush_r+0xc>
 8001bf2:	89a3      	ldrh	r3, [r4, #12]
 8001bf4:	059b      	lsls	r3, r3, #22
 8001bf6:	d4e1      	bmi.n	8001bbc <_fflush_r+0xc>
 8001bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001bfa:	f000 f99d 	bl	8001f38 <__retarget_lock_release_recursive>
 8001bfe:	e7dd      	b.n	8001bbc <_fflush_r+0xc>

08001c00 <fflush>:
 8001c00:	4601      	mov	r1, r0
 8001c02:	b920      	cbnz	r0, 8001c0e <fflush+0xe>
 8001c04:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <fflush+0x18>)
 8001c06:	4905      	ldr	r1, [pc, #20]	@ (8001c1c <fflush+0x1c>)
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <fflush+0x20>)
 8001c0a:	f000 b8b1 	b.w	8001d70 <_fwalk_sglue>
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <fflush+0x24>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	f7ff bfcd 	b.w	8001bb0 <_fflush_r>
 8001c16:	bf00      	nop
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	08001bb1 	.word	0x08001bb1
 8001c20:	2000001c 	.word	0x2000001c
 8001c24:	20000018 	.word	0x20000018

08001c28 <std>:
 8001c28:	2300      	movs	r3, #0
 8001c2a:	b510      	push	{r4, lr}
 8001c2c:	4604      	mov	r4, r0
 8001c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8001c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c36:	6083      	str	r3, [r0, #8]
 8001c38:	8181      	strh	r1, [r0, #12]
 8001c3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001c3c:	81c2      	strh	r2, [r0, #14]
 8001c3e:	6183      	str	r3, [r0, #24]
 8001c40:	4619      	mov	r1, r3
 8001c42:	2208      	movs	r2, #8
 8001c44:	305c      	adds	r0, #92	@ 0x5c
 8001c46:	f000 f8fc 	bl	8001e42 <memset>
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <std+0x58>)
 8001c4c:	6224      	str	r4, [r4, #32]
 8001c4e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <std+0x5c>)
 8001c52:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <std+0x60>)
 8001c56:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <std+0x64>)
 8001c5a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <std+0x68>)
 8001c5e:	429c      	cmp	r4, r3
 8001c60:	d006      	beq.n	8001c70 <std+0x48>
 8001c62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001c66:	4294      	cmp	r4, r2
 8001c68:	d002      	beq.n	8001c70 <std+0x48>
 8001c6a:	33d0      	adds	r3, #208	@ 0xd0
 8001c6c:	429c      	cmp	r4, r3
 8001c6e:	d105      	bne.n	8001c7c <std+0x54>
 8001c70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c78:	f000 b95c 	b.w	8001f34 <__retarget_lock_init_recursive>
 8001c7c:	bd10      	pop	{r4, pc}
 8001c7e:	bf00      	nop
 8001c80:	08001dbd 	.word	0x08001dbd
 8001c84:	08001ddf 	.word	0x08001ddf
 8001c88:	08001e17 	.word	0x08001e17
 8001c8c:	08001e3b 	.word	0x08001e3b
 8001c90:	200000d4 	.word	0x200000d4

08001c94 <stdio_exit_handler>:
 8001c94:	4a02      	ldr	r2, [pc, #8]	@ (8001ca0 <stdio_exit_handler+0xc>)
 8001c96:	4903      	ldr	r1, [pc, #12]	@ (8001ca4 <stdio_exit_handler+0x10>)
 8001c98:	4803      	ldr	r0, [pc, #12]	@ (8001ca8 <stdio_exit_handler+0x14>)
 8001c9a:	f000 b869 	b.w	8001d70 <_fwalk_sglue>
 8001c9e:	bf00      	nop
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	08001bb1 	.word	0x08001bb1
 8001ca8:	2000001c 	.word	0x2000001c

08001cac <cleanup_stdio>:
 8001cac:	6841      	ldr	r1, [r0, #4]
 8001cae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <cleanup_stdio+0x34>)
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	4299      	cmp	r1, r3
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	d001      	beq.n	8001cbc <cleanup_stdio+0x10>
 8001cb8:	f7ff ff7a 	bl	8001bb0 <_fflush_r>
 8001cbc:	68a1      	ldr	r1, [r4, #8]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <cleanup_stdio+0x38>)
 8001cc0:	4299      	cmp	r1, r3
 8001cc2:	d002      	beq.n	8001cca <cleanup_stdio+0x1e>
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff ff73 	bl	8001bb0 <_fflush_r>
 8001cca:	68e1      	ldr	r1, [r4, #12]
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <cleanup_stdio+0x3c>)
 8001cce:	4299      	cmp	r1, r3
 8001cd0:	d004      	beq.n	8001cdc <cleanup_stdio+0x30>
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd8:	f7ff bf6a 	b.w	8001bb0 <_fflush_r>
 8001cdc:	bd10      	pop	{r4, pc}
 8001cde:	bf00      	nop
 8001ce0:	200000d4 	.word	0x200000d4
 8001ce4:	2000013c 	.word	0x2000013c
 8001ce8:	200001a4 	.word	0x200001a4

08001cec <global_stdio_init.part.0>:
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <global_stdio_init.part.0+0x30>)
 8001cf0:	4c0b      	ldr	r4, [pc, #44]	@ (8001d20 <global_stdio_init.part.0+0x34>)
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d24 <global_stdio_init.part.0+0x38>)
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	2104      	movs	r1, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f7ff ff94 	bl	8001c28 <std>
 8001d00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001d04:	2201      	movs	r2, #1
 8001d06:	2109      	movs	r1, #9
 8001d08:	f7ff ff8e 	bl	8001c28 <std>
 8001d0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001d10:	2202      	movs	r2, #2
 8001d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d16:	2112      	movs	r1, #18
 8001d18:	f7ff bf86 	b.w	8001c28 <std>
 8001d1c:	2000020c 	.word	0x2000020c
 8001d20:	200000d4 	.word	0x200000d4
 8001d24:	08001c95 	.word	0x08001c95

08001d28 <__sfp_lock_acquire>:
 8001d28:	4801      	ldr	r0, [pc, #4]	@ (8001d30 <__sfp_lock_acquire+0x8>)
 8001d2a:	f000 b904 	b.w	8001f36 <__retarget_lock_acquire_recursive>
 8001d2e:	bf00      	nop
 8001d30:	20000215 	.word	0x20000215

08001d34 <__sfp_lock_release>:
 8001d34:	4801      	ldr	r0, [pc, #4]	@ (8001d3c <__sfp_lock_release+0x8>)
 8001d36:	f000 b8ff 	b.w	8001f38 <__retarget_lock_release_recursive>
 8001d3a:	bf00      	nop
 8001d3c:	20000215 	.word	0x20000215

08001d40 <__sinit>:
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4604      	mov	r4, r0
 8001d44:	f7ff fff0 	bl	8001d28 <__sfp_lock_acquire>
 8001d48:	6a23      	ldr	r3, [r4, #32]
 8001d4a:	b11b      	cbz	r3, 8001d54 <__sinit+0x14>
 8001d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d50:	f7ff bff0 	b.w	8001d34 <__sfp_lock_release>
 8001d54:	4b04      	ldr	r3, [pc, #16]	@ (8001d68 <__sinit+0x28>)
 8001d56:	6223      	str	r3, [r4, #32]
 8001d58:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <__sinit+0x2c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f5      	bne.n	8001d4c <__sinit+0xc>
 8001d60:	f7ff ffc4 	bl	8001cec <global_stdio_init.part.0>
 8001d64:	e7f2      	b.n	8001d4c <__sinit+0xc>
 8001d66:	bf00      	nop
 8001d68:	08001cad 	.word	0x08001cad
 8001d6c:	2000020c 	.word	0x2000020c

08001d70 <_fwalk_sglue>:
 8001d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d74:	4607      	mov	r7, r0
 8001d76:	4688      	mov	r8, r1
 8001d78:	4614      	mov	r4, r2
 8001d7a:	2600      	movs	r6, #0
 8001d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d80:	f1b9 0901 	subs.w	r9, r9, #1
 8001d84:	d505      	bpl.n	8001d92 <_fwalk_sglue+0x22>
 8001d86:	6824      	ldr	r4, [r4, #0]
 8001d88:	2c00      	cmp	r4, #0
 8001d8a:	d1f7      	bne.n	8001d7c <_fwalk_sglue+0xc>
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d92:	89ab      	ldrh	r3, [r5, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d907      	bls.n	8001da8 <_fwalk_sglue+0x38>
 8001d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	d003      	beq.n	8001da8 <_fwalk_sglue+0x38>
 8001da0:	4629      	mov	r1, r5
 8001da2:	4638      	mov	r0, r7
 8001da4:	47c0      	blx	r8
 8001da6:	4306      	orrs	r6, r0
 8001da8:	3568      	adds	r5, #104	@ 0x68
 8001daa:	e7e9      	b.n	8001d80 <_fwalk_sglue+0x10>

08001dac <putchar>:
 8001dac:	4b02      	ldr	r3, [pc, #8]	@ (8001db8 <putchar+0xc>)
 8001dae:	4601      	mov	r1, r0
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	6882      	ldr	r2, [r0, #8]
 8001db4:	f000 b9b8 	b.w	8002128 <_putc_r>
 8001db8:	20000018 	.word	0x20000018

08001dbc <__sread>:
 8001dbc:	b510      	push	{r4, lr}
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dc4:	f000 f868 	bl	8001e98 <_read_r>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	bfab      	itete	ge
 8001dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001dce:	89a3      	ldrhlt	r3, [r4, #12]
 8001dd0:	181b      	addge	r3, r3, r0
 8001dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001dd6:	bfac      	ite	ge
 8001dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001dda:	81a3      	strhlt	r3, [r4, #12]
 8001ddc:	bd10      	pop	{r4, pc}

08001dde <__swrite>:
 8001dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001de2:	461f      	mov	r7, r3
 8001de4:	898b      	ldrh	r3, [r1, #12]
 8001de6:	4605      	mov	r5, r0
 8001de8:	05db      	lsls	r3, r3, #23
 8001dea:	460c      	mov	r4, r1
 8001dec:	4616      	mov	r6, r2
 8001dee:	d505      	bpl.n	8001dfc <__swrite+0x1e>
 8001df0:	2302      	movs	r3, #2
 8001df2:	2200      	movs	r2, #0
 8001df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df8:	f000 f83c 	bl	8001e74 <_lseek_r>
 8001dfc:	89a3      	ldrh	r3, [r4, #12]
 8001dfe:	4632      	mov	r2, r6
 8001e00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e04:	81a3      	strh	r3, [r4, #12]
 8001e06:	4628      	mov	r0, r5
 8001e08:	463b      	mov	r3, r7
 8001e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e12:	f000 b853 	b.w	8001ebc <_write_r>

08001e16 <__sseek>:
 8001e16:	b510      	push	{r4, lr}
 8001e18:	460c      	mov	r4, r1
 8001e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e1e:	f000 f829 	bl	8001e74 <_lseek_r>
 8001e22:	1c43      	adds	r3, r0, #1
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	bf15      	itete	ne
 8001e28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001e2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001e2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001e32:	81a3      	strheq	r3, [r4, #12]
 8001e34:	bf18      	it	ne
 8001e36:	81a3      	strhne	r3, [r4, #12]
 8001e38:	bd10      	pop	{r4, pc}

08001e3a <__sclose>:
 8001e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e3e:	f000 b809 	b.w	8001e54 <_close_r>

08001e42 <memset>:
 8001e42:	4603      	mov	r3, r0
 8001e44:	4402      	add	r2, r0
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d100      	bne.n	8001e4c <memset+0xa>
 8001e4a:	4770      	bx	lr
 8001e4c:	f803 1b01 	strb.w	r1, [r3], #1
 8001e50:	e7f9      	b.n	8001e46 <memset+0x4>
	...

08001e54 <_close_r>:
 8001e54:	b538      	push	{r3, r4, r5, lr}
 8001e56:	2300      	movs	r3, #0
 8001e58:	4d05      	ldr	r5, [pc, #20]	@ (8001e70 <_close_r+0x1c>)
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	4608      	mov	r0, r1
 8001e5e:	602b      	str	r3, [r5, #0]
 8001e60:	f7fe fb75 	bl	800054e <_close>
 8001e64:	1c43      	adds	r3, r0, #1
 8001e66:	d102      	bne.n	8001e6e <_close_r+0x1a>
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	b103      	cbz	r3, 8001e6e <_close_r+0x1a>
 8001e6c:	6023      	str	r3, [r4, #0]
 8001e6e:	bd38      	pop	{r3, r4, r5, pc}
 8001e70:	20000210 	.word	0x20000210

08001e74 <_lseek_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	4604      	mov	r4, r0
 8001e78:	4608      	mov	r0, r1
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4d05      	ldr	r5, [pc, #20]	@ (8001e94 <_lseek_r+0x20>)
 8001e80:	602a      	str	r2, [r5, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7fe fb87 	bl	8000596 <_lseek>
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	d102      	bne.n	8001e92 <_lseek_r+0x1e>
 8001e8c:	682b      	ldr	r3, [r5, #0]
 8001e8e:	b103      	cbz	r3, 8001e92 <_lseek_r+0x1e>
 8001e90:	6023      	str	r3, [r4, #0]
 8001e92:	bd38      	pop	{r3, r4, r5, pc}
 8001e94:	20000210 	.word	0x20000210

08001e98 <_read_r>:
 8001e98:	b538      	push	{r3, r4, r5, lr}
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4608      	mov	r0, r1
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4d05      	ldr	r5, [pc, #20]	@ (8001eb8 <_read_r+0x20>)
 8001ea4:	602a      	str	r2, [r5, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	f7fe fb18 	bl	80004dc <_read>
 8001eac:	1c43      	adds	r3, r0, #1
 8001eae:	d102      	bne.n	8001eb6 <_read_r+0x1e>
 8001eb0:	682b      	ldr	r3, [r5, #0]
 8001eb2:	b103      	cbz	r3, 8001eb6 <_read_r+0x1e>
 8001eb4:	6023      	str	r3, [r4, #0]
 8001eb6:	bd38      	pop	{r3, r4, r5, pc}
 8001eb8:	20000210 	.word	0x20000210

08001ebc <_write_r>:
 8001ebc:	b538      	push	{r3, r4, r5, lr}
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	4d05      	ldr	r5, [pc, #20]	@ (8001edc <_write_r+0x20>)
 8001ec8:	602a      	str	r2, [r5, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f7fe fb23 	bl	8000516 <_write>
 8001ed0:	1c43      	adds	r3, r0, #1
 8001ed2:	d102      	bne.n	8001eda <_write_r+0x1e>
 8001ed4:	682b      	ldr	r3, [r5, #0]
 8001ed6:	b103      	cbz	r3, 8001eda <_write_r+0x1e>
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	bd38      	pop	{r3, r4, r5, pc}
 8001edc:	20000210 	.word	0x20000210

08001ee0 <__errno>:
 8001ee0:	4b01      	ldr	r3, [pc, #4]	@ (8001ee8 <__errno+0x8>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000018 	.word	0x20000018

08001eec <__libc_init_array>:
 8001eec:	b570      	push	{r4, r5, r6, lr}
 8001eee:	2600      	movs	r6, #0
 8001ef0:	4d0c      	ldr	r5, [pc, #48]	@ (8001f24 <__libc_init_array+0x38>)
 8001ef2:	4c0d      	ldr	r4, [pc, #52]	@ (8001f28 <__libc_init_array+0x3c>)
 8001ef4:	1b64      	subs	r4, r4, r5
 8001ef6:	10a4      	asrs	r4, r4, #2
 8001ef8:	42a6      	cmp	r6, r4
 8001efa:	d109      	bne.n	8001f10 <__libc_init_array+0x24>
 8001efc:	f000 fa70 	bl	80023e0 <_init>
 8001f00:	2600      	movs	r6, #0
 8001f02:	4d0a      	ldr	r5, [pc, #40]	@ (8001f2c <__libc_init_array+0x40>)
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <__libc_init_array+0x44>)
 8001f06:	1b64      	subs	r4, r4, r5
 8001f08:	10a4      	asrs	r4, r4, #2
 8001f0a:	42a6      	cmp	r6, r4
 8001f0c:	d105      	bne.n	8001f1a <__libc_init_array+0x2e>
 8001f0e:	bd70      	pop	{r4, r5, r6, pc}
 8001f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f14:	4798      	blx	r3
 8001f16:	3601      	adds	r6, #1
 8001f18:	e7ee      	b.n	8001ef8 <__libc_init_array+0xc>
 8001f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f1e:	4798      	blx	r3
 8001f20:	3601      	adds	r6, #1
 8001f22:	e7f2      	b.n	8001f0a <__libc_init_array+0x1e>
 8001f24:	08002428 	.word	0x08002428
 8001f28:	08002428 	.word	0x08002428
 8001f2c:	08002428 	.word	0x08002428
 8001f30:	0800242c 	.word	0x0800242c

08001f34 <__retarget_lock_init_recursive>:
 8001f34:	4770      	bx	lr

08001f36 <__retarget_lock_acquire_recursive>:
 8001f36:	4770      	bx	lr

08001f38 <__retarget_lock_release_recursive>:
 8001f38:	4770      	bx	lr
	...

08001f3c <_free_r>:
 8001f3c:	b538      	push	{r3, r4, r5, lr}
 8001f3e:	4605      	mov	r5, r0
 8001f40:	2900      	cmp	r1, #0
 8001f42:	d040      	beq.n	8001fc6 <_free_r+0x8a>
 8001f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f48:	1f0c      	subs	r4, r1, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bfb8      	it	lt
 8001f4e:	18e4      	addlt	r4, r4, r3
 8001f50:	f000 f8de 	bl	8002110 <__malloc_lock>
 8001f54:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <_free_r+0x8c>)
 8001f56:	6813      	ldr	r3, [r2, #0]
 8001f58:	b933      	cbnz	r3, 8001f68 <_free_r+0x2c>
 8001f5a:	6063      	str	r3, [r4, #4]
 8001f5c:	6014      	str	r4, [r2, #0]
 8001f5e:	4628      	mov	r0, r5
 8001f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f64:	f000 b8da 	b.w	800211c <__malloc_unlock>
 8001f68:	42a3      	cmp	r3, r4
 8001f6a:	d908      	bls.n	8001f7e <_free_r+0x42>
 8001f6c:	6820      	ldr	r0, [r4, #0]
 8001f6e:	1821      	adds	r1, r4, r0
 8001f70:	428b      	cmp	r3, r1
 8001f72:	bf01      	itttt	eq
 8001f74:	6819      	ldreq	r1, [r3, #0]
 8001f76:	685b      	ldreq	r3, [r3, #4]
 8001f78:	1809      	addeq	r1, r1, r0
 8001f7a:	6021      	streq	r1, [r4, #0]
 8001f7c:	e7ed      	b.n	8001f5a <_free_r+0x1e>
 8001f7e:	461a      	mov	r2, r3
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	b10b      	cbz	r3, 8001f88 <_free_r+0x4c>
 8001f84:	42a3      	cmp	r3, r4
 8001f86:	d9fa      	bls.n	8001f7e <_free_r+0x42>
 8001f88:	6811      	ldr	r1, [r2, #0]
 8001f8a:	1850      	adds	r0, r2, r1
 8001f8c:	42a0      	cmp	r0, r4
 8001f8e:	d10b      	bne.n	8001fa8 <_free_r+0x6c>
 8001f90:	6820      	ldr	r0, [r4, #0]
 8001f92:	4401      	add	r1, r0
 8001f94:	1850      	adds	r0, r2, r1
 8001f96:	4283      	cmp	r3, r0
 8001f98:	6011      	str	r1, [r2, #0]
 8001f9a:	d1e0      	bne.n	8001f5e <_free_r+0x22>
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4408      	add	r0, r1
 8001fa2:	6010      	str	r0, [r2, #0]
 8001fa4:	6053      	str	r3, [r2, #4]
 8001fa6:	e7da      	b.n	8001f5e <_free_r+0x22>
 8001fa8:	d902      	bls.n	8001fb0 <_free_r+0x74>
 8001faa:	230c      	movs	r3, #12
 8001fac:	602b      	str	r3, [r5, #0]
 8001fae:	e7d6      	b.n	8001f5e <_free_r+0x22>
 8001fb0:	6820      	ldr	r0, [r4, #0]
 8001fb2:	1821      	adds	r1, r4, r0
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	bf01      	itttt	eq
 8001fb8:	6819      	ldreq	r1, [r3, #0]
 8001fba:	685b      	ldreq	r3, [r3, #4]
 8001fbc:	1809      	addeq	r1, r1, r0
 8001fbe:	6021      	streq	r1, [r4, #0]
 8001fc0:	6063      	str	r3, [r4, #4]
 8001fc2:	6054      	str	r4, [r2, #4]
 8001fc4:	e7cb      	b.n	8001f5e <_free_r+0x22>
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	2000021c 	.word	0x2000021c

08001fcc <sbrk_aligned>:
 8001fcc:	b570      	push	{r4, r5, r6, lr}
 8001fce:	4e0f      	ldr	r6, [pc, #60]	@ (800200c <sbrk_aligned+0x40>)
 8001fd0:	460c      	mov	r4, r1
 8001fd2:	6831      	ldr	r1, [r6, #0]
 8001fd4:	4605      	mov	r5, r0
 8001fd6:	b911      	cbnz	r1, 8001fde <sbrk_aligned+0x12>
 8001fd8:	f000 f96e 	bl	80022b8 <_sbrk_r>
 8001fdc:	6030      	str	r0, [r6, #0]
 8001fde:	4621      	mov	r1, r4
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	f000 f969 	bl	80022b8 <_sbrk_r>
 8001fe6:	1c43      	adds	r3, r0, #1
 8001fe8:	d103      	bne.n	8001ff2 <sbrk_aligned+0x26>
 8001fea:	f04f 34ff 	mov.w	r4, #4294967295
 8001fee:	4620      	mov	r0, r4
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
 8001ff2:	1cc4      	adds	r4, r0, #3
 8001ff4:	f024 0403 	bic.w	r4, r4, #3
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	d0f8      	beq.n	8001fee <sbrk_aligned+0x22>
 8001ffc:	1a21      	subs	r1, r4, r0
 8001ffe:	4628      	mov	r0, r5
 8002000:	f000 f95a 	bl	80022b8 <_sbrk_r>
 8002004:	3001      	adds	r0, #1
 8002006:	d1f2      	bne.n	8001fee <sbrk_aligned+0x22>
 8002008:	e7ef      	b.n	8001fea <sbrk_aligned+0x1e>
 800200a:	bf00      	nop
 800200c:	20000218 	.word	0x20000218

08002010 <_malloc_r>:
 8002010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002014:	1ccd      	adds	r5, r1, #3
 8002016:	f025 0503 	bic.w	r5, r5, #3
 800201a:	3508      	adds	r5, #8
 800201c:	2d0c      	cmp	r5, #12
 800201e:	bf38      	it	cc
 8002020:	250c      	movcc	r5, #12
 8002022:	2d00      	cmp	r5, #0
 8002024:	4606      	mov	r6, r0
 8002026:	db01      	blt.n	800202c <_malloc_r+0x1c>
 8002028:	42a9      	cmp	r1, r5
 800202a:	d904      	bls.n	8002036 <_malloc_r+0x26>
 800202c:	230c      	movs	r3, #12
 800202e:	6033      	str	r3, [r6, #0]
 8002030:	2000      	movs	r0, #0
 8002032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800210c <_malloc_r+0xfc>
 800203a:	f000 f869 	bl	8002110 <__malloc_lock>
 800203e:	f8d8 3000 	ldr.w	r3, [r8]
 8002042:	461c      	mov	r4, r3
 8002044:	bb44      	cbnz	r4, 8002098 <_malloc_r+0x88>
 8002046:	4629      	mov	r1, r5
 8002048:	4630      	mov	r0, r6
 800204a:	f7ff ffbf 	bl	8001fcc <sbrk_aligned>
 800204e:	1c43      	adds	r3, r0, #1
 8002050:	4604      	mov	r4, r0
 8002052:	d158      	bne.n	8002106 <_malloc_r+0xf6>
 8002054:	f8d8 4000 	ldr.w	r4, [r8]
 8002058:	4627      	mov	r7, r4
 800205a:	2f00      	cmp	r7, #0
 800205c:	d143      	bne.n	80020e6 <_malloc_r+0xd6>
 800205e:	2c00      	cmp	r4, #0
 8002060:	d04b      	beq.n	80020fa <_malloc_r+0xea>
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	4639      	mov	r1, r7
 8002066:	4630      	mov	r0, r6
 8002068:	eb04 0903 	add.w	r9, r4, r3
 800206c:	f000 f924 	bl	80022b8 <_sbrk_r>
 8002070:	4581      	cmp	r9, r0
 8002072:	d142      	bne.n	80020fa <_malloc_r+0xea>
 8002074:	6821      	ldr	r1, [r4, #0]
 8002076:	4630      	mov	r0, r6
 8002078:	1a6d      	subs	r5, r5, r1
 800207a:	4629      	mov	r1, r5
 800207c:	f7ff ffa6 	bl	8001fcc <sbrk_aligned>
 8002080:	3001      	adds	r0, #1
 8002082:	d03a      	beq.n	80020fa <_malloc_r+0xea>
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	442b      	add	r3, r5
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	f8d8 3000 	ldr.w	r3, [r8]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	bb62      	cbnz	r2, 80020ec <_malloc_r+0xdc>
 8002092:	f8c8 7000 	str.w	r7, [r8]
 8002096:	e00f      	b.n	80020b8 <_malloc_r+0xa8>
 8002098:	6822      	ldr	r2, [r4, #0]
 800209a:	1b52      	subs	r2, r2, r5
 800209c:	d420      	bmi.n	80020e0 <_malloc_r+0xd0>
 800209e:	2a0b      	cmp	r2, #11
 80020a0:	d917      	bls.n	80020d2 <_malloc_r+0xc2>
 80020a2:	1961      	adds	r1, r4, r5
 80020a4:	42a3      	cmp	r3, r4
 80020a6:	6025      	str	r5, [r4, #0]
 80020a8:	bf18      	it	ne
 80020aa:	6059      	strne	r1, [r3, #4]
 80020ac:	6863      	ldr	r3, [r4, #4]
 80020ae:	bf08      	it	eq
 80020b0:	f8c8 1000 	streq.w	r1, [r8]
 80020b4:	5162      	str	r2, [r4, r5]
 80020b6:	604b      	str	r3, [r1, #4]
 80020b8:	4630      	mov	r0, r6
 80020ba:	f000 f82f 	bl	800211c <__malloc_unlock>
 80020be:	f104 000b 	add.w	r0, r4, #11
 80020c2:	1d23      	adds	r3, r4, #4
 80020c4:	f020 0007 	bic.w	r0, r0, #7
 80020c8:	1ac2      	subs	r2, r0, r3
 80020ca:	bf1c      	itt	ne
 80020cc:	1a1b      	subne	r3, r3, r0
 80020ce:	50a3      	strne	r3, [r4, r2]
 80020d0:	e7af      	b.n	8002032 <_malloc_r+0x22>
 80020d2:	6862      	ldr	r2, [r4, #4]
 80020d4:	42a3      	cmp	r3, r4
 80020d6:	bf0c      	ite	eq
 80020d8:	f8c8 2000 	streq.w	r2, [r8]
 80020dc:	605a      	strne	r2, [r3, #4]
 80020de:	e7eb      	b.n	80020b8 <_malloc_r+0xa8>
 80020e0:	4623      	mov	r3, r4
 80020e2:	6864      	ldr	r4, [r4, #4]
 80020e4:	e7ae      	b.n	8002044 <_malloc_r+0x34>
 80020e6:	463c      	mov	r4, r7
 80020e8:	687f      	ldr	r7, [r7, #4]
 80020ea:	e7b6      	b.n	800205a <_malloc_r+0x4a>
 80020ec:	461a      	mov	r2, r3
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	42a3      	cmp	r3, r4
 80020f2:	d1fb      	bne.n	80020ec <_malloc_r+0xdc>
 80020f4:	2300      	movs	r3, #0
 80020f6:	6053      	str	r3, [r2, #4]
 80020f8:	e7de      	b.n	80020b8 <_malloc_r+0xa8>
 80020fa:	230c      	movs	r3, #12
 80020fc:	4630      	mov	r0, r6
 80020fe:	6033      	str	r3, [r6, #0]
 8002100:	f000 f80c 	bl	800211c <__malloc_unlock>
 8002104:	e794      	b.n	8002030 <_malloc_r+0x20>
 8002106:	6005      	str	r5, [r0, #0]
 8002108:	e7d6      	b.n	80020b8 <_malloc_r+0xa8>
 800210a:	bf00      	nop
 800210c:	2000021c 	.word	0x2000021c

08002110 <__malloc_lock>:
 8002110:	4801      	ldr	r0, [pc, #4]	@ (8002118 <__malloc_lock+0x8>)
 8002112:	f7ff bf10 	b.w	8001f36 <__retarget_lock_acquire_recursive>
 8002116:	bf00      	nop
 8002118:	20000214 	.word	0x20000214

0800211c <__malloc_unlock>:
 800211c:	4801      	ldr	r0, [pc, #4]	@ (8002124 <__malloc_unlock+0x8>)
 800211e:	f7ff bf0b 	b.w	8001f38 <__retarget_lock_release_recursive>
 8002122:	bf00      	nop
 8002124:	20000214 	.word	0x20000214

08002128 <_putc_r>:
 8002128:	b570      	push	{r4, r5, r6, lr}
 800212a:	460d      	mov	r5, r1
 800212c:	4614      	mov	r4, r2
 800212e:	4606      	mov	r6, r0
 8002130:	b118      	cbz	r0, 800213a <_putc_r+0x12>
 8002132:	6a03      	ldr	r3, [r0, #32]
 8002134:	b90b      	cbnz	r3, 800213a <_putc_r+0x12>
 8002136:	f7ff fe03 	bl	8001d40 <__sinit>
 800213a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800213c:	07d8      	lsls	r0, r3, #31
 800213e:	d405      	bmi.n	800214c <_putc_r+0x24>
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	0599      	lsls	r1, r3, #22
 8002144:	d402      	bmi.n	800214c <_putc_r+0x24>
 8002146:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002148:	f7ff fef5 	bl	8001f36 <__retarget_lock_acquire_recursive>
 800214c:	68a3      	ldr	r3, [r4, #8]
 800214e:	3b01      	subs	r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	60a3      	str	r3, [r4, #8]
 8002154:	da05      	bge.n	8002162 <_putc_r+0x3a>
 8002156:	69a2      	ldr	r2, [r4, #24]
 8002158:	4293      	cmp	r3, r2
 800215a:	db12      	blt.n	8002182 <_putc_r+0x5a>
 800215c:	b2eb      	uxtb	r3, r5
 800215e:	2b0a      	cmp	r3, #10
 8002160:	d00f      	beq.n	8002182 <_putc_r+0x5a>
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	6022      	str	r2, [r4, #0]
 8002168:	701d      	strb	r5, [r3, #0]
 800216a:	b2ed      	uxtb	r5, r5
 800216c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800216e:	07da      	lsls	r2, r3, #31
 8002170:	d405      	bmi.n	800217e <_putc_r+0x56>
 8002172:	89a3      	ldrh	r3, [r4, #12]
 8002174:	059b      	lsls	r3, r3, #22
 8002176:	d402      	bmi.n	800217e <_putc_r+0x56>
 8002178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800217a:	f7ff fedd 	bl	8001f38 <__retarget_lock_release_recursive>
 800217e:	4628      	mov	r0, r5
 8002180:	bd70      	pop	{r4, r5, r6, pc}
 8002182:	4629      	mov	r1, r5
 8002184:	4622      	mov	r2, r4
 8002186:	4630      	mov	r0, r6
 8002188:	f000 f802 	bl	8002190 <__swbuf_r>
 800218c:	4605      	mov	r5, r0
 800218e:	e7ed      	b.n	800216c <_putc_r+0x44>

08002190 <__swbuf_r>:
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	460e      	mov	r6, r1
 8002194:	4614      	mov	r4, r2
 8002196:	4605      	mov	r5, r0
 8002198:	b118      	cbz	r0, 80021a2 <__swbuf_r+0x12>
 800219a:	6a03      	ldr	r3, [r0, #32]
 800219c:	b90b      	cbnz	r3, 80021a2 <__swbuf_r+0x12>
 800219e:	f7ff fdcf 	bl	8001d40 <__sinit>
 80021a2:	69a3      	ldr	r3, [r4, #24]
 80021a4:	60a3      	str	r3, [r4, #8]
 80021a6:	89a3      	ldrh	r3, [r4, #12]
 80021a8:	071a      	lsls	r2, r3, #28
 80021aa:	d501      	bpl.n	80021b0 <__swbuf_r+0x20>
 80021ac:	6923      	ldr	r3, [r4, #16]
 80021ae:	b943      	cbnz	r3, 80021c2 <__swbuf_r+0x32>
 80021b0:	4621      	mov	r1, r4
 80021b2:	4628      	mov	r0, r5
 80021b4:	f000 f82a 	bl	800220c <__swsetup_r>
 80021b8:	b118      	cbz	r0, 80021c2 <__swbuf_r+0x32>
 80021ba:	f04f 37ff 	mov.w	r7, #4294967295
 80021be:	4638      	mov	r0, r7
 80021c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	6922      	ldr	r2, [r4, #16]
 80021c6:	b2f6      	uxtb	r6, r6
 80021c8:	1a98      	subs	r0, r3, r2
 80021ca:	6963      	ldr	r3, [r4, #20]
 80021cc:	4637      	mov	r7, r6
 80021ce:	4283      	cmp	r3, r0
 80021d0:	dc05      	bgt.n	80021de <__swbuf_r+0x4e>
 80021d2:	4621      	mov	r1, r4
 80021d4:	4628      	mov	r0, r5
 80021d6:	f7ff fceb 	bl	8001bb0 <_fflush_r>
 80021da:	2800      	cmp	r0, #0
 80021dc:	d1ed      	bne.n	80021ba <__swbuf_r+0x2a>
 80021de:	68a3      	ldr	r3, [r4, #8]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60a3      	str	r3, [r4, #8]
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	6022      	str	r2, [r4, #0]
 80021ea:	701e      	strb	r6, [r3, #0]
 80021ec:	6962      	ldr	r2, [r4, #20]
 80021ee:	1c43      	adds	r3, r0, #1
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d004      	beq.n	80021fe <__swbuf_r+0x6e>
 80021f4:	89a3      	ldrh	r3, [r4, #12]
 80021f6:	07db      	lsls	r3, r3, #31
 80021f8:	d5e1      	bpl.n	80021be <__swbuf_r+0x2e>
 80021fa:	2e0a      	cmp	r6, #10
 80021fc:	d1df      	bne.n	80021be <__swbuf_r+0x2e>
 80021fe:	4621      	mov	r1, r4
 8002200:	4628      	mov	r0, r5
 8002202:	f7ff fcd5 	bl	8001bb0 <_fflush_r>
 8002206:	2800      	cmp	r0, #0
 8002208:	d0d9      	beq.n	80021be <__swbuf_r+0x2e>
 800220a:	e7d6      	b.n	80021ba <__swbuf_r+0x2a>

0800220c <__swsetup_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4b29      	ldr	r3, [pc, #164]	@ (80022b4 <__swsetup_r+0xa8>)
 8002210:	4605      	mov	r5, r0
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	460c      	mov	r4, r1
 8002216:	b118      	cbz	r0, 8002220 <__swsetup_r+0x14>
 8002218:	6a03      	ldr	r3, [r0, #32]
 800221a:	b90b      	cbnz	r3, 8002220 <__swsetup_r+0x14>
 800221c:	f7ff fd90 	bl	8001d40 <__sinit>
 8002220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002224:	0719      	lsls	r1, r3, #28
 8002226:	d422      	bmi.n	800226e <__swsetup_r+0x62>
 8002228:	06da      	lsls	r2, r3, #27
 800222a:	d407      	bmi.n	800223c <__swsetup_r+0x30>
 800222c:	2209      	movs	r2, #9
 800222e:	602a      	str	r2, [r5, #0]
 8002230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	81a3      	strh	r3, [r4, #12]
 800223a:	e033      	b.n	80022a4 <__swsetup_r+0x98>
 800223c:	0758      	lsls	r0, r3, #29
 800223e:	d512      	bpl.n	8002266 <__swsetup_r+0x5a>
 8002240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002242:	b141      	cbz	r1, 8002256 <__swsetup_r+0x4a>
 8002244:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002248:	4299      	cmp	r1, r3
 800224a:	d002      	beq.n	8002252 <__swsetup_r+0x46>
 800224c:	4628      	mov	r0, r5
 800224e:	f7ff fe75 	bl	8001f3c <_free_r>
 8002252:	2300      	movs	r3, #0
 8002254:	6363      	str	r3, [r4, #52]	@ 0x34
 8002256:	89a3      	ldrh	r3, [r4, #12]
 8002258:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800225c:	81a3      	strh	r3, [r4, #12]
 800225e:	2300      	movs	r3, #0
 8002260:	6063      	str	r3, [r4, #4]
 8002262:	6923      	ldr	r3, [r4, #16]
 8002264:	6023      	str	r3, [r4, #0]
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	6923      	ldr	r3, [r4, #16]
 8002270:	b94b      	cbnz	r3, 8002286 <__swsetup_r+0x7a>
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800227c:	d003      	beq.n	8002286 <__swsetup_r+0x7a>
 800227e:	4621      	mov	r1, r4
 8002280:	4628      	mov	r0, r5
 8002282:	f000 f84e 	bl	8002322 <__smakebuf_r>
 8002286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800228a:	f013 0201 	ands.w	r2, r3, #1
 800228e:	d00a      	beq.n	80022a6 <__swsetup_r+0x9a>
 8002290:	2200      	movs	r2, #0
 8002292:	60a2      	str	r2, [r4, #8]
 8002294:	6962      	ldr	r2, [r4, #20]
 8002296:	4252      	negs	r2, r2
 8002298:	61a2      	str	r2, [r4, #24]
 800229a:	6922      	ldr	r2, [r4, #16]
 800229c:	b942      	cbnz	r2, 80022b0 <__swsetup_r+0xa4>
 800229e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80022a2:	d1c5      	bne.n	8002230 <__swsetup_r+0x24>
 80022a4:	bd38      	pop	{r3, r4, r5, pc}
 80022a6:	0799      	lsls	r1, r3, #30
 80022a8:	bf58      	it	pl
 80022aa:	6962      	ldrpl	r2, [r4, #20]
 80022ac:	60a2      	str	r2, [r4, #8]
 80022ae:	e7f4      	b.n	800229a <__swsetup_r+0x8e>
 80022b0:	2000      	movs	r0, #0
 80022b2:	e7f7      	b.n	80022a4 <__swsetup_r+0x98>
 80022b4:	20000018 	.word	0x20000018

080022b8 <_sbrk_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	2300      	movs	r3, #0
 80022bc:	4d05      	ldr	r5, [pc, #20]	@ (80022d4 <_sbrk_r+0x1c>)
 80022be:	4604      	mov	r4, r0
 80022c0:	4608      	mov	r0, r1
 80022c2:	602b      	str	r3, [r5, #0]
 80022c4:	f7fe f974 	bl	80005b0 <_sbrk>
 80022c8:	1c43      	adds	r3, r0, #1
 80022ca:	d102      	bne.n	80022d2 <_sbrk_r+0x1a>
 80022cc:	682b      	ldr	r3, [r5, #0]
 80022ce:	b103      	cbz	r3, 80022d2 <_sbrk_r+0x1a>
 80022d0:	6023      	str	r3, [r4, #0]
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	20000210 	.word	0x20000210

080022d8 <__swhatbuf_r>:
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	460c      	mov	r4, r1
 80022dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e0:	4615      	mov	r5, r2
 80022e2:	2900      	cmp	r1, #0
 80022e4:	461e      	mov	r6, r3
 80022e6:	b096      	sub	sp, #88	@ 0x58
 80022e8:	da0c      	bge.n	8002304 <__swhatbuf_r+0x2c>
 80022ea:	89a3      	ldrh	r3, [r4, #12]
 80022ec:	2100      	movs	r1, #0
 80022ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80022f2:	bf14      	ite	ne
 80022f4:	2340      	movne	r3, #64	@ 0x40
 80022f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80022fa:	2000      	movs	r0, #0
 80022fc:	6031      	str	r1, [r6, #0]
 80022fe:	602b      	str	r3, [r5, #0]
 8002300:	b016      	add	sp, #88	@ 0x58
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	466a      	mov	r2, sp
 8002306:	f000 f849 	bl	800239c <_fstat_r>
 800230a:	2800      	cmp	r0, #0
 800230c:	dbed      	blt.n	80022ea <__swhatbuf_r+0x12>
 800230e:	9901      	ldr	r1, [sp, #4]
 8002310:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002314:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002318:	4259      	negs	r1, r3
 800231a:	4159      	adcs	r1, r3
 800231c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002320:	e7eb      	b.n	80022fa <__swhatbuf_r+0x22>

08002322 <__smakebuf_r>:
 8002322:	898b      	ldrh	r3, [r1, #12]
 8002324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002326:	079d      	lsls	r5, r3, #30
 8002328:	4606      	mov	r6, r0
 800232a:	460c      	mov	r4, r1
 800232c:	d507      	bpl.n	800233e <__smakebuf_r+0x1c>
 800232e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002332:	6023      	str	r3, [r4, #0]
 8002334:	6123      	str	r3, [r4, #16]
 8002336:	2301      	movs	r3, #1
 8002338:	6163      	str	r3, [r4, #20]
 800233a:	b003      	add	sp, #12
 800233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233e:	466a      	mov	r2, sp
 8002340:	ab01      	add	r3, sp, #4
 8002342:	f7ff ffc9 	bl	80022d8 <__swhatbuf_r>
 8002346:	9f00      	ldr	r7, [sp, #0]
 8002348:	4605      	mov	r5, r0
 800234a:	4639      	mov	r1, r7
 800234c:	4630      	mov	r0, r6
 800234e:	f7ff fe5f 	bl	8002010 <_malloc_r>
 8002352:	b948      	cbnz	r0, 8002368 <__smakebuf_r+0x46>
 8002354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002358:	059a      	lsls	r2, r3, #22
 800235a:	d4ee      	bmi.n	800233a <__smakebuf_r+0x18>
 800235c:	f023 0303 	bic.w	r3, r3, #3
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	81a3      	strh	r3, [r4, #12]
 8002366:	e7e2      	b.n	800232e <__smakebuf_r+0xc>
 8002368:	89a3      	ldrh	r3, [r4, #12]
 800236a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800236e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002372:	81a3      	strh	r3, [r4, #12]
 8002374:	9b01      	ldr	r3, [sp, #4]
 8002376:	6020      	str	r0, [r4, #0]
 8002378:	b15b      	cbz	r3, 8002392 <__smakebuf_r+0x70>
 800237a:	4630      	mov	r0, r6
 800237c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002380:	f000 f81e 	bl	80023c0 <_isatty_r>
 8002384:	b128      	cbz	r0, 8002392 <__smakebuf_r+0x70>
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	f023 0303 	bic.w	r3, r3, #3
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	81a3      	strh	r3, [r4, #12]
 8002392:	89a3      	ldrh	r3, [r4, #12]
 8002394:	431d      	orrs	r5, r3
 8002396:	81a5      	strh	r5, [r4, #12]
 8002398:	e7cf      	b.n	800233a <__smakebuf_r+0x18>
	...

0800239c <_fstat_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	2300      	movs	r3, #0
 80023a0:	4d06      	ldr	r5, [pc, #24]	@ (80023bc <_fstat_r+0x20>)
 80023a2:	4604      	mov	r4, r0
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	602b      	str	r3, [r5, #0]
 80023aa:	f7fe f8db 	bl	8000564 <_fstat>
 80023ae:	1c43      	adds	r3, r0, #1
 80023b0:	d102      	bne.n	80023b8 <_fstat_r+0x1c>
 80023b2:	682b      	ldr	r3, [r5, #0]
 80023b4:	b103      	cbz	r3, 80023b8 <_fstat_r+0x1c>
 80023b6:	6023      	str	r3, [r4, #0]
 80023b8:	bd38      	pop	{r3, r4, r5, pc}
 80023ba:	bf00      	nop
 80023bc:	20000210 	.word	0x20000210

080023c0 <_isatty_r>:
 80023c0:	b538      	push	{r3, r4, r5, lr}
 80023c2:	2300      	movs	r3, #0
 80023c4:	4d05      	ldr	r5, [pc, #20]	@ (80023dc <_isatty_r+0x1c>)
 80023c6:	4604      	mov	r4, r0
 80023c8:	4608      	mov	r0, r1
 80023ca:	602b      	str	r3, [r5, #0]
 80023cc:	f7fe f8d9 	bl	8000582 <_isatty>
 80023d0:	1c43      	adds	r3, r0, #1
 80023d2:	d102      	bne.n	80023da <_isatty_r+0x1a>
 80023d4:	682b      	ldr	r3, [r5, #0]
 80023d6:	b103      	cbz	r3, 80023da <_isatty_r+0x1a>
 80023d8:	6023      	str	r3, [r4, #0]
 80023da:	bd38      	pop	{r3, r4, r5, pc}
 80023dc:	20000210 	.word	0x20000210

080023e0 <_init>:
 80023e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e2:	bf00      	nop
 80023e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e6:	bc08      	pop	{r3}
 80023e8:	469e      	mov	lr, r3
 80023ea:	4770      	bx	lr

080023ec <_fini>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	bf00      	nop
 80023f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f2:	bc08      	pop	{r3}
 80023f4:	469e      	mov	lr, r3
 80023f6:	4770      	bx	lr
