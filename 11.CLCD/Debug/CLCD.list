
CLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003928  08003928  00004928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a08  08003a08  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a08  08003a08  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a08  08003a08  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a08  08003a08  00004a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a0c  08003a0c  00004a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003a10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08003a78  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003a78  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a3e  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001858  00000000  00000000  0000eacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00010328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a6  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d7c  00000000  00000000  0001149e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bea6  00000000  00000000  0002921a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864b4  00000000  00000000  000350c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003008  00000000  00000000  000bb5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000be5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003910 	.word	0x08003910

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003910 	.word	0x08003910

0800014c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f002 fa6a 	bl	800263c <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f002 fa63 	bl	800263c <HAL_UART_Transmit>

  return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08003928 	.word	0x08003928
 8000184:	200000d8 	.word	0x200000d8

08000188 <I2C_ScanAddresses>:

void I2C_ScanAddresses(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef result;
    uint8_t i;


    printf("Scanning I2C addresses...\r\n");
 800018e:	4813      	ldr	r0, [pc, #76]	@ (80001dc <I2C_ScanAddresses+0x54>)
 8000190:	f002 fd52 	bl	8002c38 <puts>


    for (i = 1; i < 128; i++) {
 8000194:	2301      	movs	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
 8000198:	e015      	b.n	80001c6 <I2C_ScanAddresses+0x3e>
        /*
         * HAL_I2C_IsDeviceReady: If a device at the specified address exists return HAL_OK.
         * Since I2C devices must have an 8-bit address, the 7-bit address is shifted left by 1 bit.
         */
        result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i << 1), 1, 10);
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	b29b      	uxth	r3, r3
 800019e:	005b      	lsls	r3, r3, #1
 80001a0:	b299      	uxth	r1, r3
 80001a2:	230a      	movs	r3, #10
 80001a4:	2201      	movs	r2, #1
 80001a6:	480e      	ldr	r0, [pc, #56]	@ (80001e0 <I2C_ScanAddresses+0x58>)
 80001a8:	f001 fa60 	bl	800166c <HAL_I2C_IsDeviceReady>
 80001ac:	4603      	mov	r3, r0
 80001ae:	71bb      	strb	r3, [r7, #6]
        if (result == HAL_OK) {
 80001b0:	79bb      	ldrb	r3, [r7, #6]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d104      	bne.n	80001c0 <I2C_ScanAddresses+0x38>
            printf("I2C device found at address 0x%02X\r\n", i);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	4619      	mov	r1, r3
 80001ba:	480a      	ldr	r0, [pc, #40]	@ (80001e4 <I2C_ScanAddresses+0x5c>)
 80001bc:	f002 fcd4 	bl	8002b68 <iprintf>
    for (i = 1; i < 128; i++) {
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	3301      	adds	r3, #1
 80001c4:	71fb      	strb	r3, [r7, #7]
 80001c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	dae5      	bge.n	800019a <I2C_ScanAddresses+0x12>
        }
    }


    printf("Scan complete.\r\n");
 80001ce:	4806      	ldr	r0, [pc, #24]	@ (80001e8 <I2C_ScanAddresses+0x60>)
 80001d0:	f002 fd32 	bl	8002c38 <puts>
}
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	0800392c 	.word	0x0800392c
 80001e0:	20000084 	.word	0x20000084
 80001e4:	08003948 	.word	0x08003948
 80001e8:	08003970 	.word	0x08003970

080001ec <delay_us>:

void delay_us(int us){
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	value = 3;
 80001f4:	4b0d      	ldr	r3, [pc, #52]	@ (800022c <delay_us+0x40>)
 80001f6:	2203      	movs	r2, #3
 80001f8:	601a      	str	r2, [r3, #0]
	delay = us * value;
 80001fa:	4b0c      	ldr	r3, [pc, #48]	@ (800022c <delay_us+0x40>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	fb02 f303 	mul.w	r3, r2, r3
 8000204:	4a0a      	ldr	r2, [pc, #40]	@ (8000230 <delay_us+0x44>)
 8000206:	6013      	str	r3, [r2, #0]
	for(int i=0;i < delay;i++);
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	e002      	b.n	8000214 <delay_us+0x28>
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	3301      	adds	r3, #1
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	4b06      	ldr	r3, [pc, #24]	@ (8000230 <delay_us+0x44>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	429a      	cmp	r2, r3
 800021c:	dbf7      	blt.n	800020e <delay_us+0x22>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000124 	.word	0x20000124
 8000230:	20000120 	.word	0x20000120

08000234 <LCD_DATA>:

void LCD_DATA(uint8_t data) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=(data & 0xF0)|RS1_EN1|BackLight;
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	f023 030f 	bic.w	r3, r3, #15
 8000246:	b25b      	sxtb	r3, r3
 8000248:	f043 030d 	orr.w	r3, r3, #13
 800024c:	b25b      	sxtb	r3, r3
 800024e:	b2db      	uxtb	r3, r3
 8000250:	73fb      	strb	r3, [r7, #15]

	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000252:	bf00      	nop
 8000254:	f107 020f 	add.w	r2, r7, #15
 8000258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2301      	movs	r3, #1
 8000260:	214e      	movs	r1, #78	@ 0x4e
 8000262:	482b      	ldr	r0, [pc, #172]	@ (8000310 <LCD_DATA+0xdc>)
 8000264:	f001 f904 	bl	8001470 <HAL_I2C_Master_Transmit>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d1f2      	bne.n	8000254 <LCD_DATA+0x20>
	temp=(data & 0xF0)|RS1_EN0|BackLight;
 800026e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000272:	f023 030f 	bic.w	r3, r3, #15
 8000276:	b25b      	sxtb	r3, r3
 8000278:	f043 0309 	orr.w	r3, r3, #9
 800027c:	b25b      	sxtb	r3, r3
 800027e:	b2db      	uxtb	r3, r3
 8000280:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000282:	bf00      	nop
 8000284:	f107 020f 	add.w	r2, r7, #15
 8000288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2301      	movs	r3, #1
 8000290:	214e      	movs	r1, #78	@ 0x4e
 8000292:	481f      	ldr	r0, [pc, #124]	@ (8000310 <LCD_DATA+0xdc>)
 8000294:	f001 f8ec 	bl	8001470 <HAL_I2C_Master_Transmit>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1f2      	bne.n	8000284 <LCD_DATA+0x50>
	delay_us(4);
 800029e:	2004      	movs	r0, #4
 80002a0:	f7ff ffa4 	bl	80001ec <delay_us>

	temp=((data << 4) & 0xF0)|RS1_EN1|BackLight;
 80002a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a8:	011b      	lsls	r3, r3, #4
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	f043 030d 	orr.w	r3, r3, #13
 80002b0:	b25b      	sxtb	r3, r3
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80002b6:	bf00      	nop
 80002b8:	f107 020f 	add.w	r2, r7, #15
 80002bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2301      	movs	r3, #1
 80002c4:	214e      	movs	r1, #78	@ 0x4e
 80002c6:	4812      	ldr	r0, [pc, #72]	@ (8000310 <LCD_DATA+0xdc>)
 80002c8:	f001 f8d2 	bl	8001470 <HAL_I2C_Master_Transmit>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1f2      	bne.n	80002b8 <LCD_DATA+0x84>
	temp = ((data << 4) & 0xF0)|RS1_EN0|BackLight;
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	011b      	lsls	r3, r3, #4
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	f043 0309 	orr.w	r3, r3, #9
 80002de:	b25b      	sxtb	r3, r3
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80002e4:	bf00      	nop
 80002e6:	f107 020f 	add.w	r2, r7, #15
 80002ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002ee:	9300      	str	r3, [sp, #0]
 80002f0:	2301      	movs	r3, #1
 80002f2:	214e      	movs	r1, #78	@ 0x4e
 80002f4:	4806      	ldr	r0, [pc, #24]	@ (8000310 <LCD_DATA+0xdc>)
 80002f6:	f001 f8bb 	bl	8001470 <HAL_I2C_Master_Transmit>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1f2      	bne.n	80002e6 <LCD_DATA+0xb2>
	delay_us(50);
 8000300:	2032      	movs	r0, #50	@ 0x32
 8000302:	f7ff ff73 	bl	80001ec <delay_us>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000084 	.word	0x20000084

08000314 <LCD_CMD>:

void LCD_CMD(uint8_t cmd) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af02      	add	r7, sp, #8
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=(cmd & 0xF0)|RS0_EN1|BackLight;
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	f023 030f 	bic.w	r3, r3, #15
 8000326:	b25b      	sxtb	r3, r3
 8000328:	f043 030c 	orr.w	r3, r3, #12
 800032c:	b25b      	sxtb	r3, r3
 800032e:	b2db      	uxtb	r3, r3
 8000330:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000332:	bf00      	nop
 8000334:	f107 020f 	add.w	r2, r7, #15
 8000338:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2301      	movs	r3, #1
 8000340:	214e      	movs	r1, #78	@ 0x4e
 8000342:	482b      	ldr	r0, [pc, #172]	@ (80003f0 <LCD_CMD+0xdc>)
 8000344:	f001 f894 	bl	8001470 <HAL_I2C_Master_Transmit>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1f2      	bne.n	8000334 <LCD_CMD+0x20>
	temp=(cmd & 0xF0)|RS0_EN0|BackLight;
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	f023 030f 	bic.w	r3, r3, #15
 8000356:	b25b      	sxtb	r3, r3
 8000358:	f043 0308 	orr.w	r3, r3, #8
 800035c:	b25b      	sxtb	r3, r3
 800035e:	b2db      	uxtb	r3, r3
 8000360:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000362:	bf00      	nop
 8000364:	f107 020f 	add.w	r2, r7, #15
 8000368:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	214e      	movs	r1, #78	@ 0x4e
 8000372:	481f      	ldr	r0, [pc, #124]	@ (80003f0 <LCD_CMD+0xdc>)
 8000374:	f001 f87c 	bl	8001470 <HAL_I2C_Master_Transmit>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f2      	bne.n	8000364 <LCD_CMD+0x50>
	delay_us(4);
 800037e:	2004      	movs	r0, #4
 8000380:	f7ff ff34 	bl	80001ec <delay_us>

	temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 8000384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000388:	011b      	lsls	r3, r3, #4
 800038a:	b25b      	sxtb	r3, r3
 800038c:	f043 030c 	orr.w	r3, r3, #12
 8000390:	b25b      	sxtb	r3, r3
 8000392:	b2db      	uxtb	r3, r3
 8000394:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000396:	bf00      	nop
 8000398:	f107 020f 	add.w	r2, r7, #15
 800039c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	2301      	movs	r3, #1
 80003a4:	214e      	movs	r1, #78	@ 0x4e
 80003a6:	4812      	ldr	r0, [pc, #72]	@ (80003f0 <LCD_CMD+0xdc>)
 80003a8:	f001 f862 	bl	8001470 <HAL_I2C_Master_Transmit>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d1f2      	bne.n	8000398 <LCD_CMD+0x84>
	temp=((cmd << 4) & 0xF0)|RS0_EN0|BackLight;
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	011b      	lsls	r3, r3, #4
 80003b8:	b25b      	sxtb	r3, r3
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 80003c4:	bf00      	nop
 80003c6:	f107 020f 	add.w	r2, r7, #15
 80003ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2301      	movs	r3, #1
 80003d2:	214e      	movs	r1, #78	@ 0x4e
 80003d4:	4806      	ldr	r0, [pc, #24]	@ (80003f0 <LCD_CMD+0xdc>)
 80003d6:	f001 f84b 	bl	8001470 <HAL_I2C_Master_Transmit>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d1f2      	bne.n	80003c6 <LCD_CMD+0xb2>
	delay_us(50);
 80003e0:	2032      	movs	r0, #50	@ 0x32
 80003e2:	f7ff ff03 	bl	80001ec <delay_us>
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000084 	.word	0x20000084

080003f4 <LCD_CMD_4bit>:

void LCD_CMD_4bit(uint8_t cmd) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af02      	add	r7, sp, #8
 80003fa:	4603      	mov	r3, r0
 80003fc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=((cmd << 4) & 0xF0)|RS0_EN1|BackLight;
 80003fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000402:	011b      	lsls	r3, r3, #4
 8000404:	b25b      	sxtb	r3, r3
 8000406:	f043 030c 	orr.w	r3, r3, #12
 800040a:	b25b      	sxtb	r3, r3
 800040c:	b2db      	uxtb	r3, r3
 800040e:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 8000410:	bf00      	nop
 8000412:	f107 020f 	add.w	r2, r7, #15
 8000416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	2301      	movs	r3, #1
 800041e:	214e      	movs	r1, #78	@ 0x4e
 8000420:	4811      	ldr	r0, [pc, #68]	@ (8000468 <LCD_CMD_4bit+0x74>)
 8000422:	f001 f825 	bl	8001470 <HAL_I2C_Master_Transmit>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1f2      	bne.n	8000412 <LCD_CMD_4bit+0x1e>
	temp=((cmd << 4) & 0xF0)|RS0_EN0|BackLight;
 800042c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000430:	011b      	lsls	r3, r3, #4
 8000432:	b25b      	sxtb	r3, r3
 8000434:	f043 0308 	orr.w	r3, r3, #8
 8000438:	b25b      	sxtb	r3, r3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	73fb      	strb	r3, [r7, #15]
	while(HAL_I2C_Master_Transmit(&hi2c1, ADDRESS, &temp, 1, 1000)!=HAL_OK);
 800043e:	bf00      	nop
 8000440:	f107 020f 	add.w	r2, r7, #15
 8000444:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	2301      	movs	r3, #1
 800044c:	214e      	movs	r1, #78	@ 0x4e
 800044e:	4806      	ldr	r0, [pc, #24]	@ (8000468 <LCD_CMD_4bit+0x74>)
 8000450:	f001 f80e 	bl	8001470 <HAL_I2C_Master_Transmit>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d1f2      	bne.n	8000440 <LCD_CMD_4bit+0x4c>
	delay_us(50);
 800045a:	2032      	movs	r0, #50	@ 0x32
 800045c:	f7ff fec6 	bl	80001ec <delay_us>
}
 8000460:	bf00      	nop
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000084 	.word	0x20000084

0800046c <LCD_INIT>:


void LCD_INIT(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

	delay_ms(100);
 8000470:	2064      	movs	r0, #100	@ 0x64
 8000472:	f000 fbc9 	bl	8000c08 <HAL_Delay>

	LCD_CMD_4bit(0x03); delay_ms(5);
 8000476:	2003      	movs	r0, #3
 8000478:	f7ff ffbc 	bl	80003f4 <LCD_CMD_4bit>
 800047c:	2005      	movs	r0, #5
 800047e:	f000 fbc3 	bl	8000c08 <HAL_Delay>
	LCD_CMD_4bit(0x03); delay_us(100);
 8000482:	2003      	movs	r0, #3
 8000484:	f7ff ffb6 	bl	80003f4 <LCD_CMD_4bit>
 8000488:	2064      	movs	r0, #100	@ 0x64
 800048a:	f7ff feaf 	bl	80001ec <delay_us>
	LCD_CMD_4bit(0x03); delay_us(100);
 800048e:	2003      	movs	r0, #3
 8000490:	f7ff ffb0 	bl	80003f4 <LCD_CMD_4bit>
 8000494:	2064      	movs	r0, #100	@ 0x64
 8000496:	f7ff fea9 	bl	80001ec <delay_us>
	LCD_CMD_4bit(0x02); delay_us(100);
 800049a:	2002      	movs	r0, #2
 800049c:	f7ff ffaa 	bl	80003f4 <LCD_CMD_4bit>
 80004a0:	2064      	movs	r0, #100	@ 0x64
 80004a2:	f7ff fea3 	bl	80001ec <delay_us>
	LCD_CMD(0x28);  // 4 bits, 2 line, 5x8 font
 80004a6:	2028      	movs	r0, #40	@ 0x28
 80004a8:	f7ff ff34 	bl	8000314 <LCD_CMD>
	LCD_CMD(0x08);  // display off, cursor off, blink off
 80004ac:	2008      	movs	r0, #8
 80004ae:	f7ff ff31 	bl	8000314 <LCD_CMD>
	LCD_CMD(0x01);  // clear display
 80004b2:	2001      	movs	r0, #1
 80004b4:	f7ff ff2e 	bl	8000314 <LCD_CMD>
	delay_ms(3);
 80004b8:	2003      	movs	r0, #3
 80004ba:	f000 fba5 	bl	8000c08 <HAL_Delay>
	LCD_CMD(0x06);  // cursor movint direction
 80004be:	2006      	movs	r0, #6
 80004c0:	f7ff ff28 	bl	8000314 <LCD_CMD>
	LCD_CMD(0x0C);  // display on, cursor off, blink off
 80004c4:	200c      	movs	r0, #12
 80004c6:	f7ff ff25 	bl	8000314 <LCD_CMD>
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}

080004ce <LCD_XY>:

void LCD_XY(char x, char y) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b082      	sub	sp, #8
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	4603      	mov	r3, r0
 80004d6:	460a      	mov	r2, r1
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	4613      	mov	r3, r2
 80004dc:	71bb      	strb	r3, [r7, #6]
	if      (y == 0) LCD_CMD(0x80 + x);
 80004de:	79bb      	ldrb	r3, [r7, #6]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <LCD_XY+0x24>
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	3b80      	subs	r3, #128	@ 0x80
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff12 	bl	8000314 <LCD_CMD>
	else if (y == 1) LCD_CMD(0xC0 + x);
	else if (y == 2) LCD_CMD(0x94 + x);
	else if (y == 3) LCD_CMD(0xD4 + x);
}
 80004f0:	e01c      	b.n	800052c <LCD_XY+0x5e>
	else if (y == 1) LCD_CMD(0xC0 + x);
 80004f2:	79bb      	ldrb	r3, [r7, #6]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d106      	bne.n	8000506 <LCD_XY+0x38>
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	3b40      	subs	r3, #64	@ 0x40
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff08 	bl	8000314 <LCD_CMD>
}
 8000504:	e012      	b.n	800052c <LCD_XY+0x5e>
	else if (y == 2) LCD_CMD(0x94 + x);
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d106      	bne.n	800051a <LCD_XY+0x4c>
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	3b6c      	subs	r3, #108	@ 0x6c
 8000510:	b2db      	uxtb	r3, r3
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fefe 	bl	8000314 <LCD_CMD>
}
 8000518:	e008      	b.n	800052c <LCD_XY+0x5e>
	else if (y == 3) LCD_CMD(0xD4 + x);
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d105      	bne.n	800052c <LCD_XY+0x5e>
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	3b2c      	subs	r3, #44	@ 0x2c
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fef4 	bl	8000314 <LCD_CMD>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <LCD_PUTS>:
void LCD_CLEAR(void) {
	LCD_CMD(0x01);
	delay_ms(2);
}

void LCD_PUTS(char *str) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	while (*str) LCD_DATA(*str++);
 800053c:	e006      	b.n	800054c <LCD_PUTS+0x18>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff fe74 	bl	8000234 <LCD_DATA>
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1f4      	bne.n	800053e <LCD_PUTS+0xa>
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 faee 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f81e 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f8b6 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f88a 	bl	8000688 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000574:	f000 f85a 	bl	800062c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I2C_ScanAddresses();
 8000578:	f7ff fe06 	bl	8000188 <I2C_ScanAddresses>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    LCD_INIT();
 800057c:	f7ff ff76 	bl	800046c <LCD_INIT>
	    LCD_XY(0, 0) ; LCD_PUTS((char *)"LCD Display test");
 8000580:	2100      	movs	r1, #0
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff ffa3 	bl	80004ce <LCD_XY>
 8000588:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <main+0x40>)
 800058a:	f7ff ffd3 	bl	8000534 <LCD_PUTS>
	    LCD_XY(0, 1) ; LCD_PUTS((char *)"Hello World.....");
 800058e:	2101      	movs	r1, #1
 8000590:	2000      	movs	r0, #0
 8000592:	f7ff ff9c 	bl	80004ce <LCD_XY>
 8000596:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <main+0x44>)
 8000598:	f7ff ffcc 	bl	8000534 <LCD_PUTS>
	    LCD_INIT();
 800059c:	bf00      	nop
 800059e:	e7ed      	b.n	800057c <main+0x1c>
 80005a0:	08003980 	.word	0x08003980
 80005a4:	08003994 	.word	0x08003994

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	@ 0x40
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2228      	movs	r2, #40	@ 0x28
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fc1e 	bl	8002df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ce:	2301      	movs	r3, #1
 80005d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d2:	2310      	movs	r3, #16
 80005d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005da:	2300      	movs	r3, #0
 80005dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80005de:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80005e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0318 	add.w	r3, r7, #24
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fbc7 	bl	8001d7c <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80005f4:	f000 f8e0 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fe34 	bl	8002280 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800061e:	f000 f8cb 	bl	80007b8 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3740      	adds	r7, #64	@ 0x40
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	@ (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	@ (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	@ (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	@ (800067c <MX_I2C1_Init+0x50>)
 800066a:	f000 fdbd 	bl	80011e8 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f8a0 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000084 	.word	0x20000084
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <MX_USART2_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f001 ff6c 	bl	800259c <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f875 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000d8 	.word	0x200000d8
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a2c      	ldr	r2, [pc, #176]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0310 	and.w	r3, r3, #16
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000708:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a26      	ldr	r2, [pc, #152]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 800070e:	f043 0320 	orr.w	r3, r3, #32
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a20      	ldr	r2, [pc, #128]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a1a      	ldr	r2, [pc, #104]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <MX_GPIO_Init+0xcc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2120      	movs	r1, #32
 8000754:	4815      	ldr	r0, [pc, #84]	@ (80007ac <MX_GPIO_Init+0xd0>)
 8000756:	f000 fd0d 	bl	8001174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <MX_GPIO_Init+0xd8>)
 8000770:	f000 fb7c 	bl	8000e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000774:	2320      	movs	r3, #32
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2302      	movs	r3, #2
 8000782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	4619      	mov	r1, r3
 800078a:	4808      	ldr	r0, [pc, #32]	@ (80007ac <MX_GPIO_Init+0xd0>)
 800078c:	f000 fb6e 	bl	8000e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2028      	movs	r0, #40	@ 0x28
 8000796:	f000 fb32 	bl	8000dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800079a:	2028      	movs	r0, #40	@ 0x28
 800079c:	f000 fb4b 	bl	8000e36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010800 	.word	0x40010800
 80007b0:	10110000 	.word	0x10110000
 80007b4:	40011000 	.word	0x40011000

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <HAL_MspInit+0x5c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <HAL_MspInit+0x5c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6193      	str	r3, [r2, #24]
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_MspInit+0x5c>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <HAL_MspInit+0x5c>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <HAL_MspInit+0x5c>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <HAL_MspInit+0x5c>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <HAL_MspInit+0x60>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <HAL_MspInit+0x60>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000
 8000824:	40010000 	.word	0x40010000

08000828 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <HAL_I2C_MspInit+0x90>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d132      	bne.n	80008ae <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <HAL_I2C_MspInit+0x94>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <HAL_I2C_MspInit+0x94>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <HAL_I2C_MspInit+0x94>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000860:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000866:	2312      	movs	r3, #18
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	4812      	ldr	r0, [pc, #72]	@ (80008c0 <HAL_I2C_MspInit+0x98>)
 8000876:	f000 faf9 	bl	8000e6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_I2C_MspInit+0x9c>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000882:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
 8000888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000890:	4a0c      	ldr	r2, [pc, #48]	@ (80008c4 <HAL_I2C_MspInit+0x9c>)
 8000892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000894:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <HAL_I2C_MspInit+0x94>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	4a08      	ldr	r2, [pc, #32]	@ (80008bc <HAL_I2C_MspInit+0x94>)
 800089c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008a0:	61d3      	str	r3, [r2, #28]
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_I2C_MspInit+0x94>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40005400 	.word	0x40005400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010c00 	.word	0x40010c00
 80008c4:	40010000 	.word	0x40010000

080008c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a15      	ldr	r2, [pc, #84]	@ (8000938 <HAL_UART_MspInit+0x70>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d123      	bne.n	8000930 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <HAL_UART_MspInit+0x74>)
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	4a13      	ldr	r2, [pc, #76]	@ (800093c <HAL_UART_MspInit+0x74>)
 80008ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f2:	61d3      	str	r3, [r2, #28]
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <HAL_UART_MspInit+0x74>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <HAL_UART_MspInit+0x74>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <HAL_UART_MspInit+0x74>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <HAL_UART_MspInit+0x74>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000918:	230c      	movs	r3, #12
 800091a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2302      	movs	r3, #2
 8000922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <HAL_UART_MspInit+0x78>)
 800092c:	f000 fa9e 	bl	8000e6c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004400 	.word	0x40004400
 800093c:	40021000 	.word	0x40021000
 8000940:	40010800 	.word	0x40010800

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <NMI_Handler+0x4>

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <MemManage_Handler+0x4>

0800095c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <UsageFault_Handler+0x4>

0800096c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 f91c 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009a4:	f000 fbfe 	bl	80011a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e00a      	b.n	80009d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009be:	f3af 8000 	nop.w
 80009c2:	4601      	mov	r1, r0
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	1c5a      	adds	r2, r3, #1
 80009c8:	60ba      	str	r2, [r7, #8]
 80009ca:	b2ca      	uxtb	r2, r1
 80009cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf0      	blt.n	80009be <_read+0x12>
  }

  return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e009      	b.n	8000a0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	60ba      	str	r2, [r7, #8]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fba3 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	dbf1      	blt.n	80009f8 <_write+0x12>
  }
  return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <_close>:

int _close(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a44:	605a      	str	r2, [r3, #4]
  return 0;
 8000a46:	2300      	movs	r3, #0
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr

08000a52 <_isatty>:

int _isatty(int file)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr

08000a66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b085      	sub	sp, #20
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
	...

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	@ (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d207      	bcs.n	8000ac0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab0:	f002 f9f0 	bl	8002e94 <__errno>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	e009      	b.n	8000ad4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	@ (8000ae4 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	4a05      	ldr	r2, [pc, #20]	@ (8000ae4 <_sbrk+0x64>)
 8000ad0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20005000 	.word	0x20005000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	20000128 	.word	0x20000128
 8000ae8:	20000280 	.word	0x20000280

08000aec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000af8:	f7ff fff8 	bl	8000aec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000afc:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000afe:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b00:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a09      	ldr	r2, [pc, #36]	@ (8000b38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b14:	4c09      	ldr	r4, [pc, #36]	@ (8000b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b22:	f002 f9bd 	bl	8002ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b26:	f7ff fd1b 	bl	8000560 <main>
  bx lr
 8000b2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b34:	08003a10 	.word	0x08003a10
  ldr r2, =_sbss
 8000b38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b3c:	2000027c 	.word	0x2000027c

08000b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC1_2_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_Init+0x28>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_Init+0x28>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f947 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 f808 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe30 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40022000 	.word	0x40022000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f95f 	bl	8000e52 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f927 	bl	8000dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	@ (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a03      	ldr	r2, [pc, #12]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	2000012c 	.word	0x2000012c

08000bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	@ (8000c04 <HAL_GetTick+0x10>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	2000012c 	.word	0x2000012c

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff fff0 	bl	8000bf4 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffe0 	bl	8000bf4 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4906      	ldr	r1, [pc, #24]	@ (8000ce8 <__NVIC_EnableIRQ+0x34>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	@ (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	@ (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	@ 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	@ 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f7ff ff90 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff2d 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff42 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff90 	bl	8000d40 <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5f 	bl	8000cec <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff35 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffa2 	bl	8000da4 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b08b      	sub	sp, #44	@ 0x2c
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	e169      	b.n	8001154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e80:	2201      	movs	r2, #1
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8158 	bne.w	800114e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4a9a      	ldr	r2, [pc, #616]	@ (800110c <HAL_GPIO_Init+0x2a0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d05e      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ea8:	4a98      	ldr	r2, [pc, #608]	@ (800110c <HAL_GPIO_Init+0x2a0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d875      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000eae:	4a98      	ldr	r2, [pc, #608]	@ (8001110 <HAL_GPIO_Init+0x2a4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d058      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000eb4:	4a96      	ldr	r2, [pc, #600]	@ (8001110 <HAL_GPIO_Init+0x2a4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d86f      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000eba:	4a96      	ldr	r2, [pc, #600]	@ (8001114 <HAL_GPIO_Init+0x2a8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d052      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ec0:	4a94      	ldr	r2, [pc, #592]	@ (8001114 <HAL_GPIO_Init+0x2a8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d869      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ec6:	4a94      	ldr	r2, [pc, #592]	@ (8001118 <HAL_GPIO_Init+0x2ac>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d04c      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ecc:	4a92      	ldr	r2, [pc, #584]	@ (8001118 <HAL_GPIO_Init+0x2ac>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d863      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ed2:	4a92      	ldr	r2, [pc, #584]	@ (800111c <HAL_GPIO_Init+0x2b0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d046      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
 8000ed8:	4a90      	ldr	r2, [pc, #576]	@ (800111c <HAL_GPIO_Init+0x2b0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d85d      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ede:	2b12      	cmp	r3, #18
 8000ee0:	d82a      	bhi.n	8000f38 <HAL_GPIO_Init+0xcc>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d859      	bhi.n	8000f9a <HAL_GPIO_Init+0x12e>
 8000ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8000eec <HAL_GPIO_Init+0x80>)
 8000ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eec:	08000f67 	.word	0x08000f67
 8000ef0:	08000f41 	.word	0x08000f41
 8000ef4:	08000f53 	.word	0x08000f53
 8000ef8:	08000f95 	.word	0x08000f95
 8000efc:	08000f9b 	.word	0x08000f9b
 8000f00:	08000f9b 	.word	0x08000f9b
 8000f04:	08000f9b 	.word	0x08000f9b
 8000f08:	08000f9b 	.word	0x08000f9b
 8000f0c:	08000f9b 	.word	0x08000f9b
 8000f10:	08000f9b 	.word	0x08000f9b
 8000f14:	08000f9b 	.word	0x08000f9b
 8000f18:	08000f9b 	.word	0x08000f9b
 8000f1c:	08000f9b 	.word	0x08000f9b
 8000f20:	08000f9b 	.word	0x08000f9b
 8000f24:	08000f9b 	.word	0x08000f9b
 8000f28:	08000f9b 	.word	0x08000f9b
 8000f2c:	08000f9b 	.word	0x08000f9b
 8000f30:	08000f49 	.word	0x08000f49
 8000f34:	08000f5d 	.word	0x08000f5d
 8000f38:	4a79      	ldr	r2, [pc, #484]	@ (8001120 <HAL_GPIO_Init+0x2b4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f3e:	e02c      	b.n	8000f9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	623b      	str	r3, [r7, #32]
          break;
 8000f46:	e029      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	623b      	str	r3, [r7, #32]
          break;
 8000f50:	e024      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	3308      	adds	r3, #8
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e01f      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	330c      	adds	r3, #12
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e01a      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	623b      	str	r3, [r7, #32]
          break;
 8000f72:	e013      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d105      	bne.n	8000f88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	611a      	str	r2, [r3, #16]
          break;
 8000f86:	e009      	b.n	8000f9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69fa      	ldr	r2, [r7, #28]
 8000f90:	615a      	str	r2, [r3, #20]
          break;
 8000f92:	e003      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x130>
          break;
 8000f9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2bff      	cmp	r3, #255	@ 0xff
 8000fa0:	d801      	bhi.n	8000fa6 <HAL_GPIO_Init+0x13a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	e001      	b.n	8000faa <HAL_GPIO_Init+0x13e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	2bff      	cmp	r3, #255	@ 0xff
 8000fb0:	d802      	bhi.n	8000fb8 <HAL_GPIO_Init+0x14c>
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0x152>
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	3b08      	subs	r3, #8
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	6a39      	ldr	r1, [r7, #32]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 80b1 	beq.w	800114e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fec:	4b4d      	ldr	r3, [pc, #308]	@ (8001124 <HAL_GPIO_Init+0x2b8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a4c      	ldr	r2, [pc, #304]	@ (8001124 <HAL_GPIO_Init+0x2b8>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b4a      	ldr	r3, [pc, #296]	@ (8001124 <HAL_GPIO_Init+0x2b8>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001004:	4a48      	ldr	r2, [pc, #288]	@ (8001128 <HAL_GPIO_Init+0x2bc>)
 8001006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001008:	089b      	lsrs	r3, r3, #2
 800100a:	3302      	adds	r3, #2
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a40      	ldr	r2, [pc, #256]	@ (800112c <HAL_GPIO_Init+0x2c0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d013      	beq.n	8001058 <HAL_GPIO_Init+0x1ec>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a3f      	ldr	r2, [pc, #252]	@ (8001130 <HAL_GPIO_Init+0x2c4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d00d      	beq.n	8001054 <HAL_GPIO_Init+0x1e8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a3e      	ldr	r2, [pc, #248]	@ (8001134 <HAL_GPIO_Init+0x2c8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d007      	beq.n	8001050 <HAL_GPIO_Init+0x1e4>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a3d      	ldr	r2, [pc, #244]	@ (8001138 <HAL_GPIO_Init+0x2cc>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d101      	bne.n	800104c <HAL_GPIO_Init+0x1e0>
 8001048:	2303      	movs	r3, #3
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 800104c:	2304      	movs	r3, #4
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001050:	2302      	movs	r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001058:	2300      	movs	r3, #0
 800105a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800106a:	492f      	ldr	r1, [pc, #188]	@ (8001128 <HAL_GPIO_Init+0x2bc>)
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d006      	beq.n	8001092 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001084:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	492c      	ldr	r1, [pc, #176]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001092:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	43db      	mvns	r3, r3
 800109a:	4928      	ldr	r1, [pc, #160]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 800109c:	4013      	ands	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	4922      	ldr	r1, [pc, #136]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60cb      	str	r3, [r1, #12]
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	491e      	ldr	r1, [pc, #120]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4918      	ldr	r1, [pc, #96]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	604b      	str	r3, [r1, #4]
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	4914      	ldr	r1, [pc, #80]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d021      	beq.n	8001140 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	490e      	ldr	r1, [pc, #56]	@ (800113c <HAL_GPIO_Init+0x2d0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
 8001108:	e021      	b.n	800114e <HAL_GPIO_Init+0x2e2>
 800110a:	bf00      	nop
 800110c:	10320000 	.word	0x10320000
 8001110:	10310000 	.word	0x10310000
 8001114:	10220000 	.word	0x10220000
 8001118:	10210000 	.word	0x10210000
 800111c:	10120000 	.word	0x10120000
 8001120:	10110000 	.word	0x10110000
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000
 800112c:	40010800 	.word	0x40010800
 8001130:	40010c00 	.word	0x40010c00
 8001134:	40011000 	.word	0x40011000
 8001138:	40011400 	.word	0x40011400
 800113c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_GPIO_Init+0x304>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	43db      	mvns	r3, r3
 8001148:	4909      	ldr	r1, [pc, #36]	@ (8001170 <HAL_GPIO_Init+0x304>)
 800114a:	4013      	ands	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	3301      	adds	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115a:	fa22 f303 	lsr.w	r3, r2, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	f47f ae8e 	bne.w	8000e80 <HAL_GPIO_Init+0x14>
  }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	372c      	adds	r7, #44	@ 0x2c
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	807b      	strh	r3, [r7, #2]
 8001180:	4613      	mov	r3, r2
 8001182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001184:	787b      	ldrb	r3, [r7, #1]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118a:	887a      	ldrh	r2, [r7, #2]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001190:	e003      	b.n	800119a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	041a      	lsls	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	611a      	str	r2, [r3, #16]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f806 	bl	80011d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e12b      	b.n	8001452 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d106      	bne.n	8001214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fb0a 	bl	8000828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2224      	movs	r2, #36	@ 0x24
 8001218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0201 	bic.w	r2, r2, #1
 800122a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800123a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800124a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800124c:	f001 f960 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
 8001250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a81      	ldr	r2, [pc, #516]	@ (800145c <HAL_I2C_Init+0x274>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d807      	bhi.n	800126c <HAL_I2C_Init+0x84>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4a80      	ldr	r2, [pc, #512]	@ (8001460 <HAL_I2C_Init+0x278>)
 8001260:	4293      	cmp	r3, r2
 8001262:	bf94      	ite	ls
 8001264:	2301      	movls	r3, #1
 8001266:	2300      	movhi	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	e006      	b.n	800127a <HAL_I2C_Init+0x92>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4a7d      	ldr	r2, [pc, #500]	@ (8001464 <HAL_I2C_Init+0x27c>)
 8001270:	4293      	cmp	r3, r2
 8001272:	bf94      	ite	ls
 8001274:	2301      	movls	r3, #1
 8001276:	2300      	movhi	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e0e7      	b.n	8001452 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4a78      	ldr	r2, [pc, #480]	@ (8001468 <HAL_I2C_Init+0x280>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4a6a      	ldr	r2, [pc, #424]	@ (800145c <HAL_I2C_Init+0x274>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d802      	bhi.n	80012bc <HAL_I2C_Init+0xd4>
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	3301      	adds	r3, #1
 80012ba:	e009      	b.n	80012d0 <HAL_I2C_Init+0xe8>
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	4a69      	ldr	r2, [pc, #420]	@ (800146c <HAL_I2C_Init+0x284>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	099b      	lsrs	r3, r3, #6
 80012ce:	3301      	adds	r3, #1
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80012e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	495c      	ldr	r1, [pc, #368]	@ (800145c <HAL_I2C_Init+0x274>)
 80012ec:	428b      	cmp	r3, r1
 80012ee:	d819      	bhi.n	8001324 <HAL_I2C_Init+0x13c>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e59      	subs	r1, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80012fe:	1c59      	adds	r1, r3, #1
 8001300:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001304:	400b      	ands	r3, r1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00a      	beq.n	8001320 <HAL_I2C_Init+0x138>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1e59      	subs	r1, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fbb1 f3f3 	udiv	r3, r1, r3
 8001318:	3301      	adds	r3, #1
 800131a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800131e:	e051      	b.n	80013c4 <HAL_I2C_Init+0x1dc>
 8001320:	2304      	movs	r3, #4
 8001322:	e04f      	b.n	80013c4 <HAL_I2C_Init+0x1dc>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d111      	bne.n	8001350 <HAL_I2C_Init+0x168>
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1e58      	subs	r0, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6859      	ldr	r1, [r3, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	440b      	add	r3, r1
 800133a:	fbb0 f3f3 	udiv	r3, r0, r3
 800133e:	3301      	adds	r3, #1
 8001340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001344:	2b00      	cmp	r3, #0
 8001346:	bf0c      	ite	eq
 8001348:	2301      	moveq	r3, #1
 800134a:	2300      	movne	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	e012      	b.n	8001376 <HAL_I2C_Init+0x18e>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	1e58      	subs	r0, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6859      	ldr	r1, [r3, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	0099      	lsls	r1, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	fbb0 f3f3 	udiv	r3, r0, r3
 8001366:	3301      	adds	r3, #1
 8001368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_Init+0x196>
 800137a:	2301      	movs	r3, #1
 800137c:	e022      	b.n	80013c4 <HAL_I2C_Init+0x1dc>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10e      	bne.n	80013a4 <HAL_I2C_Init+0x1bc>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1e58      	subs	r0, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6859      	ldr	r1, [r3, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	440b      	add	r3, r1
 8001394:	fbb0 f3f3 	udiv	r3, r0, r3
 8001398:	3301      	adds	r3, #1
 800139a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013a2:	e00f      	b.n	80013c4 <HAL_I2C_Init+0x1dc>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1e58      	subs	r0, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6859      	ldr	r1, [r3, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	0099      	lsls	r1, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ba:	3301      	adds	r3, #1
 80013bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	6809      	ldr	r1, [r1, #0]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80013f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6911      	ldr	r1, [r2, #16]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68d2      	ldr	r2, [r2, #12]
 80013fe:	4311      	orrs	r1, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	430b      	orrs	r3, r1
 8001406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	430a      	orrs	r2, r1
 8001422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2220      	movs	r2, #32
 800143e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	000186a0 	.word	0x000186a0
 8001460:	001e847f 	.word	0x001e847f
 8001464:	003d08ff 	.word	0x003d08ff
 8001468:	431bde83 	.word	0x431bde83
 800146c:	10624dd3 	.word	0x10624dd3

08001470 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af02      	add	r7, sp, #8
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	461a      	mov	r2, r3
 800147c:	460b      	mov	r3, r1
 800147e:	817b      	strh	r3, [r7, #10]
 8001480:	4613      	mov	r3, r2
 8001482:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff fbb6 	bl	8000bf4 <HAL_GetTick>
 8001488:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b20      	cmp	r3, #32
 8001494:	f040 80e0 	bne.w	8001658 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2319      	movs	r3, #25
 800149e:	2201      	movs	r2, #1
 80014a0:	4970      	ldr	r1, [pc, #448]	@ (8001664 <HAL_I2C_Master_Transmit+0x1f4>)
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 fa92 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014ae:	2302      	movs	r3, #2
 80014b0:	e0d3      	b.n	800165a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_I2C_Master_Transmit+0x50>
 80014bc:	2302      	movs	r3, #2
 80014be:	e0cc      	b.n	800165a <HAL_I2C_Master_Transmit+0x1ea>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d007      	beq.n	80014e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2221      	movs	r2, #33	@ 0x21
 80014fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2210      	movs	r2, #16
 8001502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	893a      	ldrh	r2, [r7, #8]
 8001516:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800151c:	b29a      	uxth	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4a50      	ldr	r2, [pc, #320]	@ (8001668 <HAL_I2C_Master_Transmit+0x1f8>)
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001528:	8979      	ldrh	r1, [r7, #10]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	6a3a      	ldr	r2, [r7, #32]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f9ca 	bl	80018c8 <I2C_MasterRequestWrite>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e08d      	b.n	800165a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001554:	e066      	b.n	8001624 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	6a39      	ldr	r1, [r7, #32]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 fb50 	bl	8001c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00d      	beq.n	8001582 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	2b04      	cmp	r3, #4
 800156c:	d107      	bne.n	800157e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800157c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e06b      	b.n	800165a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800159c:	b29b      	uxth	r3, r3
 800159e:	3b01      	subs	r3, #1
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015aa:	3b01      	subs	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d11b      	bne.n	80015f8 <HAL_I2C_Master_Transmit+0x188>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d017      	beq.n	80015f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	6a39      	ldr	r1, [r7, #32]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 fb47 	bl	8001c90 <I2C_WaitOnBTFFlagUntilTimeout>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00d      	beq.n	8001624 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	2b04      	cmp	r3, #4
 800160e:	d107      	bne.n	8001620 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800161e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e01a      	b.n	800165a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001628:	2b00      	cmp	r3, #0
 800162a:	d194      	bne.n	8001556 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800163a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2220      	movs	r2, #32
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	e000      	b.n	800165a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001658:	2302      	movs	r3, #2
  }
}
 800165a:	4618      	mov	r0, r3
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	00100002 	.word	0x00100002
 8001668:	ffff0000 	.word	0xffff0000

0800166c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	460b      	mov	r3, r1
 800167a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff faba 	bl	8000bf4 <HAL_GetTick>
 8001680:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b20      	cmp	r3, #32
 8001690:	f040 8111 	bne.w	80018b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2319      	movs	r3, #25
 800169a:	2201      	movs	r2, #1
 800169c:	4988      	ldr	r1, [pc, #544]	@ (80018c0 <HAL_I2C_IsDeviceReady+0x254>)
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f994 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80016aa:	2302      	movs	r3, #2
 80016ac:	e104      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_I2C_IsDeviceReady+0x50>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e0fd      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x24c>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d007      	beq.n	80016e2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2224      	movs	r2, #36	@ 0x24
 80016f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4a70      	ldr	r2, [pc, #448]	@ (80018c4 <HAL_I2C_IsDeviceReady+0x258>)
 8001704:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001714:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2200      	movs	r2, #0
 800171e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f000 f952 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800173c:	d103      	bne.n	8001746 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001744:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0b6      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800174a:	897b      	ldrh	r3, [r7, #10]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001758:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800175a:	f7ff fa4b 	bl	8000bf4 <HAL_GetTick>
 800175e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b02      	cmp	r3, #2
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800178e:	e025      	b.n	80017dc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001790:	f7ff fa30 	bl	8000bf4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d302      	bcc.n	80017a6 <HAL_I2C_IsDeviceReady+0x13a>
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	22a0      	movs	r2, #160	@ 0xa0
 80017aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	bf0c      	ite	eq
 80017bc:	2301      	moveq	r3, #1
 80017be:	2300      	movne	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2ba0      	cmp	r3, #160	@ 0xa0
 80017e6:	d005      	beq.n	80017f4 <HAL_I2C_IsDeviceReady+0x188>
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_I2C_IsDeviceReady+0x188>
 80017ee:	7dbb      	ldrb	r3, [r7, #22]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0cd      	beq.n	8001790 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b02      	cmp	r3, #2
 8001808:	d129      	bne.n	800185e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001818:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2319      	movs	r3, #25
 8001836:	2201      	movs	r2, #1
 8001838:	4921      	ldr	r1, [pc, #132]	@ (80018c0 <HAL_I2C_IsDeviceReady+0x254>)
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f8c6 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e036      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2220      	movs	r2, #32
 800184e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e02c      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800186c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001876:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	2319      	movs	r3, #25
 800187e:	2201      	movs	r2, #1
 8001880:	490f      	ldr	r1, [pc, #60]	@ (80018c0 <HAL_I2C_IsDeviceReady+0x254>)
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f8a2 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e012      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	3301      	adds	r3, #1
 8001896:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	429a      	cmp	r2, r3
 800189e:	f4ff af32 	bcc.w	8001706 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80018b6:	2302      	movs	r3, #2
  }
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	00100002 	.word	0x00100002
 80018c4:	ffff0000 	.word	0xffff0000

080018c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	460b      	mov	r3, r1
 80018d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d006      	beq.n	80018f2 <I2C_MasterRequestWrite+0x2a>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d003      	beq.n	80018f2 <I2C_MasterRequestWrite+0x2a>
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018f0:	d108      	bne.n	8001904 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e00b      	b.n	800191c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001908:	2b12      	cmp	r3, #18
 800190a:	d107      	bne.n	800191c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800191a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f84f 	bl	80019cc <I2C_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00d      	beq.n	8001950 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001942:	d103      	bne.n	800194c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e035      	b.n	80019bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001958:	d108      	bne.n	800196c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	e01b      	b.n	80019a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	11db      	asrs	r3, r3, #7
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f003 0306 	and.w	r3, r3, #6
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f063 030f 	orn	r3, r3, #15
 800197c:	b2da      	uxtb	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	490e      	ldr	r1, [pc, #56]	@ (80019c4 <I2C_MasterRequestWrite+0xfc>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f898 	bl	8001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e010      	b.n	80019bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800199a:	897b      	ldrh	r3, [r7, #10]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4907      	ldr	r1, [pc, #28]	@ (80019c8 <I2C_MasterRequestWrite+0x100>)
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f888 	bl	8001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	00010008 	.word	0x00010008
 80019c8:	00010002 	.word	0x00010002

080019cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019dc:	e048      	b.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d044      	beq.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e6:	f7ff f905 	bl	8000bf4 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d139      	bne.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d10d      	bne.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	4013      	ands	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	e00c      	b.n	8001a3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d116      	bne.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	f043 0220 	orr.w	r2, r3, #32
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e023      	b.n	8001ab8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	0c1b      	lsrs	r3, r3, #16
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d10d      	bne.n	8001a96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	43da      	mvns	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4013      	ands	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	e00c      	b.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d093      	beq.n	80019de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ace:	e071      	b.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ade:	d123      	bne.n	8001b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f043 0204 	orr.w	r2, r3, #4
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e067      	b.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2e:	d041      	beq.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b30:	f7ff f860 	bl	8000bf4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d302      	bcc.n	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d136      	bne.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0c1b      	lsrs	r3, r3, #16
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d10c      	bne.n	8001b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	e00b      	b.n	8001b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	43da      	mvns	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	4013      	ands	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f043 0220 	orr.w	r2, r3, #32
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e021      	b.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d10c      	bne.n	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e00b      	b.n	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4013      	ands	r3, r2
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f af6d 	bne.w	8001ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c0c:	e034      	b.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f886 	bl	8001d20 <I2C_IsAcknowledgeFailed>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e034      	b.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d028      	beq.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c26:	f7fe ffe5 	bl	8000bf4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d302      	bcc.n	8001c3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d11d      	bne.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c46:	2b80      	cmp	r3, #128	@ 0x80
 8001c48:	d016      	beq.n	8001c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e007      	b.n	8001c88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c82:	2b80      	cmp	r3, #128	@ 0x80
 8001c84:	d1c3      	bne.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c9c:	e034      	b.n	8001d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 f83e 	bl	8001d20 <I2C_IsAcknowledgeFailed>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e034      	b.n	8001d18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d028      	beq.n	8001d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb6:	f7fe ff9d 	bl	8000bf4 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d302      	bcc.n	8001ccc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d11d      	bne.n	8001d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d016      	beq.n	8001d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	f043 0220 	orr.w	r2, r3, #32
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e007      	b.n	8001d18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d1c3      	bne.n	8001c9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d36:	d11b      	bne.n	8001d70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	f043 0204 	orr.w	r2, r3, #4
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e272      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8087 	beq.w	8001eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d9c:	4b92      	ldr	r3, [pc, #584]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d00c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da8:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d112      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
 8001db4:	4b8c      	ldr	r3, [pc, #560]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc0:	d10b      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc2:	4b89      	ldr	r3, [pc, #548]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d06c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d168      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e24c      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x76>
 8001de4:	4b80      	ldr	r3, [pc, #512]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a7f      	ldr	r2, [pc, #508]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e02e      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x98>
 8001dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7a      	ldr	r2, [pc, #488]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b78      	ldr	r3, [pc, #480]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a77      	ldr	r2, [pc, #476]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0xbc>
 8001e1e:	4b72      	ldr	r3, [pc, #456]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a71      	ldr	r2, [pc, #452]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e38:	4b6b      	ldr	r3, [pc, #428]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b68      	ldr	r3, [pc, #416]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a67      	ldr	r2, [pc, #412]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe fecc 	bl	8000bf4 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7fe fec8 	bl	8000bf4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	@ 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e200      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b5d      	ldr	r3, [pc, #372]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xe4>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7fe feb8 	bl	8000bf4 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7fe feb4 	bl	8000bf4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	@ 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1ec      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b53      	ldr	r3, [pc, #332]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x10c>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ec2:	4b49      	ldr	r3, [pc, #292]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
 8001ece:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b43      	ldr	r3, [pc, #268]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1c0      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4939      	ldr	r1, [pc, #228]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b36      	ldr	r3, [pc, #216]	@ (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe6d 	bl	8000bf4 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7fe fe69 	bl	8000bf4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1a1      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4927      	ldr	r1, [pc, #156]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe fe4c 	bl	8000bf4 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f60:	f7fe fe48 	bl	8000bf4 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e180      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03a      	beq.n	8002000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d019      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7fe fe2c 	bl	8000bf4 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7fe fe28 	bl	8000bf4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e160      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 face 	bl	8002560 <RCC_Delay>
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe fe12 	bl	8000bf4 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd2:	e00f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fe0e 	bl	8000bf4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d908      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e146      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	42420000 	.word	0x42420000
 8001ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	4b92      	ldr	r3, [pc, #584]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e9      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a6 	beq.w	800215a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b8b      	ldr	r3, [pc, #556]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b88      	ldr	r3, [pc, #544]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a87      	ldr	r2, [pc, #540]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002028:	61d3      	str	r3, [r2, #28]
 800202a:	4b85      	ldr	r3, [pc, #532]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b82      	ldr	r3, [pc, #520]	@ (8002244 <HAL_RCC_OscConfig+0x4c8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b7f      	ldr	r3, [pc, #508]	@ (8002244 <HAL_RCC_OscConfig+0x4c8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7e      	ldr	r2, [pc, #504]	@ (8002244 <HAL_RCC_OscConfig+0x4c8>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7fe fdcf 	bl	8000bf4 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7fe fdcb 	bl	8000bf4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	@ 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e103      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b75      	ldr	r3, [pc, #468]	@ (8002244 <HAL_RCC_OscConfig+0x4c8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x312>
 8002080:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e02d      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x334>
 8002096:	4b6a      	ldr	r3, [pc, #424]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a69      	ldr	r2, [pc, #420]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b67      	ldr	r3, [pc, #412]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a66      	ldr	r2, [pc, #408]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	e01c      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x356>
 80020b8:	4b61      	ldr	r3, [pc, #388]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a60      	ldr	r2, [pc, #384]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b58      	ldr	r3, [pc, #352]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a57      	ldr	r2, [pc, #348]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fd7f 	bl	8000bf4 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fd7b 	bl	8000bf4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0b1      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x37e>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7fe fd69 	bl	8000bf4 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7fe fd65 	bl	8000bf4 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e09b      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	4b40      	ldr	r3, [pc, #256]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b3c      	ldr	r3, [pc, #240]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a3b      	ldr	r2, [pc, #236]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8087 	beq.w	8002272 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	4b36      	ldr	r3, [pc, #216]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d061      	beq.n	8002234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d146      	bne.n	8002206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <HAL_RCC_OscConfig+0x4cc>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7fe fd39 	bl	8000bf4 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7fe fd35 	bl	8000bf4 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e06d      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002198:	4b29      	ldr	r3, [pc, #164]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ae:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4921      	ldr	r1, [pc, #132]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a19      	ldr	r1, [r3, #32]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	430b      	orrs	r3, r1
 80021d2:	491b      	ldr	r1, [pc, #108]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_RCC_OscConfig+0x4cc>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7fe fd09 	bl	8000bf4 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe fd05 	bl	8000bf4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e03d      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x46a>
 8002204:	e035      	b.n	8002272 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fcf2 	bl	8000bf4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fcee 	bl	8000bf4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e026      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x498>
 8002232:	e01e      	b.n	8002272 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d107      	bne.n	800224c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e019      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
 8002248:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_OscConfig+0x500>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	429a      	cmp	r2, r3
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0d0      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002294:	4b6a      	ldr	r3, [pc, #424]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d910      	bls.n	80022c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b67      	ldr	r3, [pc, #412]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4965      	ldr	r1, [pc, #404]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b63      	ldr	r3, [pc, #396]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0b8      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d020      	beq.n	8002312 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022dc:	4b59      	ldr	r3, [pc, #356]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a58      	ldr	r2, [pc, #352]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f4:	4b53      	ldr	r3, [pc, #332]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a52      	ldr	r2, [pc, #328]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80022fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b50      	ldr	r3, [pc, #320]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	494d      	ldr	r1, [pc, #308]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d040      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	4b47      	ldr	r3, [pc, #284]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d115      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e07f      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d107      	bne.n	800234e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b41      	ldr	r3, [pc, #260]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e073      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e06b      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f023 0203 	bic.w	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4936      	ldr	r1, [pc, #216]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002370:	f7fe fc40 	bl	8000bf4 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	e00a      	b.n	800238e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002378:	f7fe fc3c 	bl	8000bf4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e053      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238e:	4b2d      	ldr	r3, [pc, #180]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 020c 	and.w	r2, r3, #12
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d1eb      	bne.n	8002378 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d210      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 0207 	bic.w	r2, r3, #7
 80023b6:	4922      	ldr	r1, [pc, #136]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e032      	b.n	8002436 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4916      	ldr	r1, [pc, #88]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	490e      	ldr	r1, [pc, #56]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240e:	f000 f821 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002412:	4602      	mov	r2, r0
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	490a      	ldr	r1, [pc, #40]	@ (8002448 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	5ccb      	ldrb	r3, [r1, r3]
 8002422:	fa22 f303 	lsr.w	r3, r2, r3
 8002426:	4a09      	ldr	r2, [pc, #36]	@ (800244c <HAL_RCC_ClockConfig+0x1cc>)
 8002428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800242a:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_RCC_ClockConfig+0x1d0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fb9e 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	40021000 	.word	0x40021000
 8002448:	080039a8 	.word	0x080039a8
 800244c:	20000000 	.word	0x20000000
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800246e:	4b1e      	ldr	r3, [pc, #120]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 030c 	and.w	r3, r3, #12
 800247a:	2b04      	cmp	r3, #4
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x30>
 800247e:	2b08      	cmp	r3, #8
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x36>
 8002482:	e027      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002486:	613b      	str	r3, [r7, #16]
      break;
 8002488:	e027      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	4a17      	ldr	r2, [pc, #92]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002494:	5cd3      	ldrb	r3, [r2, r3]
 8002496:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d010      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024a2:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	0c5b      	lsrs	r3, r3, #17
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	4a11      	ldr	r2, [pc, #68]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x98>)
 80024b6:	fb03 f202 	mul.w	r2, r3, r2
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e004      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a0c      	ldr	r2, [pc, #48]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	613b      	str	r3, [r7, #16]
      break;
 80024d2:	e002      	b.n	80024da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x98>)
 80024d6:	613b      	str	r3, [r7, #16]
      break;
 80024d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024da:	693b      	ldr	r3, [r7, #16]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	007a1200 	.word	0x007a1200
 80024f0:	080039c0 	.word	0x080039c0
 80024f4:	080039d0 	.word	0x080039d0
 80024f8:	003d0900 	.word	0x003d0900

080024fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002500:	4b02      	ldr	r3, [pc, #8]	@ (800250c <HAL_RCC_GetHCLKFreq+0x10>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr
 800250c:	20000000 	.word	0x20000000

08002510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002514:	f7ff fff2 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	@ (8002534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	080039b8 	.word	0x080039b8

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800253c:	f7ff ffde 	bl	80024fc <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0adb      	lsrs	r3, r3, #11
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4903      	ldr	r1, [pc, #12]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	080039b8 	.word	0x080039b8

08002560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <RCC_Delay+0x34>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <RCC_Delay+0x38>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0a5b      	lsrs	r3, r3, #9
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800257c:	bf00      	nop
  }
  while (Delay --);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1e5a      	subs	r2, r3, #1
 8002582:	60fa      	str	r2, [r7, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f9      	bne.n	800257c <RCC_Delay+0x1c>
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	20000000 	.word	0x20000000
 8002598:	10624dd3 	.word	0x10624dd3

0800259c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e042      	b.n	8002634 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7fe f980 	bl	80008c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2224      	movs	r2, #36	@ 0x24
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f971 	bl	80028c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	d175      	bne.n	8002748 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d002      	beq.n	8002668 <HAL_UART_Transmit+0x2c>
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e06e      	b.n	800274a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2221      	movs	r2, #33	@ 0x21
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800267a:	f7fe fabb 	bl	8000bf4 <HAL_GetTick>
 800267e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	88fa      	ldrh	r2, [r7, #6]
 800268a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002694:	d108      	bne.n	80026a8 <HAL_UART_Transmit+0x6c>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e003      	b.n	80026b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026b0:	e02e      	b.n	8002710 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2180      	movs	r1, #128	@ 0x80
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f848 	bl	8002752 <UART_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e03a      	b.n	800274a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10b      	bne.n	80026f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3302      	adds	r3, #2
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	e007      	b.n	8002702 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	3301      	adds	r3, #1
 8002700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1cb      	bne.n	80026b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2200      	movs	r2, #0
 8002722:	2140      	movs	r1, #64	@ 0x40
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f814 	bl	8002752 <UART_WaitOnFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e006      	b.n	800274a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002762:	e03b      	b.n	80027dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d037      	beq.n	80027dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7fe fa42 	bl	8000bf4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	6a3a      	ldr	r2, [r7, #32]
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <UART_WaitOnFlagUntilTimeout+0x30>
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e03a      	b.n	80027fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d023      	beq.n	80027dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b80      	cmp	r3, #128	@ 0x80
 8002798:	d020      	beq.n	80027dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b40      	cmp	r3, #64	@ 0x40
 800279e:	d01d      	beq.n	80027dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d116      	bne.n	80027dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f81d 	bl	8002804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2208      	movs	r2, #8
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e00f      	b.n	80027fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4013      	ands	r3, r2
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d0b4      	beq.n	8002764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002804:	b480      	push	{r7}
 8002806:	b095      	sub	sp, #84	@ 0x54
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002816:	e853 3f00 	ldrex	r3, [r3]
 800281a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800281c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	330c      	adds	r3, #12
 800282a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800282c:	643a      	str	r2, [r7, #64]	@ 0x40
 800282e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002830:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002834:	e841 2300 	strex	r3, r2, [r1]
 8002838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800283a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e5      	bne.n	800280c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3314      	adds	r3, #20
 8002846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	e853 3f00 	ldrex	r3, [r3]
 800284e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3314      	adds	r3, #20
 800285e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002860:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002868:	e841 2300 	strex	r3, r2, [r1]
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e5      	bne.n	8002840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	2b01      	cmp	r3, #1
 800287a:	d119      	bne.n	80028b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	e853 3f00 	ldrex	r3, [r3]
 800288a:	60bb      	str	r3, [r7, #8]
   return(result);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f023 0310 	bic.w	r3, r3, #16
 8002892:	647b      	str	r3, [r7, #68]	@ 0x44
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	330c      	adds	r3, #12
 800289a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800289c:	61ba      	str	r2, [r7, #24]
 800289e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a0:	6979      	ldr	r1, [r7, #20]
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	e841 2300 	strex	r3, r2, [r1]
 80028a8:	613b      	str	r3, [r7, #16]
   return(result);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e5      	bne.n	800287c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028be:	bf00      	nop
 80028c0:	3754      	adds	r7, #84	@ 0x54
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002902:	f023 030c 	bic.w	r3, r3, #12
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	430b      	orrs	r3, r1
 800290e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2c      	ldr	r2, [pc, #176]	@ (80029dc <UART_SetConfig+0x114>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d103      	bne.n	8002938 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002930:	f7ff fe02 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	e002      	b.n	800293e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002938:	f7ff fdea 	bl	8002510 <HAL_RCC_GetPCLK1Freq>
 800293c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009a      	lsls	r2, r3, #2
 8002948:	441a      	add	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	4a22      	ldr	r2, [pc, #136]	@ (80029e0 <UART_SetConfig+0x118>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	0119      	lsls	r1, r3, #4
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fbb2 f2f3 	udiv	r2, r2, r3
 8002974:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <UART_SetConfig+0x118>)
 8002976:	fba3 0302 	umull	r0, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2064      	movs	r0, #100	@ 0x64
 800297e:	fb00 f303 	mul.w	r3, r0, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	3332      	adds	r3, #50	@ 0x32
 8002988:	4a15      	ldr	r2, [pc, #84]	@ (80029e0 <UART_SetConfig+0x118>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002994:	4419      	add	r1, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009a      	lsls	r2, r3, #2
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <UART_SetConfig+0x118>)
 80029ae:	fba3 0302 	umull	r0, r3, r3, r2
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2064      	movs	r0, #100	@ 0x64
 80029b6:	fb00 f303 	mul.w	r3, r0, r3
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	3332      	adds	r3, #50	@ 0x32
 80029c0:	4a07      	ldr	r2, [pc, #28]	@ (80029e0 <UART_SetConfig+0x118>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	f003 020f 	and.w	r2, r3, #15
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	440a      	add	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40013800 	.word	0x40013800
 80029e0:	51eb851f 	.word	0x51eb851f

080029e4 <std>:
 80029e4:	2300      	movs	r3, #0
 80029e6:	b510      	push	{r4, lr}
 80029e8:	4604      	mov	r4, r0
 80029ea:	e9c0 3300 	strd	r3, r3, [r0]
 80029ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029f2:	6083      	str	r3, [r0, #8]
 80029f4:	8181      	strh	r1, [r0, #12]
 80029f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80029f8:	81c2      	strh	r2, [r0, #14]
 80029fa:	6183      	str	r3, [r0, #24]
 80029fc:	4619      	mov	r1, r3
 80029fe:	2208      	movs	r2, #8
 8002a00:	305c      	adds	r0, #92	@ 0x5c
 8002a02:	f000 f9f9 	bl	8002df8 <memset>
 8002a06:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <std+0x58>)
 8002a08:	6224      	str	r4, [r4, #32]
 8002a0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <std+0x5c>)
 8002a0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <std+0x60>)
 8002a12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <std+0x64>)
 8002a16:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a18:	4b0c      	ldr	r3, [pc, #48]	@ (8002a4c <std+0x68>)
 8002a1a:	429c      	cmp	r4, r3
 8002a1c:	d006      	beq.n	8002a2c <std+0x48>
 8002a1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a22:	4294      	cmp	r4, r2
 8002a24:	d002      	beq.n	8002a2c <std+0x48>
 8002a26:	33d0      	adds	r3, #208	@ 0xd0
 8002a28:	429c      	cmp	r4, r3
 8002a2a:	d105      	bne.n	8002a38 <std+0x54>
 8002a2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a34:	f000 ba58 	b.w	8002ee8 <__retarget_lock_init_recursive>
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	bf00      	nop
 8002a3c:	08002c49 	.word	0x08002c49
 8002a40:	08002c6b 	.word	0x08002c6b
 8002a44:	08002ca3 	.word	0x08002ca3
 8002a48:	08002cc7 	.word	0x08002cc7
 8002a4c:	20000130 	.word	0x20000130

08002a50 <stdio_exit_handler>:
 8002a50:	4a02      	ldr	r2, [pc, #8]	@ (8002a5c <stdio_exit_handler+0xc>)
 8002a52:	4903      	ldr	r1, [pc, #12]	@ (8002a60 <stdio_exit_handler+0x10>)
 8002a54:	4803      	ldr	r0, [pc, #12]	@ (8002a64 <stdio_exit_handler+0x14>)
 8002a56:	f000 b869 	b.w	8002b2c <_fwalk_sglue>
 8002a5a:	bf00      	nop
 8002a5c:	2000000c 	.word	0x2000000c
 8002a60:	0800377d 	.word	0x0800377d
 8002a64:	2000001c 	.word	0x2000001c

08002a68 <cleanup_stdio>:
 8002a68:	6841      	ldr	r1, [r0, #4]
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <cleanup_stdio+0x34>)
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	4299      	cmp	r1, r3
 8002a70:	4604      	mov	r4, r0
 8002a72:	d001      	beq.n	8002a78 <cleanup_stdio+0x10>
 8002a74:	f000 fe82 	bl	800377c <_fflush_r>
 8002a78:	68a1      	ldr	r1, [r4, #8]
 8002a7a:	4b09      	ldr	r3, [pc, #36]	@ (8002aa0 <cleanup_stdio+0x38>)
 8002a7c:	4299      	cmp	r1, r3
 8002a7e:	d002      	beq.n	8002a86 <cleanup_stdio+0x1e>
 8002a80:	4620      	mov	r0, r4
 8002a82:	f000 fe7b 	bl	800377c <_fflush_r>
 8002a86:	68e1      	ldr	r1, [r4, #12]
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <cleanup_stdio+0x3c>)
 8002a8a:	4299      	cmp	r1, r3
 8002a8c:	d004      	beq.n	8002a98 <cleanup_stdio+0x30>
 8002a8e:	4620      	mov	r0, r4
 8002a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a94:	f000 be72 	b.w	800377c <_fflush_r>
 8002a98:	bd10      	pop	{r4, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000130 	.word	0x20000130
 8002aa0:	20000198 	.word	0x20000198
 8002aa4:	20000200 	.word	0x20000200

08002aa8 <global_stdio_init.part.0>:
 8002aa8:	b510      	push	{r4, lr}
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <global_stdio_init.part.0+0x30>)
 8002aac:	4c0b      	ldr	r4, [pc, #44]	@ (8002adc <global_stdio_init.part.0+0x34>)
 8002aae:	4a0c      	ldr	r2, [pc, #48]	@ (8002ae0 <global_stdio_init.part.0+0x38>)
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f7ff ff94 	bl	80029e4 <std>
 8002abc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	2109      	movs	r1, #9
 8002ac4:	f7ff ff8e 	bl	80029e4 <std>
 8002ac8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002acc:	2202      	movs	r2, #2
 8002ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ad2:	2112      	movs	r1, #18
 8002ad4:	f7ff bf86 	b.w	80029e4 <std>
 8002ad8:	20000268 	.word	0x20000268
 8002adc:	20000130 	.word	0x20000130
 8002ae0:	08002a51 	.word	0x08002a51

08002ae4 <__sfp_lock_acquire>:
 8002ae4:	4801      	ldr	r0, [pc, #4]	@ (8002aec <__sfp_lock_acquire+0x8>)
 8002ae6:	f000 ba00 	b.w	8002eea <__retarget_lock_acquire_recursive>
 8002aea:	bf00      	nop
 8002aec:	20000271 	.word	0x20000271

08002af0 <__sfp_lock_release>:
 8002af0:	4801      	ldr	r0, [pc, #4]	@ (8002af8 <__sfp_lock_release+0x8>)
 8002af2:	f000 b9fb 	b.w	8002eec <__retarget_lock_release_recursive>
 8002af6:	bf00      	nop
 8002af8:	20000271 	.word	0x20000271

08002afc <__sinit>:
 8002afc:	b510      	push	{r4, lr}
 8002afe:	4604      	mov	r4, r0
 8002b00:	f7ff fff0 	bl	8002ae4 <__sfp_lock_acquire>
 8002b04:	6a23      	ldr	r3, [r4, #32]
 8002b06:	b11b      	cbz	r3, 8002b10 <__sinit+0x14>
 8002b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b0c:	f7ff bff0 	b.w	8002af0 <__sfp_lock_release>
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <__sinit+0x28>)
 8002b12:	6223      	str	r3, [r4, #32]
 8002b14:	4b04      	ldr	r3, [pc, #16]	@ (8002b28 <__sinit+0x2c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f5      	bne.n	8002b08 <__sinit+0xc>
 8002b1c:	f7ff ffc4 	bl	8002aa8 <global_stdio_init.part.0>
 8002b20:	e7f2      	b.n	8002b08 <__sinit+0xc>
 8002b22:	bf00      	nop
 8002b24:	08002a69 	.word	0x08002a69
 8002b28:	20000268 	.word	0x20000268

08002b2c <_fwalk_sglue>:
 8002b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b30:	4607      	mov	r7, r0
 8002b32:	4688      	mov	r8, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	2600      	movs	r6, #0
 8002b38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b3c:	f1b9 0901 	subs.w	r9, r9, #1
 8002b40:	d505      	bpl.n	8002b4e <_fwalk_sglue+0x22>
 8002b42:	6824      	ldr	r4, [r4, #0]
 8002b44:	2c00      	cmp	r4, #0
 8002b46:	d1f7      	bne.n	8002b38 <_fwalk_sglue+0xc>
 8002b48:	4630      	mov	r0, r6
 8002b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b4e:	89ab      	ldrh	r3, [r5, #12]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d907      	bls.n	8002b64 <_fwalk_sglue+0x38>
 8002b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	d003      	beq.n	8002b64 <_fwalk_sglue+0x38>
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	4638      	mov	r0, r7
 8002b60:	47c0      	blx	r8
 8002b62:	4306      	orrs	r6, r0
 8002b64:	3568      	adds	r5, #104	@ 0x68
 8002b66:	e7e9      	b.n	8002b3c <_fwalk_sglue+0x10>

08002b68 <iprintf>:
 8002b68:	b40f      	push	{r0, r1, r2, r3}
 8002b6a:	b507      	push	{r0, r1, r2, lr}
 8002b6c:	4906      	ldr	r1, [pc, #24]	@ (8002b88 <iprintf+0x20>)
 8002b6e:	ab04      	add	r3, sp, #16
 8002b70:	6808      	ldr	r0, [r1, #0]
 8002b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b76:	6881      	ldr	r1, [r0, #8]
 8002b78:	9301      	str	r3, [sp, #4]
 8002b7a:	f000 fad7 	bl	800312c <_vfiprintf_r>
 8002b7e:	b003      	add	sp, #12
 8002b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b84:	b004      	add	sp, #16
 8002b86:	4770      	bx	lr
 8002b88:	20000018 	.word	0x20000018

08002b8c <_puts_r>:
 8002b8c:	6a03      	ldr	r3, [r0, #32]
 8002b8e:	b570      	push	{r4, r5, r6, lr}
 8002b90:	4605      	mov	r5, r0
 8002b92:	460e      	mov	r6, r1
 8002b94:	6884      	ldr	r4, [r0, #8]
 8002b96:	b90b      	cbnz	r3, 8002b9c <_puts_r+0x10>
 8002b98:	f7ff ffb0 	bl	8002afc <__sinit>
 8002b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b9e:	07db      	lsls	r3, r3, #31
 8002ba0:	d405      	bmi.n	8002bae <_puts_r+0x22>
 8002ba2:	89a3      	ldrh	r3, [r4, #12]
 8002ba4:	0598      	lsls	r0, r3, #22
 8002ba6:	d402      	bmi.n	8002bae <_puts_r+0x22>
 8002ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002baa:	f000 f99e 	bl	8002eea <__retarget_lock_acquire_recursive>
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	0719      	lsls	r1, r3, #28
 8002bb2:	d502      	bpl.n	8002bba <_puts_r+0x2e>
 8002bb4:	6923      	ldr	r3, [r4, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d135      	bne.n	8002c26 <_puts_r+0x9a>
 8002bba:	4621      	mov	r1, r4
 8002bbc:	4628      	mov	r0, r5
 8002bbe:	f000 f8c5 	bl	8002d4c <__swsetup_r>
 8002bc2:	b380      	cbz	r0, 8002c26 <_puts_r+0x9a>
 8002bc4:	f04f 35ff 	mov.w	r5, #4294967295
 8002bc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bca:	07da      	lsls	r2, r3, #31
 8002bcc:	d405      	bmi.n	8002bda <_puts_r+0x4e>
 8002bce:	89a3      	ldrh	r3, [r4, #12]
 8002bd0:	059b      	lsls	r3, r3, #22
 8002bd2:	d402      	bmi.n	8002bda <_puts_r+0x4e>
 8002bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bd6:	f000 f989 	bl	8002eec <__retarget_lock_release_recursive>
 8002bda:	4628      	mov	r0, r5
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	da04      	bge.n	8002bec <_puts_r+0x60>
 8002be2:	69a2      	ldr	r2, [r4, #24]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	dc17      	bgt.n	8002c18 <_puts_r+0x8c>
 8002be8:	290a      	cmp	r1, #10
 8002bea:	d015      	beq.n	8002c18 <_puts_r+0x8c>
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	6022      	str	r2, [r4, #0]
 8002bf2:	7019      	strb	r1, [r3, #0]
 8002bf4:	68a3      	ldr	r3, [r4, #8]
 8002bf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	60a3      	str	r3, [r4, #8]
 8002bfe:	2900      	cmp	r1, #0
 8002c00:	d1ed      	bne.n	8002bde <_puts_r+0x52>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	da11      	bge.n	8002c2a <_puts_r+0x9e>
 8002c06:	4622      	mov	r2, r4
 8002c08:	210a      	movs	r1, #10
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	f000 f85f 	bl	8002cce <__swbuf_r>
 8002c10:	3001      	adds	r0, #1
 8002c12:	d0d7      	beq.n	8002bc4 <_puts_r+0x38>
 8002c14:	250a      	movs	r5, #10
 8002c16:	e7d7      	b.n	8002bc8 <_puts_r+0x3c>
 8002c18:	4622      	mov	r2, r4
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f000 f857 	bl	8002cce <__swbuf_r>
 8002c20:	3001      	adds	r0, #1
 8002c22:	d1e7      	bne.n	8002bf4 <_puts_r+0x68>
 8002c24:	e7ce      	b.n	8002bc4 <_puts_r+0x38>
 8002c26:	3e01      	subs	r6, #1
 8002c28:	e7e4      	b.n	8002bf4 <_puts_r+0x68>
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	6022      	str	r2, [r4, #0]
 8002c30:	220a      	movs	r2, #10
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e7ee      	b.n	8002c14 <_puts_r+0x88>
	...

08002c38 <puts>:
 8002c38:	4b02      	ldr	r3, [pc, #8]	@ (8002c44 <puts+0xc>)
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	f7ff bfa5 	b.w	8002b8c <_puts_r>
 8002c42:	bf00      	nop
 8002c44:	20000018 	.word	0x20000018

08002c48 <__sread>:
 8002c48:	b510      	push	{r4, lr}
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c50:	f000 f8fc 	bl	8002e4c <_read_r>
 8002c54:	2800      	cmp	r0, #0
 8002c56:	bfab      	itete	ge
 8002c58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8002c5c:	181b      	addge	r3, r3, r0
 8002c5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c62:	bfac      	ite	ge
 8002c64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c66:	81a3      	strhlt	r3, [r4, #12]
 8002c68:	bd10      	pop	{r4, pc}

08002c6a <__swrite>:
 8002c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c6e:	461f      	mov	r7, r3
 8002c70:	898b      	ldrh	r3, [r1, #12]
 8002c72:	4605      	mov	r5, r0
 8002c74:	05db      	lsls	r3, r3, #23
 8002c76:	460c      	mov	r4, r1
 8002c78:	4616      	mov	r6, r2
 8002c7a:	d505      	bpl.n	8002c88 <__swrite+0x1e>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c84:	f000 f8d0 	bl	8002e28 <_lseek_r>
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	4632      	mov	r2, r6
 8002c8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c90:	81a3      	strh	r3, [r4, #12]
 8002c92:	4628      	mov	r0, r5
 8002c94:	463b      	mov	r3, r7
 8002c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9e:	f000 b8e7 	b.w	8002e70 <_write_r>

08002ca2 <__sseek>:
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002caa:	f000 f8bd 	bl	8002e28 <_lseek_r>
 8002cae:	1c43      	adds	r3, r0, #1
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	bf15      	itete	ne
 8002cb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002cb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002cba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002cbe:	81a3      	strheq	r3, [r4, #12]
 8002cc0:	bf18      	it	ne
 8002cc2:	81a3      	strhne	r3, [r4, #12]
 8002cc4:	bd10      	pop	{r4, pc}

08002cc6 <__sclose>:
 8002cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cca:	f000 b89d 	b.w	8002e08 <_close_r>

08002cce <__swbuf_r>:
 8002cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd0:	460e      	mov	r6, r1
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	b118      	cbz	r0, 8002ce0 <__swbuf_r+0x12>
 8002cd8:	6a03      	ldr	r3, [r0, #32]
 8002cda:	b90b      	cbnz	r3, 8002ce0 <__swbuf_r+0x12>
 8002cdc:	f7ff ff0e 	bl	8002afc <__sinit>
 8002ce0:	69a3      	ldr	r3, [r4, #24]
 8002ce2:	60a3      	str	r3, [r4, #8]
 8002ce4:	89a3      	ldrh	r3, [r4, #12]
 8002ce6:	071a      	lsls	r2, r3, #28
 8002ce8:	d501      	bpl.n	8002cee <__swbuf_r+0x20>
 8002cea:	6923      	ldr	r3, [r4, #16]
 8002cec:	b943      	cbnz	r3, 8002d00 <__swbuf_r+0x32>
 8002cee:	4621      	mov	r1, r4
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	f000 f82b 	bl	8002d4c <__swsetup_r>
 8002cf6:	b118      	cbz	r0, 8002d00 <__swbuf_r+0x32>
 8002cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	6922      	ldr	r2, [r4, #16]
 8002d04:	b2f6      	uxtb	r6, r6
 8002d06:	1a98      	subs	r0, r3, r2
 8002d08:	6963      	ldr	r3, [r4, #20]
 8002d0a:	4637      	mov	r7, r6
 8002d0c:	4283      	cmp	r3, r0
 8002d0e:	dc05      	bgt.n	8002d1c <__swbuf_r+0x4e>
 8002d10:	4621      	mov	r1, r4
 8002d12:	4628      	mov	r0, r5
 8002d14:	f000 fd32 	bl	800377c <_fflush_r>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d1ed      	bne.n	8002cf8 <__swbuf_r+0x2a>
 8002d1c:	68a3      	ldr	r3, [r4, #8]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	60a3      	str	r3, [r4, #8]
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	6022      	str	r2, [r4, #0]
 8002d28:	701e      	strb	r6, [r3, #0]
 8002d2a:	6962      	ldr	r2, [r4, #20]
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d004      	beq.n	8002d3c <__swbuf_r+0x6e>
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	07db      	lsls	r3, r3, #31
 8002d36:	d5e1      	bpl.n	8002cfc <__swbuf_r+0x2e>
 8002d38:	2e0a      	cmp	r6, #10
 8002d3a:	d1df      	bne.n	8002cfc <__swbuf_r+0x2e>
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f000 fd1c 	bl	800377c <_fflush_r>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d0d9      	beq.n	8002cfc <__swbuf_r+0x2e>
 8002d48:	e7d6      	b.n	8002cf8 <__swbuf_r+0x2a>
	...

08002d4c <__swsetup_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <__swsetup_r+0xa8>)
 8002d50:	4605      	mov	r5, r0
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	460c      	mov	r4, r1
 8002d56:	b118      	cbz	r0, 8002d60 <__swsetup_r+0x14>
 8002d58:	6a03      	ldr	r3, [r0, #32]
 8002d5a:	b90b      	cbnz	r3, 8002d60 <__swsetup_r+0x14>
 8002d5c:	f7ff fece 	bl	8002afc <__sinit>
 8002d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d64:	0719      	lsls	r1, r3, #28
 8002d66:	d422      	bmi.n	8002dae <__swsetup_r+0x62>
 8002d68:	06da      	lsls	r2, r3, #27
 8002d6a:	d407      	bmi.n	8002d7c <__swsetup_r+0x30>
 8002d6c:	2209      	movs	r2, #9
 8002d6e:	602a      	str	r2, [r5, #0]
 8002d70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	81a3      	strh	r3, [r4, #12]
 8002d7a:	e033      	b.n	8002de4 <__swsetup_r+0x98>
 8002d7c:	0758      	lsls	r0, r3, #29
 8002d7e:	d512      	bpl.n	8002da6 <__swsetup_r+0x5a>
 8002d80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d82:	b141      	cbz	r1, 8002d96 <__swsetup_r+0x4a>
 8002d84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d88:	4299      	cmp	r1, r3
 8002d8a:	d002      	beq.n	8002d92 <__swsetup_r+0x46>
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f000 f8af 	bl	8002ef0 <_free_r>
 8002d92:	2300      	movs	r3, #0
 8002d94:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6063      	str	r3, [r4, #4]
 8002da2:	6923      	ldr	r3, [r4, #16]
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	89a3      	ldrh	r3, [r4, #12]
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	6923      	ldr	r3, [r4, #16]
 8002db0:	b94b      	cbnz	r3, 8002dc6 <__swsetup_r+0x7a>
 8002db2:	89a3      	ldrh	r3, [r4, #12]
 8002db4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dbc:	d003      	beq.n	8002dc6 <__swsetup_r+0x7a>
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	f000 fd28 	bl	8003816 <__smakebuf_r>
 8002dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dca:	f013 0201 	ands.w	r2, r3, #1
 8002dce:	d00a      	beq.n	8002de6 <__swsetup_r+0x9a>
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	60a2      	str	r2, [r4, #8]
 8002dd4:	6962      	ldr	r2, [r4, #20]
 8002dd6:	4252      	negs	r2, r2
 8002dd8:	61a2      	str	r2, [r4, #24]
 8002dda:	6922      	ldr	r2, [r4, #16]
 8002ddc:	b942      	cbnz	r2, 8002df0 <__swsetup_r+0xa4>
 8002dde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002de2:	d1c5      	bne.n	8002d70 <__swsetup_r+0x24>
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
 8002de6:	0799      	lsls	r1, r3, #30
 8002de8:	bf58      	it	pl
 8002dea:	6962      	ldrpl	r2, [r4, #20]
 8002dec:	60a2      	str	r2, [r4, #8]
 8002dee:	e7f4      	b.n	8002dda <__swsetup_r+0x8e>
 8002df0:	2000      	movs	r0, #0
 8002df2:	e7f7      	b.n	8002de4 <__swsetup_r+0x98>
 8002df4:	20000018 	.word	0x20000018

08002df8 <memset>:
 8002df8:	4603      	mov	r3, r0
 8002dfa:	4402      	add	r2, r0
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d100      	bne.n	8002e02 <memset+0xa>
 8002e00:	4770      	bx	lr
 8002e02:	f803 1b01 	strb.w	r1, [r3], #1
 8002e06:	e7f9      	b.n	8002dfc <memset+0x4>

08002e08 <_close_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	4d05      	ldr	r5, [pc, #20]	@ (8002e24 <_close_r+0x1c>)
 8002e0e:	4604      	mov	r4, r0
 8002e10:	4608      	mov	r0, r1
 8002e12:	602b      	str	r3, [r5, #0]
 8002e14:	f7fd fe03 	bl	8000a1e <_close>
 8002e18:	1c43      	adds	r3, r0, #1
 8002e1a:	d102      	bne.n	8002e22 <_close_r+0x1a>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b103      	cbz	r3, 8002e22 <_close_r+0x1a>
 8002e20:	6023      	str	r3, [r4, #0]
 8002e22:	bd38      	pop	{r3, r4, r5, pc}
 8002e24:	2000026c 	.word	0x2000026c

08002e28 <_lseek_r>:
 8002e28:	b538      	push	{r3, r4, r5, lr}
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	2200      	movs	r2, #0
 8002e32:	4d05      	ldr	r5, [pc, #20]	@ (8002e48 <_lseek_r+0x20>)
 8002e34:	602a      	str	r2, [r5, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f7fd fe15 	bl	8000a66 <_lseek>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d102      	bne.n	8002e46 <_lseek_r+0x1e>
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	b103      	cbz	r3, 8002e46 <_lseek_r+0x1e>
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	bd38      	pop	{r3, r4, r5, pc}
 8002e48:	2000026c 	.word	0x2000026c

08002e4c <_read_r>:
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4608      	mov	r0, r1
 8002e52:	4611      	mov	r1, r2
 8002e54:	2200      	movs	r2, #0
 8002e56:	4d05      	ldr	r5, [pc, #20]	@ (8002e6c <_read_r+0x20>)
 8002e58:	602a      	str	r2, [r5, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f7fd fda6 	bl	80009ac <_read>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d102      	bne.n	8002e6a <_read_r+0x1e>
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	b103      	cbz	r3, 8002e6a <_read_r+0x1e>
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	2000026c 	.word	0x2000026c

08002e70 <_write_r>:
 8002e70:	b538      	push	{r3, r4, r5, lr}
 8002e72:	4604      	mov	r4, r0
 8002e74:	4608      	mov	r0, r1
 8002e76:	4611      	mov	r1, r2
 8002e78:	2200      	movs	r2, #0
 8002e7a:	4d05      	ldr	r5, [pc, #20]	@ (8002e90 <_write_r+0x20>)
 8002e7c:	602a      	str	r2, [r5, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f7fd fdb1 	bl	80009e6 <_write>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	d102      	bne.n	8002e8e <_write_r+0x1e>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	b103      	cbz	r3, 8002e8e <_write_r+0x1e>
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	bd38      	pop	{r3, r4, r5, pc}
 8002e90:	2000026c 	.word	0x2000026c

08002e94 <__errno>:
 8002e94:	4b01      	ldr	r3, [pc, #4]	@ (8002e9c <__errno+0x8>)
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000018 	.word	0x20000018

08002ea0 <__libc_init_array>:
 8002ea0:	b570      	push	{r4, r5, r6, lr}
 8002ea2:	2600      	movs	r6, #0
 8002ea4:	4d0c      	ldr	r5, [pc, #48]	@ (8002ed8 <__libc_init_array+0x38>)
 8002ea6:	4c0d      	ldr	r4, [pc, #52]	@ (8002edc <__libc_init_array+0x3c>)
 8002ea8:	1b64      	subs	r4, r4, r5
 8002eaa:	10a4      	asrs	r4, r4, #2
 8002eac:	42a6      	cmp	r6, r4
 8002eae:	d109      	bne.n	8002ec4 <__libc_init_array+0x24>
 8002eb0:	f000 fd2e 	bl	8003910 <_init>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	4d0a      	ldr	r5, [pc, #40]	@ (8002ee0 <__libc_init_array+0x40>)
 8002eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ee4 <__libc_init_array+0x44>)
 8002eba:	1b64      	subs	r4, r4, r5
 8002ebc:	10a4      	asrs	r4, r4, #2
 8002ebe:	42a6      	cmp	r6, r4
 8002ec0:	d105      	bne.n	8002ece <__libc_init_array+0x2e>
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
 8002ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec8:	4798      	blx	r3
 8002eca:	3601      	adds	r6, #1
 8002ecc:	e7ee      	b.n	8002eac <__libc_init_array+0xc>
 8002ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed2:	4798      	blx	r3
 8002ed4:	3601      	adds	r6, #1
 8002ed6:	e7f2      	b.n	8002ebe <__libc_init_array+0x1e>
 8002ed8:	08003a08 	.word	0x08003a08
 8002edc:	08003a08 	.word	0x08003a08
 8002ee0:	08003a08 	.word	0x08003a08
 8002ee4:	08003a0c 	.word	0x08003a0c

08002ee8 <__retarget_lock_init_recursive>:
 8002ee8:	4770      	bx	lr

08002eea <__retarget_lock_acquire_recursive>:
 8002eea:	4770      	bx	lr

08002eec <__retarget_lock_release_recursive>:
 8002eec:	4770      	bx	lr
	...

08002ef0 <_free_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4605      	mov	r5, r0
 8002ef4:	2900      	cmp	r1, #0
 8002ef6:	d040      	beq.n	8002f7a <_free_r+0x8a>
 8002ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002efc:	1f0c      	subs	r4, r1, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bfb8      	it	lt
 8002f02:	18e4      	addlt	r4, r4, r3
 8002f04:	f000 f8de 	bl	80030c4 <__malloc_lock>
 8002f08:	4a1c      	ldr	r2, [pc, #112]	@ (8002f7c <_free_r+0x8c>)
 8002f0a:	6813      	ldr	r3, [r2, #0]
 8002f0c:	b933      	cbnz	r3, 8002f1c <_free_r+0x2c>
 8002f0e:	6063      	str	r3, [r4, #4]
 8002f10:	6014      	str	r4, [r2, #0]
 8002f12:	4628      	mov	r0, r5
 8002f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f18:	f000 b8da 	b.w	80030d0 <__malloc_unlock>
 8002f1c:	42a3      	cmp	r3, r4
 8002f1e:	d908      	bls.n	8002f32 <_free_r+0x42>
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	1821      	adds	r1, r4, r0
 8002f24:	428b      	cmp	r3, r1
 8002f26:	bf01      	itttt	eq
 8002f28:	6819      	ldreq	r1, [r3, #0]
 8002f2a:	685b      	ldreq	r3, [r3, #4]
 8002f2c:	1809      	addeq	r1, r1, r0
 8002f2e:	6021      	streq	r1, [r4, #0]
 8002f30:	e7ed      	b.n	8002f0e <_free_r+0x1e>
 8002f32:	461a      	mov	r2, r3
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	b10b      	cbz	r3, 8002f3c <_free_r+0x4c>
 8002f38:	42a3      	cmp	r3, r4
 8002f3a:	d9fa      	bls.n	8002f32 <_free_r+0x42>
 8002f3c:	6811      	ldr	r1, [r2, #0]
 8002f3e:	1850      	adds	r0, r2, r1
 8002f40:	42a0      	cmp	r0, r4
 8002f42:	d10b      	bne.n	8002f5c <_free_r+0x6c>
 8002f44:	6820      	ldr	r0, [r4, #0]
 8002f46:	4401      	add	r1, r0
 8002f48:	1850      	adds	r0, r2, r1
 8002f4a:	4283      	cmp	r3, r0
 8002f4c:	6011      	str	r1, [r2, #0]
 8002f4e:	d1e0      	bne.n	8002f12 <_free_r+0x22>
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4408      	add	r0, r1
 8002f56:	6010      	str	r0, [r2, #0]
 8002f58:	6053      	str	r3, [r2, #4]
 8002f5a:	e7da      	b.n	8002f12 <_free_r+0x22>
 8002f5c:	d902      	bls.n	8002f64 <_free_r+0x74>
 8002f5e:	230c      	movs	r3, #12
 8002f60:	602b      	str	r3, [r5, #0]
 8002f62:	e7d6      	b.n	8002f12 <_free_r+0x22>
 8002f64:	6820      	ldr	r0, [r4, #0]
 8002f66:	1821      	adds	r1, r4, r0
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	bf01      	itttt	eq
 8002f6c:	6819      	ldreq	r1, [r3, #0]
 8002f6e:	685b      	ldreq	r3, [r3, #4]
 8002f70:	1809      	addeq	r1, r1, r0
 8002f72:	6021      	streq	r1, [r4, #0]
 8002f74:	6063      	str	r3, [r4, #4]
 8002f76:	6054      	str	r4, [r2, #4]
 8002f78:	e7cb      	b.n	8002f12 <_free_r+0x22>
 8002f7a:	bd38      	pop	{r3, r4, r5, pc}
 8002f7c:	20000278 	.word	0x20000278

08002f80 <sbrk_aligned>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	4e0f      	ldr	r6, [pc, #60]	@ (8002fc0 <sbrk_aligned+0x40>)
 8002f84:	460c      	mov	r4, r1
 8002f86:	6831      	ldr	r1, [r6, #0]
 8002f88:	4605      	mov	r5, r0
 8002f8a:	b911      	cbnz	r1, 8002f92 <sbrk_aligned+0x12>
 8002f8c:	f000 fca2 	bl	80038d4 <_sbrk_r>
 8002f90:	6030      	str	r0, [r6, #0]
 8002f92:	4621      	mov	r1, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 fc9d 	bl	80038d4 <_sbrk_r>
 8002f9a:	1c43      	adds	r3, r0, #1
 8002f9c:	d103      	bne.n	8002fa6 <sbrk_aligned+0x26>
 8002f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	bd70      	pop	{r4, r5, r6, pc}
 8002fa6:	1cc4      	adds	r4, r0, #3
 8002fa8:	f024 0403 	bic.w	r4, r4, #3
 8002fac:	42a0      	cmp	r0, r4
 8002fae:	d0f8      	beq.n	8002fa2 <sbrk_aligned+0x22>
 8002fb0:	1a21      	subs	r1, r4, r0
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f000 fc8e 	bl	80038d4 <_sbrk_r>
 8002fb8:	3001      	adds	r0, #1
 8002fba:	d1f2      	bne.n	8002fa2 <sbrk_aligned+0x22>
 8002fbc:	e7ef      	b.n	8002f9e <sbrk_aligned+0x1e>
 8002fbe:	bf00      	nop
 8002fc0:	20000274 	.word	0x20000274

08002fc4 <_malloc_r>:
 8002fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	1ccd      	adds	r5, r1, #3
 8002fca:	f025 0503 	bic.w	r5, r5, #3
 8002fce:	3508      	adds	r5, #8
 8002fd0:	2d0c      	cmp	r5, #12
 8002fd2:	bf38      	it	cc
 8002fd4:	250c      	movcc	r5, #12
 8002fd6:	2d00      	cmp	r5, #0
 8002fd8:	4606      	mov	r6, r0
 8002fda:	db01      	blt.n	8002fe0 <_malloc_r+0x1c>
 8002fdc:	42a9      	cmp	r1, r5
 8002fde:	d904      	bls.n	8002fea <_malloc_r+0x26>
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	6033      	str	r3, [r6, #0]
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030c0 <_malloc_r+0xfc>
 8002fee:	f000 f869 	bl	80030c4 <__malloc_lock>
 8002ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff6:	461c      	mov	r4, r3
 8002ff8:	bb44      	cbnz	r4, 800304c <_malloc_r+0x88>
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	f7ff ffbf 	bl	8002f80 <sbrk_aligned>
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	4604      	mov	r4, r0
 8003006:	d158      	bne.n	80030ba <_malloc_r+0xf6>
 8003008:	f8d8 4000 	ldr.w	r4, [r8]
 800300c:	4627      	mov	r7, r4
 800300e:	2f00      	cmp	r7, #0
 8003010:	d143      	bne.n	800309a <_malloc_r+0xd6>
 8003012:	2c00      	cmp	r4, #0
 8003014:	d04b      	beq.n	80030ae <_malloc_r+0xea>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	4639      	mov	r1, r7
 800301a:	4630      	mov	r0, r6
 800301c:	eb04 0903 	add.w	r9, r4, r3
 8003020:	f000 fc58 	bl	80038d4 <_sbrk_r>
 8003024:	4581      	cmp	r9, r0
 8003026:	d142      	bne.n	80030ae <_malloc_r+0xea>
 8003028:	6821      	ldr	r1, [r4, #0]
 800302a:	4630      	mov	r0, r6
 800302c:	1a6d      	subs	r5, r5, r1
 800302e:	4629      	mov	r1, r5
 8003030:	f7ff ffa6 	bl	8002f80 <sbrk_aligned>
 8003034:	3001      	adds	r0, #1
 8003036:	d03a      	beq.n	80030ae <_malloc_r+0xea>
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	442b      	add	r3, r5
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	f8d8 3000 	ldr.w	r3, [r8]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	bb62      	cbnz	r2, 80030a0 <_malloc_r+0xdc>
 8003046:	f8c8 7000 	str.w	r7, [r8]
 800304a:	e00f      	b.n	800306c <_malloc_r+0xa8>
 800304c:	6822      	ldr	r2, [r4, #0]
 800304e:	1b52      	subs	r2, r2, r5
 8003050:	d420      	bmi.n	8003094 <_malloc_r+0xd0>
 8003052:	2a0b      	cmp	r2, #11
 8003054:	d917      	bls.n	8003086 <_malloc_r+0xc2>
 8003056:	1961      	adds	r1, r4, r5
 8003058:	42a3      	cmp	r3, r4
 800305a:	6025      	str	r5, [r4, #0]
 800305c:	bf18      	it	ne
 800305e:	6059      	strne	r1, [r3, #4]
 8003060:	6863      	ldr	r3, [r4, #4]
 8003062:	bf08      	it	eq
 8003064:	f8c8 1000 	streq.w	r1, [r8]
 8003068:	5162      	str	r2, [r4, r5]
 800306a:	604b      	str	r3, [r1, #4]
 800306c:	4630      	mov	r0, r6
 800306e:	f000 f82f 	bl	80030d0 <__malloc_unlock>
 8003072:	f104 000b 	add.w	r0, r4, #11
 8003076:	1d23      	adds	r3, r4, #4
 8003078:	f020 0007 	bic.w	r0, r0, #7
 800307c:	1ac2      	subs	r2, r0, r3
 800307e:	bf1c      	itt	ne
 8003080:	1a1b      	subne	r3, r3, r0
 8003082:	50a3      	strne	r3, [r4, r2]
 8003084:	e7af      	b.n	8002fe6 <_malloc_r+0x22>
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	42a3      	cmp	r3, r4
 800308a:	bf0c      	ite	eq
 800308c:	f8c8 2000 	streq.w	r2, [r8]
 8003090:	605a      	strne	r2, [r3, #4]
 8003092:	e7eb      	b.n	800306c <_malloc_r+0xa8>
 8003094:	4623      	mov	r3, r4
 8003096:	6864      	ldr	r4, [r4, #4]
 8003098:	e7ae      	b.n	8002ff8 <_malloc_r+0x34>
 800309a:	463c      	mov	r4, r7
 800309c:	687f      	ldr	r7, [r7, #4]
 800309e:	e7b6      	b.n	800300e <_malloc_r+0x4a>
 80030a0:	461a      	mov	r2, r3
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d1fb      	bne.n	80030a0 <_malloc_r+0xdc>
 80030a8:	2300      	movs	r3, #0
 80030aa:	6053      	str	r3, [r2, #4]
 80030ac:	e7de      	b.n	800306c <_malloc_r+0xa8>
 80030ae:	230c      	movs	r3, #12
 80030b0:	4630      	mov	r0, r6
 80030b2:	6033      	str	r3, [r6, #0]
 80030b4:	f000 f80c 	bl	80030d0 <__malloc_unlock>
 80030b8:	e794      	b.n	8002fe4 <_malloc_r+0x20>
 80030ba:	6005      	str	r5, [r0, #0]
 80030bc:	e7d6      	b.n	800306c <_malloc_r+0xa8>
 80030be:	bf00      	nop
 80030c0:	20000278 	.word	0x20000278

080030c4 <__malloc_lock>:
 80030c4:	4801      	ldr	r0, [pc, #4]	@ (80030cc <__malloc_lock+0x8>)
 80030c6:	f7ff bf10 	b.w	8002eea <__retarget_lock_acquire_recursive>
 80030ca:	bf00      	nop
 80030cc:	20000270 	.word	0x20000270

080030d0 <__malloc_unlock>:
 80030d0:	4801      	ldr	r0, [pc, #4]	@ (80030d8 <__malloc_unlock+0x8>)
 80030d2:	f7ff bf0b 	b.w	8002eec <__retarget_lock_release_recursive>
 80030d6:	bf00      	nop
 80030d8:	20000270 	.word	0x20000270

080030dc <__sfputc_r>:
 80030dc:	6893      	ldr	r3, [r2, #8]
 80030de:	b410      	push	{r4}
 80030e0:	3b01      	subs	r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	6093      	str	r3, [r2, #8]
 80030e6:	da07      	bge.n	80030f8 <__sfputc_r+0x1c>
 80030e8:	6994      	ldr	r4, [r2, #24]
 80030ea:	42a3      	cmp	r3, r4
 80030ec:	db01      	blt.n	80030f2 <__sfputc_r+0x16>
 80030ee:	290a      	cmp	r1, #10
 80030f0:	d102      	bne.n	80030f8 <__sfputc_r+0x1c>
 80030f2:	bc10      	pop	{r4}
 80030f4:	f7ff bdeb 	b.w	8002cce <__swbuf_r>
 80030f8:	6813      	ldr	r3, [r2, #0]
 80030fa:	1c58      	adds	r0, r3, #1
 80030fc:	6010      	str	r0, [r2, #0]
 80030fe:	7019      	strb	r1, [r3, #0]
 8003100:	4608      	mov	r0, r1
 8003102:	bc10      	pop	{r4}
 8003104:	4770      	bx	lr

08003106 <__sfputs_r>:
 8003106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003108:	4606      	mov	r6, r0
 800310a:	460f      	mov	r7, r1
 800310c:	4614      	mov	r4, r2
 800310e:	18d5      	adds	r5, r2, r3
 8003110:	42ac      	cmp	r4, r5
 8003112:	d101      	bne.n	8003118 <__sfputs_r+0x12>
 8003114:	2000      	movs	r0, #0
 8003116:	e007      	b.n	8003128 <__sfputs_r+0x22>
 8003118:	463a      	mov	r2, r7
 800311a:	4630      	mov	r0, r6
 800311c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003120:	f7ff ffdc 	bl	80030dc <__sfputc_r>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	d1f3      	bne.n	8003110 <__sfputs_r+0xa>
 8003128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800312c <_vfiprintf_r>:
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003130:	460d      	mov	r5, r1
 8003132:	4614      	mov	r4, r2
 8003134:	4698      	mov	r8, r3
 8003136:	4606      	mov	r6, r0
 8003138:	b09d      	sub	sp, #116	@ 0x74
 800313a:	b118      	cbz	r0, 8003144 <_vfiprintf_r+0x18>
 800313c:	6a03      	ldr	r3, [r0, #32]
 800313e:	b90b      	cbnz	r3, 8003144 <_vfiprintf_r+0x18>
 8003140:	f7ff fcdc 	bl	8002afc <__sinit>
 8003144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003146:	07d9      	lsls	r1, r3, #31
 8003148:	d405      	bmi.n	8003156 <_vfiprintf_r+0x2a>
 800314a:	89ab      	ldrh	r3, [r5, #12]
 800314c:	059a      	lsls	r2, r3, #22
 800314e:	d402      	bmi.n	8003156 <_vfiprintf_r+0x2a>
 8003150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003152:	f7ff feca 	bl	8002eea <__retarget_lock_acquire_recursive>
 8003156:	89ab      	ldrh	r3, [r5, #12]
 8003158:	071b      	lsls	r3, r3, #28
 800315a:	d501      	bpl.n	8003160 <_vfiprintf_r+0x34>
 800315c:	692b      	ldr	r3, [r5, #16]
 800315e:	b99b      	cbnz	r3, 8003188 <_vfiprintf_r+0x5c>
 8003160:	4629      	mov	r1, r5
 8003162:	4630      	mov	r0, r6
 8003164:	f7ff fdf2 	bl	8002d4c <__swsetup_r>
 8003168:	b170      	cbz	r0, 8003188 <_vfiprintf_r+0x5c>
 800316a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800316c:	07dc      	lsls	r4, r3, #31
 800316e:	d504      	bpl.n	800317a <_vfiprintf_r+0x4e>
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	b01d      	add	sp, #116	@ 0x74
 8003176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800317a:	89ab      	ldrh	r3, [r5, #12]
 800317c:	0598      	lsls	r0, r3, #22
 800317e:	d4f7      	bmi.n	8003170 <_vfiprintf_r+0x44>
 8003180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003182:	f7ff feb3 	bl	8002eec <__retarget_lock_release_recursive>
 8003186:	e7f3      	b.n	8003170 <_vfiprintf_r+0x44>
 8003188:	2300      	movs	r3, #0
 800318a:	9309      	str	r3, [sp, #36]	@ 0x24
 800318c:	2320      	movs	r3, #32
 800318e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003192:	2330      	movs	r3, #48	@ 0x30
 8003194:	f04f 0901 	mov.w	r9, #1
 8003198:	f8cd 800c 	str.w	r8, [sp, #12]
 800319c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003348 <_vfiprintf_r+0x21c>
 80031a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031a4:	4623      	mov	r3, r4
 80031a6:	469a      	mov	sl, r3
 80031a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031ac:	b10a      	cbz	r2, 80031b2 <_vfiprintf_r+0x86>
 80031ae:	2a25      	cmp	r2, #37	@ 0x25
 80031b0:	d1f9      	bne.n	80031a6 <_vfiprintf_r+0x7a>
 80031b2:	ebba 0b04 	subs.w	fp, sl, r4
 80031b6:	d00b      	beq.n	80031d0 <_vfiprintf_r+0xa4>
 80031b8:	465b      	mov	r3, fp
 80031ba:	4622      	mov	r2, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	4630      	mov	r0, r6
 80031c0:	f7ff ffa1 	bl	8003106 <__sfputs_r>
 80031c4:	3001      	adds	r0, #1
 80031c6:	f000 80a7 	beq.w	8003318 <_vfiprintf_r+0x1ec>
 80031ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031cc:	445a      	add	r2, fp
 80031ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80031d0:	f89a 3000 	ldrb.w	r3, [sl]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 809f 	beq.w	8003318 <_vfiprintf_r+0x1ec>
 80031da:	2300      	movs	r3, #0
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295
 80031e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031e4:	f10a 0a01 	add.w	sl, sl, #1
 80031e8:	9304      	str	r3, [sp, #16]
 80031ea:	9307      	str	r3, [sp, #28]
 80031ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80031f2:	4654      	mov	r4, sl
 80031f4:	2205      	movs	r2, #5
 80031f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031fa:	4853      	ldr	r0, [pc, #332]	@ (8003348 <_vfiprintf_r+0x21c>)
 80031fc:	f000 fb7a 	bl	80038f4 <memchr>
 8003200:	9a04      	ldr	r2, [sp, #16]
 8003202:	b9d8      	cbnz	r0, 800323c <_vfiprintf_r+0x110>
 8003204:	06d1      	lsls	r1, r2, #27
 8003206:	bf44      	itt	mi
 8003208:	2320      	movmi	r3, #32
 800320a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800320e:	0713      	lsls	r3, r2, #28
 8003210:	bf44      	itt	mi
 8003212:	232b      	movmi	r3, #43	@ 0x2b
 8003214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003218:	f89a 3000 	ldrb.w	r3, [sl]
 800321c:	2b2a      	cmp	r3, #42	@ 0x2a
 800321e:	d015      	beq.n	800324c <_vfiprintf_r+0x120>
 8003220:	4654      	mov	r4, sl
 8003222:	2000      	movs	r0, #0
 8003224:	f04f 0c0a 	mov.w	ip, #10
 8003228:	9a07      	ldr	r2, [sp, #28]
 800322a:	4621      	mov	r1, r4
 800322c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003230:	3b30      	subs	r3, #48	@ 0x30
 8003232:	2b09      	cmp	r3, #9
 8003234:	d94b      	bls.n	80032ce <_vfiprintf_r+0x1a2>
 8003236:	b1b0      	cbz	r0, 8003266 <_vfiprintf_r+0x13a>
 8003238:	9207      	str	r2, [sp, #28]
 800323a:	e014      	b.n	8003266 <_vfiprintf_r+0x13a>
 800323c:	eba0 0308 	sub.w	r3, r0, r8
 8003240:	fa09 f303 	lsl.w	r3, r9, r3
 8003244:	4313      	orrs	r3, r2
 8003246:	46a2      	mov	sl, r4
 8003248:	9304      	str	r3, [sp, #16]
 800324a:	e7d2      	b.n	80031f2 <_vfiprintf_r+0xc6>
 800324c:	9b03      	ldr	r3, [sp, #12]
 800324e:	1d19      	adds	r1, r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	9103      	str	r1, [sp, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	bfbb      	ittet	lt
 8003258:	425b      	neglt	r3, r3
 800325a:	f042 0202 	orrlt.w	r2, r2, #2
 800325e:	9307      	strge	r3, [sp, #28]
 8003260:	9307      	strlt	r3, [sp, #28]
 8003262:	bfb8      	it	lt
 8003264:	9204      	strlt	r2, [sp, #16]
 8003266:	7823      	ldrb	r3, [r4, #0]
 8003268:	2b2e      	cmp	r3, #46	@ 0x2e
 800326a:	d10a      	bne.n	8003282 <_vfiprintf_r+0x156>
 800326c:	7863      	ldrb	r3, [r4, #1]
 800326e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003270:	d132      	bne.n	80032d8 <_vfiprintf_r+0x1ac>
 8003272:	9b03      	ldr	r3, [sp, #12]
 8003274:	3402      	adds	r4, #2
 8003276:	1d1a      	adds	r2, r3, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	9203      	str	r2, [sp, #12]
 800327c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003280:	9305      	str	r3, [sp, #20]
 8003282:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800334c <_vfiprintf_r+0x220>
 8003286:	2203      	movs	r2, #3
 8003288:	4650      	mov	r0, sl
 800328a:	7821      	ldrb	r1, [r4, #0]
 800328c:	f000 fb32 	bl	80038f4 <memchr>
 8003290:	b138      	cbz	r0, 80032a2 <_vfiprintf_r+0x176>
 8003292:	2240      	movs	r2, #64	@ 0x40
 8003294:	9b04      	ldr	r3, [sp, #16]
 8003296:	eba0 000a 	sub.w	r0, r0, sl
 800329a:	4082      	lsls	r2, r0
 800329c:	4313      	orrs	r3, r2
 800329e:	3401      	adds	r4, #1
 80032a0:	9304      	str	r3, [sp, #16]
 80032a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a6:	2206      	movs	r2, #6
 80032a8:	4829      	ldr	r0, [pc, #164]	@ (8003350 <_vfiprintf_r+0x224>)
 80032aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032ae:	f000 fb21 	bl	80038f4 <memchr>
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d03f      	beq.n	8003336 <_vfiprintf_r+0x20a>
 80032b6:	4b27      	ldr	r3, [pc, #156]	@ (8003354 <_vfiprintf_r+0x228>)
 80032b8:	bb1b      	cbnz	r3, 8003302 <_vfiprintf_r+0x1d6>
 80032ba:	9b03      	ldr	r3, [sp, #12]
 80032bc:	3307      	adds	r3, #7
 80032be:	f023 0307 	bic.w	r3, r3, #7
 80032c2:	3308      	adds	r3, #8
 80032c4:	9303      	str	r3, [sp, #12]
 80032c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032c8:	443b      	add	r3, r7
 80032ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80032cc:	e76a      	b.n	80031a4 <_vfiprintf_r+0x78>
 80032ce:	460c      	mov	r4, r1
 80032d0:	2001      	movs	r0, #1
 80032d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80032d6:	e7a8      	b.n	800322a <_vfiprintf_r+0xfe>
 80032d8:	2300      	movs	r3, #0
 80032da:	f04f 0c0a 	mov.w	ip, #10
 80032de:	4619      	mov	r1, r3
 80032e0:	3401      	adds	r4, #1
 80032e2:	9305      	str	r3, [sp, #20]
 80032e4:	4620      	mov	r0, r4
 80032e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032ea:	3a30      	subs	r2, #48	@ 0x30
 80032ec:	2a09      	cmp	r2, #9
 80032ee:	d903      	bls.n	80032f8 <_vfiprintf_r+0x1cc>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0c6      	beq.n	8003282 <_vfiprintf_r+0x156>
 80032f4:	9105      	str	r1, [sp, #20]
 80032f6:	e7c4      	b.n	8003282 <_vfiprintf_r+0x156>
 80032f8:	4604      	mov	r4, r0
 80032fa:	2301      	movs	r3, #1
 80032fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003300:	e7f0      	b.n	80032e4 <_vfiprintf_r+0x1b8>
 8003302:	ab03      	add	r3, sp, #12
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	462a      	mov	r2, r5
 8003308:	4630      	mov	r0, r6
 800330a:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <_vfiprintf_r+0x22c>)
 800330c:	a904      	add	r1, sp, #16
 800330e:	f3af 8000 	nop.w
 8003312:	4607      	mov	r7, r0
 8003314:	1c78      	adds	r0, r7, #1
 8003316:	d1d6      	bne.n	80032c6 <_vfiprintf_r+0x19a>
 8003318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800331a:	07d9      	lsls	r1, r3, #31
 800331c:	d405      	bmi.n	800332a <_vfiprintf_r+0x1fe>
 800331e:	89ab      	ldrh	r3, [r5, #12]
 8003320:	059a      	lsls	r2, r3, #22
 8003322:	d402      	bmi.n	800332a <_vfiprintf_r+0x1fe>
 8003324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003326:	f7ff fde1 	bl	8002eec <__retarget_lock_release_recursive>
 800332a:	89ab      	ldrh	r3, [r5, #12]
 800332c:	065b      	lsls	r3, r3, #25
 800332e:	f53f af1f 	bmi.w	8003170 <_vfiprintf_r+0x44>
 8003332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003334:	e71e      	b.n	8003174 <_vfiprintf_r+0x48>
 8003336:	ab03      	add	r3, sp, #12
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	462a      	mov	r2, r5
 800333c:	4630      	mov	r0, r6
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <_vfiprintf_r+0x22c>)
 8003340:	a904      	add	r1, sp, #16
 8003342:	f000 f87d 	bl	8003440 <_printf_i>
 8003346:	e7e4      	b.n	8003312 <_vfiprintf_r+0x1e6>
 8003348:	080039d2 	.word	0x080039d2
 800334c:	080039d8 	.word	0x080039d8
 8003350:	080039dc 	.word	0x080039dc
 8003354:	00000000 	.word	0x00000000
 8003358:	08003107 	.word	0x08003107

0800335c <_printf_common>:
 800335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003360:	4616      	mov	r6, r2
 8003362:	4698      	mov	r8, r3
 8003364:	688a      	ldr	r2, [r1, #8]
 8003366:	690b      	ldr	r3, [r1, #16]
 8003368:	4607      	mov	r7, r0
 800336a:	4293      	cmp	r3, r2
 800336c:	bfb8      	it	lt
 800336e:	4613      	movlt	r3, r2
 8003370:	6033      	str	r3, [r6, #0]
 8003372:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003376:	460c      	mov	r4, r1
 8003378:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800337c:	b10a      	cbz	r2, 8003382 <_printf_common+0x26>
 800337e:	3301      	adds	r3, #1
 8003380:	6033      	str	r3, [r6, #0]
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	0699      	lsls	r1, r3, #26
 8003386:	bf42      	ittt	mi
 8003388:	6833      	ldrmi	r3, [r6, #0]
 800338a:	3302      	addmi	r3, #2
 800338c:	6033      	strmi	r3, [r6, #0]
 800338e:	6825      	ldr	r5, [r4, #0]
 8003390:	f015 0506 	ands.w	r5, r5, #6
 8003394:	d106      	bne.n	80033a4 <_printf_common+0x48>
 8003396:	f104 0a19 	add.w	sl, r4, #25
 800339a:	68e3      	ldr	r3, [r4, #12]
 800339c:	6832      	ldr	r2, [r6, #0]
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	42ab      	cmp	r3, r5
 80033a2:	dc2b      	bgt.n	80033fc <_printf_common+0xa0>
 80033a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	3b00      	subs	r3, #0
 80033ac:	bf18      	it	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	0692      	lsls	r2, r2, #26
 80033b2:	d430      	bmi.n	8003416 <_printf_common+0xba>
 80033b4:	4641      	mov	r1, r8
 80033b6:	4638      	mov	r0, r7
 80033b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033bc:	47c8      	blx	r9
 80033be:	3001      	adds	r0, #1
 80033c0:	d023      	beq.n	800340a <_printf_common+0xae>
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	6922      	ldr	r2, [r4, #16]
 80033c6:	f003 0306 	and.w	r3, r3, #6
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf14      	ite	ne
 80033ce:	2500      	movne	r5, #0
 80033d0:	6833      	ldreq	r3, [r6, #0]
 80033d2:	f04f 0600 	mov.w	r6, #0
 80033d6:	bf08      	it	eq
 80033d8:	68e5      	ldreq	r5, [r4, #12]
 80033da:	f104 041a 	add.w	r4, r4, #26
 80033de:	bf08      	it	eq
 80033e0:	1aed      	subeq	r5, r5, r3
 80033e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033e6:	bf08      	it	eq
 80033e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bfc4      	itt	gt
 80033f0:	1a9b      	subgt	r3, r3, r2
 80033f2:	18ed      	addgt	r5, r5, r3
 80033f4:	42b5      	cmp	r5, r6
 80033f6:	d11a      	bne.n	800342e <_printf_common+0xd2>
 80033f8:	2000      	movs	r0, #0
 80033fa:	e008      	b.n	800340e <_printf_common+0xb2>
 80033fc:	2301      	movs	r3, #1
 80033fe:	4652      	mov	r2, sl
 8003400:	4641      	mov	r1, r8
 8003402:	4638      	mov	r0, r7
 8003404:	47c8      	blx	r9
 8003406:	3001      	adds	r0, #1
 8003408:	d103      	bne.n	8003412 <_printf_common+0xb6>
 800340a:	f04f 30ff 	mov.w	r0, #4294967295
 800340e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003412:	3501      	adds	r5, #1
 8003414:	e7c1      	b.n	800339a <_printf_common+0x3e>
 8003416:	2030      	movs	r0, #48	@ 0x30
 8003418:	18e1      	adds	r1, r4, r3
 800341a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003424:	4422      	add	r2, r4
 8003426:	3302      	adds	r3, #2
 8003428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800342c:	e7c2      	b.n	80033b4 <_printf_common+0x58>
 800342e:	2301      	movs	r3, #1
 8003430:	4622      	mov	r2, r4
 8003432:	4641      	mov	r1, r8
 8003434:	4638      	mov	r0, r7
 8003436:	47c8      	blx	r9
 8003438:	3001      	adds	r0, #1
 800343a:	d0e6      	beq.n	800340a <_printf_common+0xae>
 800343c:	3601      	adds	r6, #1
 800343e:	e7d9      	b.n	80033f4 <_printf_common+0x98>

08003440 <_printf_i>:
 8003440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003444:	7e0f      	ldrb	r7, [r1, #24]
 8003446:	4691      	mov	r9, r2
 8003448:	2f78      	cmp	r7, #120	@ 0x78
 800344a:	4680      	mov	r8, r0
 800344c:	460c      	mov	r4, r1
 800344e:	469a      	mov	sl, r3
 8003450:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003456:	d807      	bhi.n	8003468 <_printf_i+0x28>
 8003458:	2f62      	cmp	r7, #98	@ 0x62
 800345a:	d80a      	bhi.n	8003472 <_printf_i+0x32>
 800345c:	2f00      	cmp	r7, #0
 800345e:	f000 80d1 	beq.w	8003604 <_printf_i+0x1c4>
 8003462:	2f58      	cmp	r7, #88	@ 0x58
 8003464:	f000 80b8 	beq.w	80035d8 <_printf_i+0x198>
 8003468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800346c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003470:	e03a      	b.n	80034e8 <_printf_i+0xa8>
 8003472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003476:	2b15      	cmp	r3, #21
 8003478:	d8f6      	bhi.n	8003468 <_printf_i+0x28>
 800347a:	a101      	add	r1, pc, #4	@ (adr r1, 8003480 <_printf_i+0x40>)
 800347c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003480:	080034d9 	.word	0x080034d9
 8003484:	080034ed 	.word	0x080034ed
 8003488:	08003469 	.word	0x08003469
 800348c:	08003469 	.word	0x08003469
 8003490:	08003469 	.word	0x08003469
 8003494:	08003469 	.word	0x08003469
 8003498:	080034ed 	.word	0x080034ed
 800349c:	08003469 	.word	0x08003469
 80034a0:	08003469 	.word	0x08003469
 80034a4:	08003469 	.word	0x08003469
 80034a8:	08003469 	.word	0x08003469
 80034ac:	080035eb 	.word	0x080035eb
 80034b0:	08003517 	.word	0x08003517
 80034b4:	080035a5 	.word	0x080035a5
 80034b8:	08003469 	.word	0x08003469
 80034bc:	08003469 	.word	0x08003469
 80034c0:	0800360d 	.word	0x0800360d
 80034c4:	08003469 	.word	0x08003469
 80034c8:	08003517 	.word	0x08003517
 80034cc:	08003469 	.word	0x08003469
 80034d0:	08003469 	.word	0x08003469
 80034d4:	080035ad 	.word	0x080035ad
 80034d8:	6833      	ldr	r3, [r6, #0]
 80034da:	1d1a      	adds	r2, r3, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6032      	str	r2, [r6, #0]
 80034e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034e8:	2301      	movs	r3, #1
 80034ea:	e09c      	b.n	8003626 <_printf_i+0x1e6>
 80034ec:	6833      	ldr	r3, [r6, #0]
 80034ee:	6820      	ldr	r0, [r4, #0]
 80034f0:	1d19      	adds	r1, r3, #4
 80034f2:	6031      	str	r1, [r6, #0]
 80034f4:	0606      	lsls	r6, r0, #24
 80034f6:	d501      	bpl.n	80034fc <_printf_i+0xbc>
 80034f8:	681d      	ldr	r5, [r3, #0]
 80034fa:	e003      	b.n	8003504 <_printf_i+0xc4>
 80034fc:	0645      	lsls	r5, r0, #25
 80034fe:	d5fb      	bpl.n	80034f8 <_printf_i+0xb8>
 8003500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003504:	2d00      	cmp	r5, #0
 8003506:	da03      	bge.n	8003510 <_printf_i+0xd0>
 8003508:	232d      	movs	r3, #45	@ 0x2d
 800350a:	426d      	negs	r5, r5
 800350c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003510:	230a      	movs	r3, #10
 8003512:	4858      	ldr	r0, [pc, #352]	@ (8003674 <_printf_i+0x234>)
 8003514:	e011      	b.n	800353a <_printf_i+0xfa>
 8003516:	6821      	ldr	r1, [r4, #0]
 8003518:	6833      	ldr	r3, [r6, #0]
 800351a:	0608      	lsls	r0, r1, #24
 800351c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003520:	d402      	bmi.n	8003528 <_printf_i+0xe8>
 8003522:	0649      	lsls	r1, r1, #25
 8003524:	bf48      	it	mi
 8003526:	b2ad      	uxthmi	r5, r5
 8003528:	2f6f      	cmp	r7, #111	@ 0x6f
 800352a:	6033      	str	r3, [r6, #0]
 800352c:	bf14      	ite	ne
 800352e:	230a      	movne	r3, #10
 8003530:	2308      	moveq	r3, #8
 8003532:	4850      	ldr	r0, [pc, #320]	@ (8003674 <_printf_i+0x234>)
 8003534:	2100      	movs	r1, #0
 8003536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800353a:	6866      	ldr	r6, [r4, #4]
 800353c:	2e00      	cmp	r6, #0
 800353e:	60a6      	str	r6, [r4, #8]
 8003540:	db05      	blt.n	800354e <_printf_i+0x10e>
 8003542:	6821      	ldr	r1, [r4, #0]
 8003544:	432e      	orrs	r6, r5
 8003546:	f021 0104 	bic.w	r1, r1, #4
 800354a:	6021      	str	r1, [r4, #0]
 800354c:	d04b      	beq.n	80035e6 <_printf_i+0x1a6>
 800354e:	4616      	mov	r6, r2
 8003550:	fbb5 f1f3 	udiv	r1, r5, r3
 8003554:	fb03 5711 	mls	r7, r3, r1, r5
 8003558:	5dc7      	ldrb	r7, [r0, r7]
 800355a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800355e:	462f      	mov	r7, r5
 8003560:	42bb      	cmp	r3, r7
 8003562:	460d      	mov	r5, r1
 8003564:	d9f4      	bls.n	8003550 <_printf_i+0x110>
 8003566:	2b08      	cmp	r3, #8
 8003568:	d10b      	bne.n	8003582 <_printf_i+0x142>
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	07df      	lsls	r7, r3, #31
 800356e:	d508      	bpl.n	8003582 <_printf_i+0x142>
 8003570:	6923      	ldr	r3, [r4, #16]
 8003572:	6861      	ldr	r1, [r4, #4]
 8003574:	4299      	cmp	r1, r3
 8003576:	bfde      	ittt	le
 8003578:	2330      	movle	r3, #48	@ 0x30
 800357a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800357e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003582:	1b92      	subs	r2, r2, r6
 8003584:	6122      	str	r2, [r4, #16]
 8003586:	464b      	mov	r3, r9
 8003588:	4621      	mov	r1, r4
 800358a:	4640      	mov	r0, r8
 800358c:	f8cd a000 	str.w	sl, [sp]
 8003590:	aa03      	add	r2, sp, #12
 8003592:	f7ff fee3 	bl	800335c <_printf_common>
 8003596:	3001      	adds	r0, #1
 8003598:	d14a      	bne.n	8003630 <_printf_i+0x1f0>
 800359a:	f04f 30ff 	mov.w	r0, #4294967295
 800359e:	b004      	add	sp, #16
 80035a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	f043 0320 	orr.w	r3, r3, #32
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	2778      	movs	r7, #120	@ 0x78
 80035ae:	4832      	ldr	r0, [pc, #200]	@ (8003678 <_printf_i+0x238>)
 80035b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	6831      	ldr	r1, [r6, #0]
 80035b8:	061f      	lsls	r7, r3, #24
 80035ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80035be:	d402      	bmi.n	80035c6 <_printf_i+0x186>
 80035c0:	065f      	lsls	r7, r3, #25
 80035c2:	bf48      	it	mi
 80035c4:	b2ad      	uxthmi	r5, r5
 80035c6:	6031      	str	r1, [r6, #0]
 80035c8:	07d9      	lsls	r1, r3, #31
 80035ca:	bf44      	itt	mi
 80035cc:	f043 0320 	orrmi.w	r3, r3, #32
 80035d0:	6023      	strmi	r3, [r4, #0]
 80035d2:	b11d      	cbz	r5, 80035dc <_printf_i+0x19c>
 80035d4:	2310      	movs	r3, #16
 80035d6:	e7ad      	b.n	8003534 <_printf_i+0xf4>
 80035d8:	4826      	ldr	r0, [pc, #152]	@ (8003674 <_printf_i+0x234>)
 80035da:	e7e9      	b.n	80035b0 <_printf_i+0x170>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	f023 0320 	bic.w	r3, r3, #32
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	e7f6      	b.n	80035d4 <_printf_i+0x194>
 80035e6:	4616      	mov	r6, r2
 80035e8:	e7bd      	b.n	8003566 <_printf_i+0x126>
 80035ea:	6833      	ldr	r3, [r6, #0]
 80035ec:	6825      	ldr	r5, [r4, #0]
 80035ee:	1d18      	adds	r0, r3, #4
 80035f0:	6961      	ldr	r1, [r4, #20]
 80035f2:	6030      	str	r0, [r6, #0]
 80035f4:	062e      	lsls	r6, r5, #24
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	d501      	bpl.n	80035fe <_printf_i+0x1be>
 80035fa:	6019      	str	r1, [r3, #0]
 80035fc:	e002      	b.n	8003604 <_printf_i+0x1c4>
 80035fe:	0668      	lsls	r0, r5, #25
 8003600:	d5fb      	bpl.n	80035fa <_printf_i+0x1ba>
 8003602:	8019      	strh	r1, [r3, #0]
 8003604:	2300      	movs	r3, #0
 8003606:	4616      	mov	r6, r2
 8003608:	6123      	str	r3, [r4, #16]
 800360a:	e7bc      	b.n	8003586 <_printf_i+0x146>
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	2100      	movs	r1, #0
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	6032      	str	r2, [r6, #0]
 8003614:	681e      	ldr	r6, [r3, #0]
 8003616:	6862      	ldr	r2, [r4, #4]
 8003618:	4630      	mov	r0, r6
 800361a:	f000 f96b 	bl	80038f4 <memchr>
 800361e:	b108      	cbz	r0, 8003624 <_printf_i+0x1e4>
 8003620:	1b80      	subs	r0, r0, r6
 8003622:	6060      	str	r0, [r4, #4]
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	6123      	str	r3, [r4, #16]
 8003628:	2300      	movs	r3, #0
 800362a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800362e:	e7aa      	b.n	8003586 <_printf_i+0x146>
 8003630:	4632      	mov	r2, r6
 8003632:	4649      	mov	r1, r9
 8003634:	4640      	mov	r0, r8
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	47d0      	blx	sl
 800363a:	3001      	adds	r0, #1
 800363c:	d0ad      	beq.n	800359a <_printf_i+0x15a>
 800363e:	6823      	ldr	r3, [r4, #0]
 8003640:	079b      	lsls	r3, r3, #30
 8003642:	d413      	bmi.n	800366c <_printf_i+0x22c>
 8003644:	68e0      	ldr	r0, [r4, #12]
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	4298      	cmp	r0, r3
 800364a:	bfb8      	it	lt
 800364c:	4618      	movlt	r0, r3
 800364e:	e7a6      	b.n	800359e <_printf_i+0x15e>
 8003650:	2301      	movs	r3, #1
 8003652:	4632      	mov	r2, r6
 8003654:	4649      	mov	r1, r9
 8003656:	4640      	mov	r0, r8
 8003658:	47d0      	blx	sl
 800365a:	3001      	adds	r0, #1
 800365c:	d09d      	beq.n	800359a <_printf_i+0x15a>
 800365e:	3501      	adds	r5, #1
 8003660:	68e3      	ldr	r3, [r4, #12]
 8003662:	9903      	ldr	r1, [sp, #12]
 8003664:	1a5b      	subs	r3, r3, r1
 8003666:	42ab      	cmp	r3, r5
 8003668:	dcf2      	bgt.n	8003650 <_printf_i+0x210>
 800366a:	e7eb      	b.n	8003644 <_printf_i+0x204>
 800366c:	2500      	movs	r5, #0
 800366e:	f104 0619 	add.w	r6, r4, #25
 8003672:	e7f5      	b.n	8003660 <_printf_i+0x220>
 8003674:	080039e3 	.word	0x080039e3
 8003678:	080039f4 	.word	0x080039f4

0800367c <__sflush_r>:
 800367c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003682:	0716      	lsls	r6, r2, #28
 8003684:	4605      	mov	r5, r0
 8003686:	460c      	mov	r4, r1
 8003688:	d454      	bmi.n	8003734 <__sflush_r+0xb8>
 800368a:	684b      	ldr	r3, [r1, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	dc02      	bgt.n	8003696 <__sflush_r+0x1a>
 8003690:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	dd48      	ble.n	8003728 <__sflush_r+0xac>
 8003696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003698:	2e00      	cmp	r6, #0
 800369a:	d045      	beq.n	8003728 <__sflush_r+0xac>
 800369c:	2300      	movs	r3, #0
 800369e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036a2:	682f      	ldr	r7, [r5, #0]
 80036a4:	6a21      	ldr	r1, [r4, #32]
 80036a6:	602b      	str	r3, [r5, #0]
 80036a8:	d030      	beq.n	800370c <__sflush_r+0x90>
 80036aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	0759      	lsls	r1, r3, #29
 80036b0:	d505      	bpl.n	80036be <__sflush_r+0x42>
 80036b2:	6863      	ldr	r3, [r4, #4]
 80036b4:	1ad2      	subs	r2, r2, r3
 80036b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036b8:	b10b      	cbz	r3, 80036be <__sflush_r+0x42>
 80036ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036bc:	1ad2      	subs	r2, r2, r3
 80036be:	2300      	movs	r3, #0
 80036c0:	4628      	mov	r0, r5
 80036c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036c4:	6a21      	ldr	r1, [r4, #32]
 80036c6:	47b0      	blx	r6
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	89a3      	ldrh	r3, [r4, #12]
 80036cc:	d106      	bne.n	80036dc <__sflush_r+0x60>
 80036ce:	6829      	ldr	r1, [r5, #0]
 80036d0:	291d      	cmp	r1, #29
 80036d2:	d82b      	bhi.n	800372c <__sflush_r+0xb0>
 80036d4:	4a28      	ldr	r2, [pc, #160]	@ (8003778 <__sflush_r+0xfc>)
 80036d6:	40ca      	lsrs	r2, r1
 80036d8:	07d6      	lsls	r6, r2, #31
 80036da:	d527      	bpl.n	800372c <__sflush_r+0xb0>
 80036dc:	2200      	movs	r2, #0
 80036de:	6062      	str	r2, [r4, #4]
 80036e0:	6922      	ldr	r2, [r4, #16]
 80036e2:	04d9      	lsls	r1, r3, #19
 80036e4:	6022      	str	r2, [r4, #0]
 80036e6:	d504      	bpl.n	80036f2 <__sflush_r+0x76>
 80036e8:	1c42      	adds	r2, r0, #1
 80036ea:	d101      	bne.n	80036f0 <__sflush_r+0x74>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b903      	cbnz	r3, 80036f2 <__sflush_r+0x76>
 80036f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80036f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036f4:	602f      	str	r7, [r5, #0]
 80036f6:	b1b9      	cbz	r1, 8003728 <__sflush_r+0xac>
 80036f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036fc:	4299      	cmp	r1, r3
 80036fe:	d002      	beq.n	8003706 <__sflush_r+0x8a>
 8003700:	4628      	mov	r0, r5
 8003702:	f7ff fbf5 	bl	8002ef0 <_free_r>
 8003706:	2300      	movs	r3, #0
 8003708:	6363      	str	r3, [r4, #52]	@ 0x34
 800370a:	e00d      	b.n	8003728 <__sflush_r+0xac>
 800370c:	2301      	movs	r3, #1
 800370e:	4628      	mov	r0, r5
 8003710:	47b0      	blx	r6
 8003712:	4602      	mov	r2, r0
 8003714:	1c50      	adds	r0, r2, #1
 8003716:	d1c9      	bne.n	80036ac <__sflush_r+0x30>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0c6      	beq.n	80036ac <__sflush_r+0x30>
 800371e:	2b1d      	cmp	r3, #29
 8003720:	d001      	beq.n	8003726 <__sflush_r+0xaa>
 8003722:	2b16      	cmp	r3, #22
 8003724:	d11d      	bne.n	8003762 <__sflush_r+0xe6>
 8003726:	602f      	str	r7, [r5, #0]
 8003728:	2000      	movs	r0, #0
 800372a:	e021      	b.n	8003770 <__sflush_r+0xf4>
 800372c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003730:	b21b      	sxth	r3, r3
 8003732:	e01a      	b.n	800376a <__sflush_r+0xee>
 8003734:	690f      	ldr	r7, [r1, #16]
 8003736:	2f00      	cmp	r7, #0
 8003738:	d0f6      	beq.n	8003728 <__sflush_r+0xac>
 800373a:	0793      	lsls	r3, r2, #30
 800373c:	bf18      	it	ne
 800373e:	2300      	movne	r3, #0
 8003740:	680e      	ldr	r6, [r1, #0]
 8003742:	bf08      	it	eq
 8003744:	694b      	ldreq	r3, [r1, #20]
 8003746:	1bf6      	subs	r6, r6, r7
 8003748:	600f      	str	r7, [r1, #0]
 800374a:	608b      	str	r3, [r1, #8]
 800374c:	2e00      	cmp	r6, #0
 800374e:	ddeb      	ble.n	8003728 <__sflush_r+0xac>
 8003750:	4633      	mov	r3, r6
 8003752:	463a      	mov	r2, r7
 8003754:	4628      	mov	r0, r5
 8003756:	6a21      	ldr	r1, [r4, #32]
 8003758:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800375c:	47e0      	blx	ip
 800375e:	2800      	cmp	r0, #0
 8003760:	dc07      	bgt.n	8003772 <__sflush_r+0xf6>
 8003762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800376a:	f04f 30ff 	mov.w	r0, #4294967295
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003772:	4407      	add	r7, r0
 8003774:	1a36      	subs	r6, r6, r0
 8003776:	e7e9      	b.n	800374c <__sflush_r+0xd0>
 8003778:	20400001 	.word	0x20400001

0800377c <_fflush_r>:
 800377c:	b538      	push	{r3, r4, r5, lr}
 800377e:	690b      	ldr	r3, [r1, #16]
 8003780:	4605      	mov	r5, r0
 8003782:	460c      	mov	r4, r1
 8003784:	b913      	cbnz	r3, 800378c <_fflush_r+0x10>
 8003786:	2500      	movs	r5, #0
 8003788:	4628      	mov	r0, r5
 800378a:	bd38      	pop	{r3, r4, r5, pc}
 800378c:	b118      	cbz	r0, 8003796 <_fflush_r+0x1a>
 800378e:	6a03      	ldr	r3, [r0, #32]
 8003790:	b90b      	cbnz	r3, 8003796 <_fflush_r+0x1a>
 8003792:	f7ff f9b3 	bl	8002afc <__sinit>
 8003796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f3      	beq.n	8003786 <_fflush_r+0xa>
 800379e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037a0:	07d0      	lsls	r0, r2, #31
 80037a2:	d404      	bmi.n	80037ae <_fflush_r+0x32>
 80037a4:	0599      	lsls	r1, r3, #22
 80037a6:	d402      	bmi.n	80037ae <_fflush_r+0x32>
 80037a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037aa:	f7ff fb9e 	bl	8002eea <__retarget_lock_acquire_recursive>
 80037ae:	4628      	mov	r0, r5
 80037b0:	4621      	mov	r1, r4
 80037b2:	f7ff ff63 	bl	800367c <__sflush_r>
 80037b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037b8:	4605      	mov	r5, r0
 80037ba:	07da      	lsls	r2, r3, #31
 80037bc:	d4e4      	bmi.n	8003788 <_fflush_r+0xc>
 80037be:	89a3      	ldrh	r3, [r4, #12]
 80037c0:	059b      	lsls	r3, r3, #22
 80037c2:	d4e1      	bmi.n	8003788 <_fflush_r+0xc>
 80037c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037c6:	f7ff fb91 	bl	8002eec <__retarget_lock_release_recursive>
 80037ca:	e7dd      	b.n	8003788 <_fflush_r+0xc>

080037cc <__swhatbuf_r>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	460c      	mov	r4, r1
 80037d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d4:	4615      	mov	r5, r2
 80037d6:	2900      	cmp	r1, #0
 80037d8:	461e      	mov	r6, r3
 80037da:	b096      	sub	sp, #88	@ 0x58
 80037dc:	da0c      	bge.n	80037f8 <__swhatbuf_r+0x2c>
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	2100      	movs	r1, #0
 80037e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037e6:	bf14      	ite	ne
 80037e8:	2340      	movne	r3, #64	@ 0x40
 80037ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80037ee:	2000      	movs	r0, #0
 80037f0:	6031      	str	r1, [r6, #0]
 80037f2:	602b      	str	r3, [r5, #0]
 80037f4:	b016      	add	sp, #88	@ 0x58
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	466a      	mov	r2, sp
 80037fa:	f000 f849 	bl	8003890 <_fstat_r>
 80037fe:	2800      	cmp	r0, #0
 8003800:	dbed      	blt.n	80037de <__swhatbuf_r+0x12>
 8003802:	9901      	ldr	r1, [sp, #4]
 8003804:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003808:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800380c:	4259      	negs	r1, r3
 800380e:	4159      	adcs	r1, r3
 8003810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003814:	e7eb      	b.n	80037ee <__swhatbuf_r+0x22>

08003816 <__smakebuf_r>:
 8003816:	898b      	ldrh	r3, [r1, #12]
 8003818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800381a:	079d      	lsls	r5, r3, #30
 800381c:	4606      	mov	r6, r0
 800381e:	460c      	mov	r4, r1
 8003820:	d507      	bpl.n	8003832 <__smakebuf_r+0x1c>
 8003822:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	6123      	str	r3, [r4, #16]
 800382a:	2301      	movs	r3, #1
 800382c:	6163      	str	r3, [r4, #20]
 800382e:	b003      	add	sp, #12
 8003830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003832:	466a      	mov	r2, sp
 8003834:	ab01      	add	r3, sp, #4
 8003836:	f7ff ffc9 	bl	80037cc <__swhatbuf_r>
 800383a:	9f00      	ldr	r7, [sp, #0]
 800383c:	4605      	mov	r5, r0
 800383e:	4639      	mov	r1, r7
 8003840:	4630      	mov	r0, r6
 8003842:	f7ff fbbf 	bl	8002fc4 <_malloc_r>
 8003846:	b948      	cbnz	r0, 800385c <__smakebuf_r+0x46>
 8003848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800384c:	059a      	lsls	r2, r3, #22
 800384e:	d4ee      	bmi.n	800382e <__smakebuf_r+0x18>
 8003850:	f023 0303 	bic.w	r3, r3, #3
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	81a3      	strh	r3, [r4, #12]
 800385a:	e7e2      	b.n	8003822 <__smakebuf_r+0xc>
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003866:	81a3      	strh	r3, [r4, #12]
 8003868:	9b01      	ldr	r3, [sp, #4]
 800386a:	6020      	str	r0, [r4, #0]
 800386c:	b15b      	cbz	r3, 8003886 <__smakebuf_r+0x70>
 800386e:	4630      	mov	r0, r6
 8003870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003874:	f000 f81e 	bl	80038b4 <_isatty_r>
 8003878:	b128      	cbz	r0, 8003886 <__smakebuf_r+0x70>
 800387a:	89a3      	ldrh	r3, [r4, #12]
 800387c:	f023 0303 	bic.w	r3, r3, #3
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	89a3      	ldrh	r3, [r4, #12]
 8003888:	431d      	orrs	r5, r3
 800388a:	81a5      	strh	r5, [r4, #12]
 800388c:	e7cf      	b.n	800382e <__smakebuf_r+0x18>
	...

08003890 <_fstat_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	2300      	movs	r3, #0
 8003894:	4d06      	ldr	r5, [pc, #24]	@ (80038b0 <_fstat_r+0x20>)
 8003896:	4604      	mov	r4, r0
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	602b      	str	r3, [r5, #0]
 800389e:	f7fd f8c9 	bl	8000a34 <_fstat>
 80038a2:	1c43      	adds	r3, r0, #1
 80038a4:	d102      	bne.n	80038ac <_fstat_r+0x1c>
 80038a6:	682b      	ldr	r3, [r5, #0]
 80038a8:	b103      	cbz	r3, 80038ac <_fstat_r+0x1c>
 80038aa:	6023      	str	r3, [r4, #0]
 80038ac:	bd38      	pop	{r3, r4, r5, pc}
 80038ae:	bf00      	nop
 80038b0:	2000026c 	.word	0x2000026c

080038b4 <_isatty_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	2300      	movs	r3, #0
 80038b8:	4d05      	ldr	r5, [pc, #20]	@ (80038d0 <_isatty_r+0x1c>)
 80038ba:	4604      	mov	r4, r0
 80038bc:	4608      	mov	r0, r1
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	f7fd f8c7 	bl	8000a52 <_isatty>
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	d102      	bne.n	80038ce <_isatty_r+0x1a>
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	b103      	cbz	r3, 80038ce <_isatty_r+0x1a>
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	bd38      	pop	{r3, r4, r5, pc}
 80038d0:	2000026c 	.word	0x2000026c

080038d4 <_sbrk_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	2300      	movs	r3, #0
 80038d8:	4d05      	ldr	r5, [pc, #20]	@ (80038f0 <_sbrk_r+0x1c>)
 80038da:	4604      	mov	r4, r0
 80038dc:	4608      	mov	r0, r1
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	f7fd f8ce 	bl	8000a80 <_sbrk>
 80038e4:	1c43      	adds	r3, r0, #1
 80038e6:	d102      	bne.n	80038ee <_sbrk_r+0x1a>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	b103      	cbz	r3, 80038ee <_sbrk_r+0x1a>
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	bd38      	pop	{r3, r4, r5, pc}
 80038f0:	2000026c 	.word	0x2000026c

080038f4 <memchr>:
 80038f4:	4603      	mov	r3, r0
 80038f6:	b510      	push	{r4, lr}
 80038f8:	b2c9      	uxtb	r1, r1
 80038fa:	4402      	add	r2, r0
 80038fc:	4293      	cmp	r3, r2
 80038fe:	4618      	mov	r0, r3
 8003900:	d101      	bne.n	8003906 <memchr+0x12>
 8003902:	2000      	movs	r0, #0
 8003904:	e003      	b.n	800390e <memchr+0x1a>
 8003906:	7804      	ldrb	r4, [r0, #0]
 8003908:	3301      	adds	r3, #1
 800390a:	428c      	cmp	r4, r1
 800390c:	d1f6      	bne.n	80038fc <memchr+0x8>
 800390e:	bd10      	pop	{r4, pc}

08003910 <_init>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr

0800391c <_fini>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	bf00      	nop
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr
