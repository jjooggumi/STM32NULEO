
ServoMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080043cc  080043cc  000053cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044bc  080044bc  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080044bc  080044bc  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080044bc  080044bc  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044bc  080044bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080044c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000006c  08004530  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004530  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c337  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dda  00000000  00000000  000123cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000141a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f0  00000000  00000000  00014e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185d2  00000000  00000000  00015850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcc4  00000000  00000000  0002de22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c31d  00000000  00000000  0003bae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7e03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd8  00000000  00000000  000c7e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000cbb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080043b4 	.word	0x080043b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080043b4 	.word	0x080043b4

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f002 fb33 	bl	80027ce <HAL_UART_Transmit>
  HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f002 fb2c 	bl	80027ce <HAL_UART_Transmit>

  return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	080043cc 	.word	0x080043cc
 8000184:	20000118 	.word	0x20000118

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fc88 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f8c2 	bl	8000318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 fa2a 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f9fe 	bl	8000598 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800019c:	f000 f8fe 	bl	800039c <MX_TIM1_Init>
  MX_TIM2_Init();
 80001a0:	f000 f9ac 	bl	80004fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001a4:	2100      	movs	r1, #0
 80001a6:	484e      	ldr	r0, [pc, #312]	@ (80002e0 <main+0x158>)
 80001a8:	f001 fd36 	bl	8001c18 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001ac:	2104      	movs	r1, #4
 80001ae:	484d      	ldr	r0, [pc, #308]	@ (80002e4 <main+0x15c>)
 80001b0:	f001 fd32 	bl	8001c18 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos_tilt);
 80001b4:	4b4c      	ldr	r3, [pc, #304]	@ (80002e8 <main+0x160>)
 80001b6:	781a      	ldrb	r2, [r3, #0]
 80001b8:	4b49      	ldr	r3, [pc, #292]	@ (80002e0 <main+0x158>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pos_pan);
 80001be:	4b4b      	ldr	r3, [pc, #300]	@ (80002ec <main+0x164>)
 80001c0:	781a      	ldrb	r2, [r3, #0]
 80001c2:	4b48      	ldr	r3, [pc, #288]	@ (80002e4 <main+0x15c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	639a      	str	r2, [r3, #56]	@ 0x38
	printf("Servo Control Ready\r\n");
 80001c8:	4849      	ldr	r0, [pc, #292]	@ (80002f0 <main+0x168>)
 80001ca:	f003 fa87 	bl	80036dc <puts>
	printf("Commands: w(up), s(down), a(left), d(right), i(center)\r\n");
 80001ce:	4849      	ldr	r0, [pc, #292]	@ (80002f4 <main+0x16c>)
 80001d0:	f003 fa84 	bl	80036dc <puts>
//			count++;
//
//		} else {
//			break;
//		}
		if(HAL_UART_Receive(&huart2, &ch, sizeof(ch), 10) == HAL_OK){
 80001d4:	230a      	movs	r3, #10
 80001d6:	2201      	movs	r2, #1
 80001d8:	4947      	ldr	r1, [pc, #284]	@ (80002f8 <main+0x170>)
 80001da:	4848      	ldr	r0, [pc, #288]	@ (80002fc <main+0x174>)
 80001dc:	f002 fb82 	bl	80028e4 <HAL_UART_Receive>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d1f6      	bne.n	80001d4 <main+0x4c>
			if(ch=='w'){
 80001e6:	4b44      	ldr	r3, [pc, #272]	@ (80002f8 <main+0x170>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b77      	cmp	r3, #119	@ 0x77
 80001ec:	d111      	bne.n	8000212 <main+0x8a>
				printf("up\n\r");
 80001ee:	4844      	ldr	r0, [pc, #272]	@ (8000300 <main+0x178>)
 80001f0:	f003 fa0c 	bl	800360c <iprintf>
				if(pos_tilt + STEP <= MAX){
 80001f4:	4b3c      	ldr	r3, [pc, #240]	@ (80002e8 <main+0x160>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b7c      	cmp	r3, #124	@ 0x7c
 80001fa:	d806      	bhi.n	800020a <main+0x82>
					pos_tilt = pos_tilt + STEP;
 80001fc:	4b3a      	ldr	r3, [pc, #232]	@ (80002e8 <main+0x160>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	3301      	adds	r3, #1
 8000202:	b2da      	uxtb	r2, r3
 8000204:	4b38      	ldr	r3, [pc, #224]	@ (80002e8 <main+0x160>)
 8000206:	701a      	strb	r2, [r3, #0]
 8000208:	e052      	b.n	80002b0 <main+0x128>

				}
				else{
					pos_tilt = MAX;
 800020a:	4b37      	ldr	r3, [pc, #220]	@ (80002e8 <main+0x160>)
 800020c:	227d      	movs	r2, #125	@ 0x7d
 800020e:	701a      	strb	r2, [r3, #0]
 8000210:	e04e      	b.n	80002b0 <main+0x128>
				}

			}
			else if(ch == 's'){
 8000212:	4b39      	ldr	r3, [pc, #228]	@ (80002f8 <main+0x170>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b73      	cmp	r3, #115	@ 0x73
 8000218:	d111      	bne.n	800023e <main+0xb6>
				printf("Down \n");
 800021a:	483a      	ldr	r0, [pc, #232]	@ (8000304 <main+0x17c>)
 800021c:	f003 fa5e 	bl	80036dc <puts>
				if(pos_tilt + STEP >= MIN){
 8000220:	4b31      	ldr	r3, [pc, #196]	@ (80002e8 <main+0x160>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b17      	cmp	r3, #23
 8000226:	d906      	bls.n	8000236 <main+0xae>
					pos_tilt = pos_tilt - STEP;
 8000228:	4b2f      	ldr	r3, [pc, #188]	@ (80002e8 <main+0x160>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b2d      	ldr	r3, [pc, #180]	@ (80002e8 <main+0x160>)
 8000232:	701a      	strb	r2, [r3, #0]
 8000234:	e03c      	b.n	80002b0 <main+0x128>

				}
				else{
					pos_tilt = MIN;
 8000236:	4b2c      	ldr	r3, [pc, #176]	@ (80002e8 <main+0x160>)
 8000238:	2219      	movs	r2, #25
 800023a:	701a      	strb	r2, [r3, #0]
 800023c:	e038      	b.n	80002b0 <main+0x128>
				}
			}
		    else if(ch == 'a'){
 800023e:	4b2e      	ldr	r3, [pc, #184]	@ (80002f8 <main+0x170>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	2b61      	cmp	r3, #97	@ 0x61
 8000244:	d111      	bne.n	800026a <main+0xe2>
		        printf("Left\r\n");
 8000246:	4830      	ldr	r0, [pc, #192]	@ (8000308 <main+0x180>)
 8000248:	f003 fa48 	bl	80036dc <puts>
		        if(pos_pan + STEP <= MAX)
 800024c:	4b27      	ldr	r3, [pc, #156]	@ (80002ec <main+0x164>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b7c      	cmp	r3, #124	@ 0x7c
 8000252:	d806      	bhi.n	8000262 <main+0xda>
		          pos_pan = pos_pan + STEP;
 8000254:	4b25      	ldr	r3, [pc, #148]	@ (80002ec <main+0x164>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	3301      	adds	r3, #1
 800025a:	b2da      	uxtb	r2, r3
 800025c:	4b23      	ldr	r3, [pc, #140]	@ (80002ec <main+0x164>)
 800025e:	701a      	strb	r2, [r3, #0]
 8000260:	e026      	b.n	80002b0 <main+0x128>
		        else
		          pos_pan = MAX;
 8000262:	4b22      	ldr	r3, [pc, #136]	@ (80002ec <main+0x164>)
 8000264:	227d      	movs	r2, #125	@ 0x7d
 8000266:	701a      	strb	r2, [r3, #0]
 8000268:	e022      	b.n	80002b0 <main+0x128>
		      }
		      else if(ch == 'd'){
 800026a:	4b23      	ldr	r3, [pc, #140]	@ (80002f8 <main+0x170>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b64      	cmp	r3, #100	@ 0x64
 8000270:	d111      	bne.n	8000296 <main+0x10e>
		        printf("Right\r\n");
 8000272:	4826      	ldr	r0, [pc, #152]	@ (800030c <main+0x184>)
 8000274:	f003 fa32 	bl	80036dc <puts>
		        if(pos_pan - STEP >= MIN)
 8000278:	4b1c      	ldr	r3, [pc, #112]	@ (80002ec <main+0x164>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b19      	cmp	r3, #25
 800027e:	d906      	bls.n	800028e <main+0x106>
		          pos_pan = pos_pan - STEP;
 8000280:	4b1a      	ldr	r3, [pc, #104]	@ (80002ec <main+0x164>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	3b01      	subs	r3, #1
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4b18      	ldr	r3, [pc, #96]	@ (80002ec <main+0x164>)
 800028a:	701a      	strb	r2, [r3, #0]
 800028c:	e010      	b.n	80002b0 <main+0x128>
		        else
		          pos_pan = MIN;
 800028e:	4b17      	ldr	r3, [pc, #92]	@ (80002ec <main+0x164>)
 8000290:	2219      	movs	r2, #25
 8000292:	701a      	strb	r2, [r3, #0]
 8000294:	e00c      	b.n	80002b0 <main+0x128>
		      }
		      else if(ch == 'i'){
 8000296:	4b18      	ldr	r3, [pc, #96]	@ (80002f8 <main+0x170>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b69      	cmp	r3, #105	@ 0x69
 800029c:	d108      	bne.n	80002b0 <main+0x128>
		        printf("Center\r\n");
 800029e:	481c      	ldr	r0, [pc, #112]	@ (8000310 <main+0x188>)
 80002a0:	f003 fa1c 	bl	80036dc <puts>
		        pos_pan = CENTER;
 80002a4:	4b11      	ldr	r3, [pc, #68]	@ (80002ec <main+0x164>)
 80002a6:	224b      	movs	r2, #75	@ 0x4b
 80002a8:	701a      	strb	r2, [r3, #0]
		        pos_tilt = CENTER;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	@ (80002e8 <main+0x160>)
 80002ac:	224b      	movs	r2, #75	@ 0x4b
 80002ae:	701a      	strb	r2, [r3, #0]
		      }


			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pos_tilt);
 80002b0:	4b0d      	ldr	r3, [pc, #52]	@ (80002e8 <main+0x160>)
 80002b2:	781a      	ldrb	r2, [r3, #0]
 80002b4:	4b0a      	ldr	r3, [pc, #40]	@ (80002e0 <main+0x158>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pos_pan);
 80002ba:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <main+0x164>)
 80002bc:	781a      	ldrb	r2, [r3, #0]
 80002be:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <main+0x15c>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	639a      	str	r2, [r3, #56]	@ 0x38
			//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pos_pan);

			printf("Pan: %d, Tilt: %d\r\n", pos_pan, pos_tilt);
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <main+0x164>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4619      	mov	r1, r3
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <main+0x160>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	461a      	mov	r2, r3
 80002d0:	4810      	ldr	r0, [pc, #64]	@ (8000314 <main+0x18c>)
 80002d2:	f003 f99b 	bl	800360c <iprintf>
			HAL_Delay(50);
 80002d6:	2032      	movs	r0, #50	@ 0x32
 80002d8:	f000 fc44 	bl	8000b64 <HAL_Delay>
		if(HAL_UART_Receive(&huart2, &ch, sizeof(ch), 10) == HAL_OK){
 80002dc:	e77a      	b.n	80001d4 <main+0x4c>
 80002de:	bf00      	nop
 80002e0:	20000088 	.word	0x20000088
 80002e4:	200000d0 	.word	0x200000d0
 80002e8:	20000001 	.word	0x20000001
 80002ec:	20000000 	.word	0x20000000
 80002f0:	080043d0 	.word	0x080043d0
 80002f4:	080043e8 	.word	0x080043e8
 80002f8:	20000160 	.word	0x20000160
 80002fc:	20000118 	.word	0x20000118
 8000300:	08004420 	.word	0x08004420
 8000304:	08004428 	.word	0x08004428
 8000308:	08004430 	.word	0x08004430
 800030c:	08004438 	.word	0x08004438
 8000310:	08004440 	.word	0x08004440
 8000314:	08004448 	.word	0x08004448

08000318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b090      	sub	sp, #64	@ 0x40
 800031c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031e:	f107 0318 	add.w	r3, r7, #24
 8000322:	2228      	movs	r2, #40	@ 0x28
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fab8 	bl	800389c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
 8000338:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033a:	2302      	movs	r3, #2
 800033c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800033e:	2301      	movs	r3, #1
 8000340:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000342:	2310      	movs	r3, #16
 8000344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000346:	2302      	movs	r3, #2
 8000348:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800034a:	2300      	movs	r3, #0
 800034c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800034e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	f107 0318 	add.w	r3, r7, #24
 8000358:	4618      	mov	r0, r3
 800035a:	f000 ffa5 	bl	80012a8 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000364:	f000 f9b0 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	230f      	movs	r3, #15
 800036a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036c:	2302      	movs	r3, #2
 800036e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000374:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2102      	movs	r1, #2
 8000382:	4618      	mov	r0, r3
 8000384:	f001 fa12 	bl	80017ac <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800038e:	f000 f99b 	bl	80006c8 <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3740      	adds	r7, #64	@ 0x40
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b096      	sub	sp, #88	@ 0x58
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]
 80003ca:	615a      	str	r2, [r3, #20]
 80003cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2220      	movs	r2, #32
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 fa61 	bl	800389c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003da:	4b46      	ldr	r3, [pc, #280]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80003dc:	4a46      	ldr	r2, [pc, #280]	@ (80004f8 <MX_TIM1_Init+0x15c>)
 80003de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64* 20 -1;
 80003e0:	4b44      	ldr	r3, [pc, #272]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80003e2:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 80003e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e8:	4b42      	ldr	r3, [pc, #264]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80003ee:	4b41      	ldr	r3, [pc, #260]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80003f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f6:	4b3f      	ldr	r3, [pc, #252]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003fc:	4b3d      	ldr	r3, [pc, #244]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80003fe:	2200      	movs	r2, #0
 8000400:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000402:	4b3c      	ldr	r3, [pc, #240]	@ (80004f4 <MX_TIM1_Init+0x158>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000408:	483a      	ldr	r0, [pc, #232]	@ (80004f4 <MX_TIM1_Init+0x158>)
 800040a:	f001 fb5d 	bl	8001ac8 <HAL_TIM_Base_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000414:	f000 f958 	bl	80006c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800041c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800041e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000422:	4619      	mov	r1, r3
 8000424:	4833      	ldr	r0, [pc, #204]	@ (80004f4 <MX_TIM1_Init+0x158>)
 8000426:	f001 fd5b 	bl	8001ee0 <HAL_TIM_ConfigClockSource>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000430:	f000 f94a 	bl	80006c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000434:	482f      	ldr	r0, [pc, #188]	@ (80004f4 <MX_TIM1_Init+0x158>)
 8000436:	f001 fb96 	bl	8001b66 <HAL_TIM_PWM_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000440:	f000 f942 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000444:	2300      	movs	r3, #0
 8000446:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000450:	4619      	mov	r1, r3
 8000452:	4828      	ldr	r0, [pc, #160]	@ (80004f4 <MX_TIM1_Init+0x158>)
 8000454:	f002 f8bc 	bl	80025d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800045e:	f000 f933 	bl	80006c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000462:	2360      	movs	r3, #96	@ 0x60
 8000464:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 8000466:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800046a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800046c:	2300      	movs	r3, #0
 800046e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000470:	2300      	movs	r3, #0
 8000472:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000478:	2300      	movs	r3, #0
 800047a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800047c:	2300      	movs	r3, #0
 800047e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000480:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000484:	2200      	movs	r2, #0
 8000486:	4619      	mov	r1, r3
 8000488:	481a      	ldr	r0, [pc, #104]	@ (80004f4 <MX_TIM1_Init+0x158>)
 800048a:	f001 fc67 	bl	8001d5c <HAL_TIM_PWM_ConfigChannel>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000494:	f000 f918 	bl	80006c8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800049c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004a0:	2204      	movs	r2, #4
 80004a2:	4619      	mov	r1, r3
 80004a4:	4813      	ldr	r0, [pc, #76]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80004a6:	f001 fc59 	bl	8001d5c <HAL_TIM_PWM_ConfigChannel>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80004b0:	f000 f90a 	bl	80006c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4619      	mov	r1, r3
 80004d6:	4807      	ldr	r0, [pc, #28]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80004d8:	f002 f8d8 	bl	800268c <HAL_TIMEx_ConfigBreakDeadTime>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80004e2:	f000 f8f1 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004e6:	4803      	ldr	r0, [pc, #12]	@ (80004f4 <MX_TIM1_Init+0x158>)
 80004e8:	f000 f956 	bl	8000798 <HAL_TIM_MspPostInit>

}
 80004ec:	bf00      	nop
 80004ee:	3758      	adds	r7, #88	@ 0x58
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000088 	.word	0x20000088
 80004f8:	40012c00 	.word	0x40012c00

080004fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000510:	463b      	mov	r3, r7
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000518:	4b1e      	ldr	r3, [pc, #120]	@ (8000594 <MX_TIM2_Init+0x98>)
 800051a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800051e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64*20-1;
 8000520:	4b1c      	ldr	r3, [pc, #112]	@ (8000594 <MX_TIM2_Init+0x98>)
 8000522:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8000526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b1a      	ldr	r3, [pc, #104]	@ (8000594 <MX_TIM2_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800052e:	4b19      	ldr	r3, [pc, #100]	@ (8000594 <MX_TIM2_Init+0x98>)
 8000530:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <MX_TIM2_Init+0x98>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053c:	4b15      	ldr	r3, [pc, #84]	@ (8000594 <MX_TIM2_Init+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000542:	4814      	ldr	r0, [pc, #80]	@ (8000594 <MX_TIM2_Init+0x98>)
 8000544:	f001 fac0 	bl	8001ac8 <HAL_TIM_Base_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800054e:	f000 f8bb 	bl	80006c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000552:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4619      	mov	r1, r3
 800055e:	480d      	ldr	r0, [pc, #52]	@ (8000594 <MX_TIM2_Init+0x98>)
 8000560:	f001 fcbe 	bl	8001ee0 <HAL_TIM_ConfigClockSource>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800056a:	f000 f8ad 	bl	80006c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	4806      	ldr	r0, [pc, #24]	@ (8000594 <MX_TIM2_Init+0x98>)
 800057c:	f002 f828 	bl	80025d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000586:	f000 f89f 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000d0 	.word	0x200000d0

08000598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800059c:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 800059e:	4a12      	ldr	r2, [pc, #72]	@ (80005e8 <MX_USART2_UART_Init+0x50>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005a2:	4b10      	ldr	r3, [pc, #64]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 80005a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_USART2_UART_Init+0x4c>)
 80005d0:	f002 f8ad 	bl	800272e <HAL_UART_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005da:	f000 f875 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000118 	.word	0x20000118
 80005e8:	40004400 	.word	0x40004400

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b2d      	ldr	r3, [pc, #180]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a2c      	ldr	r2, [pc, #176]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b2a      	ldr	r3, [pc, #168]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a26      	ldr	r2, [pc, #152]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a1a      	ldr	r2, [pc, #104]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_GPIO_Init+0xcc>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	4815      	ldr	r0, [pc, #84]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000666:	f000 fde5 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800066a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <MX_GPIO_Init+0xd8>)
 8000680:	f000 fc54 	bl	8000f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000684:	2320      	movs	r3, #32
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4808      	ldr	r0, [pc, #32]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800069c:	f000 fc46 	bl	8000f2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2028      	movs	r0, #40	@ 0x28
 80006a6:	f000 fb58 	bl	8000d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006aa:	2028      	movs	r0, #40	@ 0x28
 80006ac:	f000 fb71 	bl	8000d92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	10110000 	.word	0x10110000
 80006c4:	40011000 	.word	0x40011000

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <Error_Handler+0x8>

080006d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006da:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a14      	ldr	r2, [pc, #80]	@ (8000730 <HAL_MspInit+0x5c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HAL_MspInit+0x5c>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <HAL_MspInit+0x5c>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	61d3      	str	r3, [r2, #28]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <HAL_MspInit+0x5c>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800070a:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <HAL_MspInit+0x60>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <HAL_MspInit+0x60>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	40021000 	.word	0x40021000
 8000734:	40010000 	.word	0x40010000

08000738 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <HAL_TIM_Base_MspInit+0x58>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d10c      	bne.n	8000764 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_TIM_Base_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <HAL_TIM_Base_MspInit+0x5c>)
 8000750:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <HAL_TIM_Base_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000762:	e010      	b.n	8000786 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800076c:	d10b      	bne.n	8000786 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_TIM_Base_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <HAL_TIM_Base_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_TIM_Base_MspInit+0x5c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40012c00 	.word	0x40012c00
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a10      	ldr	r2, [pc, #64]	@ (80007f4 <HAL_TIM_MspPostInit+0x5c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d118      	bne.n	80007ea <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_TIM_MspPostInit+0x60>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <HAL_TIM_MspPostInit+0x60>)
 80007be:	f043 0304 	orr.w	r3, r3, #4
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_TIM_MspPostInit+0x60>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0304 	and.w	r3, r3, #4
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <HAL_TIM_MspPostInit+0x64>)
 80007e6:	f000 fba1 	bl	8000f2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40012c00 	.word	0x40012c00
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800

08000800 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a19      	ldr	r2, [pc, #100]	@ (8000880 <HAL_UART_MspInit+0x80>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d12b      	bne.n	8000878 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <HAL_UART_MspInit+0x84>)
 8000822:	69db      	ldr	r3, [r3, #28]
 8000824:	4a17      	ldr	r2, [pc, #92]	@ (8000884 <HAL_UART_MspInit+0x84>)
 8000826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082a:	61d3      	str	r3, [r2, #28]
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_UART_MspInit+0x84>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_UART_MspInit+0x84>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <HAL_UART_MspInit+0x84>)
 800083e:	f043 0304 	orr.w	r3, r3, #4
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_UART_MspInit+0x84>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000850:	230c      	movs	r3, #12
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2302      	movs	r3, #2
 800085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	4809      	ldr	r0, [pc, #36]	@ (8000888 <HAL_UART_MspInit+0x88>)
 8000864:	f000 fb62 	bl	8000f2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2026      	movs	r0, #38	@ 0x26
 800086e:	f000 fa74 	bl	8000d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000872:	2026      	movs	r0, #38	@ 0x26
 8000874:	f000 fa8d 	bl	8000d92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40004400 	.word	0x40004400
 8000884:	40021000 	.word	0x40021000
 8000888:	40010800 	.word	0x40010800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <NMI_Handler+0x4>

08000894 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <HardFault_Handler+0x4>

0800089c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <MemManage_Handler+0x4>

080008a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr

080008c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f926 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e8:	4802      	ldr	r0, [pc, #8]	@ (80008f4 <USART2_IRQHandler+0x10>)
 80008ea:	f002 f893 	bl	8002a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000118 	.word	0x20000118

080008f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000900:	f000 fcb0 	bl	8001264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e00a      	b.n	8000930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800091a:	f3af 8000 	nop.w
 800091e:	4601      	mov	r1, r0
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	b2ca      	uxtb	r2, r1
 8000928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	dbf0      	blt.n	800091a <_read+0x12>
  }

  return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	e009      	b.n	8000968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60ba      	str	r2, [r7, #8]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fbf5 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbf1      	blt.n	8000954 <_write+0x12>
  }
  return len;
 8000970:	687b      	ldr	r3, [r7, #4]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_close>:

int _close(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a0:	605a      	str	r2, [r3, #4]
  return 0;
 80009a2:	2300      	movs	r3, #0
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <_isatty>:

int _isatty(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr

080009c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
	...

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	@ (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	@ (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f002 ff94 	bl	8003938 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20005000 	.word	0x20005000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	20000164 	.word	0x20000164
 8000a44:	200002b8 	.word	0x200002b8

08000a48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a54:	f7ff fff8 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a5a:	490c      	ldr	r1, [pc, #48]	@ (8000a8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a09      	ldr	r2, [pc, #36]	@ (8000a94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a70:	4c09      	ldr	r4, [pc, #36]	@ (8000a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f002 ff61 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a82:	f7ff fb81 	bl	8000188 <main>
  bx lr
 8000a86:	4770      	bx	lr
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a90:	080044c4 	.word	0x080044c4
  ldr r2, =_sbss
 8000a94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a98:	200002b8 	.word	0x200002b8

08000a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_2_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_Init+0x28>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <HAL_Init+0x28>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f947 	bl	8000d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f808 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe0a 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40022000 	.word	0x40022000

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_InitTick+0x54>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_InitTick+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f95f 	bl	8000dae <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 f927 	bl	8000d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	@ (8000b28 <HAL_InitTick+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000004 	.word	0x20000004
 8000b24:	2000000c 	.word	0x2000000c
 8000b28:	20000008 	.word	0x20000008

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a03      	ldr	r2, [pc, #12]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	20000168 	.word	0x20000168

08000b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	@ (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000168 	.word	0x20000168

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff fff0 	bl	8000b50 <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffe0 	bl	8000b50 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000000c 	.word	0x2000000c

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4906      	ldr	r1, [pc, #24]	@ (8000c44 <__NVIC_EnableIRQ+0x34>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	@ (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	@ (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
         );
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	@ 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d10:	d301      	bcc.n	8000d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00f      	b.n	8000d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <SysTick_Config+0x40>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f7ff ff90 	bl	8000c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <SysTick_Config+0x40>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <SysTick_Config+0x40>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff ff2d 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6c:	f7ff ff42 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	68b9      	ldr	r1, [r7, #8]
 8000d76:	6978      	ldr	r0, [r7, #20]
 8000d78:	f7ff ff90 	bl	8000c9c <NVIC_EncodePriority>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff5f 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff35 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffa2 	bl	8000d00 <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d008      	beq.n	8000df0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2204      	movs	r2, #4
 8000de2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e020      	b.n	8000e32 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 020e 	bic.w	r2, r2, #14
 8000dfe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0201 	bic.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d005      	beq.n	8000e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2204      	movs	r2, #4
 8000e58:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e051      	b.n	8000f04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 020e 	bic.w	r2, r2, #14
 8000e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a22      	ldr	r2, [pc, #136]	@ (8000f10 <HAL_DMA_Abort_IT+0xd4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d029      	beq.n	8000ede <HAL_DMA_Abort_IT+0xa2>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <HAL_DMA_Abort_IT+0xd8>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d022      	beq.n	8000eda <HAL_DMA_Abort_IT+0x9e>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1f      	ldr	r2, [pc, #124]	@ (8000f18 <HAL_DMA_Abort_IT+0xdc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01a      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0x98>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f1c <HAL_DMA_Abort_IT+0xe0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d012      	beq.n	8000ece <HAL_DMA_Abort_IT+0x92>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a1c      	ldr	r2, [pc, #112]	@ (8000f20 <HAL_DMA_Abort_IT+0xe4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d00a      	beq.n	8000ec8 <HAL_DMA_Abort_IT+0x8c>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f24 <HAL_DMA_Abort_IT+0xe8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d102      	bne.n	8000ec2 <HAL_DMA_Abort_IT+0x86>
 8000ebc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ec0:	e00e      	b.n	8000ee0 <HAL_DMA_Abort_IT+0xa4>
 8000ec2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ec6:	e00b      	b.n	8000ee0 <HAL_DMA_Abort_IT+0xa4>
 8000ec8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ecc:	e008      	b.n	8000ee0 <HAL_DMA_Abort_IT+0xa4>
 8000ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed2:	e005      	b.n	8000ee0 <HAL_DMA_Abort_IT+0xa4>
 8000ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ed8:	e002      	b.n	8000ee0 <HAL_DMA_Abort_IT+0xa4>
 8000eda:	2310      	movs	r3, #16
 8000edc:	e000      	b.n	8000ee0 <HAL_DMA_Abort_IT+0xa4>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <HAL_DMA_Abort_IT+0xec>)
 8000ee2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	4798      	blx	r3
    } 
  }
  return status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020008 	.word	0x40020008
 8000f14:	4002001c 	.word	0x4002001c
 8000f18:	40020030 	.word	0x40020030
 8000f1c:	40020044 	.word	0x40020044
 8000f20:	40020058 	.word	0x40020058
 8000f24:	4002006c 	.word	0x4002006c
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b08b      	sub	sp, #44	@ 0x2c
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3e:	e169      	b.n	8001214 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f40:	2201      	movs	r2, #1
 8000f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	69fa      	ldr	r2, [r7, #28]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 8158 	bne.w	800120e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4a9a      	ldr	r2, [pc, #616]	@ (80011cc <HAL_GPIO_Init+0x2a0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d05e      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f68:	4a98      	ldr	r2, [pc, #608]	@ (80011cc <HAL_GPIO_Init+0x2a0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d875      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f6e:	4a98      	ldr	r2, [pc, #608]	@ (80011d0 <HAL_GPIO_Init+0x2a4>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d058      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f74:	4a96      	ldr	r2, [pc, #600]	@ (80011d0 <HAL_GPIO_Init+0x2a4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d86f      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f7a:	4a96      	ldr	r2, [pc, #600]	@ (80011d4 <HAL_GPIO_Init+0x2a8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d052      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f80:	4a94      	ldr	r2, [pc, #592]	@ (80011d4 <HAL_GPIO_Init+0x2a8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d869      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f86:	4a94      	ldr	r2, [pc, #592]	@ (80011d8 <HAL_GPIO_Init+0x2ac>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d04c      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f8c:	4a92      	ldr	r2, [pc, #584]	@ (80011d8 <HAL_GPIO_Init+0x2ac>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d863      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f92:	4a92      	ldr	r2, [pc, #584]	@ (80011dc <HAL_GPIO_Init+0x2b0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d046      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
 8000f98:	4a90      	ldr	r2, [pc, #576]	@ (80011dc <HAL_GPIO_Init+0x2b0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d85d      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000f9e:	2b12      	cmp	r3, #18
 8000fa0:	d82a      	bhi.n	8000ff8 <HAL_GPIO_Init+0xcc>
 8000fa2:	2b12      	cmp	r3, #18
 8000fa4:	d859      	bhi.n	800105a <HAL_GPIO_Init+0x12e>
 8000fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fac <HAL_GPIO_Init+0x80>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	08001027 	.word	0x08001027
 8000fb0:	08001001 	.word	0x08001001
 8000fb4:	08001013 	.word	0x08001013
 8000fb8:	08001055 	.word	0x08001055
 8000fbc:	0800105b 	.word	0x0800105b
 8000fc0:	0800105b 	.word	0x0800105b
 8000fc4:	0800105b 	.word	0x0800105b
 8000fc8:	0800105b 	.word	0x0800105b
 8000fcc:	0800105b 	.word	0x0800105b
 8000fd0:	0800105b 	.word	0x0800105b
 8000fd4:	0800105b 	.word	0x0800105b
 8000fd8:	0800105b 	.word	0x0800105b
 8000fdc:	0800105b 	.word	0x0800105b
 8000fe0:	0800105b 	.word	0x0800105b
 8000fe4:	0800105b 	.word	0x0800105b
 8000fe8:	0800105b 	.word	0x0800105b
 8000fec:	0800105b 	.word	0x0800105b
 8000ff0:	08001009 	.word	0x08001009
 8000ff4:	0800101d 	.word	0x0800101d
 8000ff8:	4a79      	ldr	r2, [pc, #484]	@ (80011e0 <HAL_GPIO_Init+0x2b4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ffe:	e02c      	b.n	800105a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	623b      	str	r3, [r7, #32]
          break;
 8001006:	e029      	b.n	800105c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	3304      	adds	r3, #4
 800100e:	623b      	str	r3, [r7, #32]
          break;
 8001010:	e024      	b.n	800105c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	3308      	adds	r3, #8
 8001018:	623b      	str	r3, [r7, #32]
          break;
 800101a:	e01f      	b.n	800105c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	330c      	adds	r3, #12
 8001022:	623b      	str	r3, [r7, #32]
          break;
 8001024:	e01a      	b.n	800105c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800102e:	2304      	movs	r3, #4
 8001030:	623b      	str	r3, [r7, #32]
          break;
 8001032:	e013      	b.n	800105c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d105      	bne.n	8001048 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800103c:	2308      	movs	r3, #8
 800103e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	611a      	str	r2, [r3, #16]
          break;
 8001046:	e009      	b.n	800105c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001048:	2308      	movs	r3, #8
 800104a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	615a      	str	r2, [r3, #20]
          break;
 8001052:	e003      	b.n	800105c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e000      	b.n	800105c <HAL_GPIO_Init+0x130>
          break;
 800105a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	2bff      	cmp	r3, #255	@ 0xff
 8001060:	d801      	bhi.n	8001066 <HAL_GPIO_Init+0x13a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	e001      	b.n	800106a <HAL_GPIO_Init+0x13e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3304      	adds	r3, #4
 800106a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2bff      	cmp	r3, #255	@ 0xff
 8001070:	d802      	bhi.n	8001078 <HAL_GPIO_Init+0x14c>
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x152>
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	3b08      	subs	r3, #8
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	210f      	movs	r1, #15
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	fa01 f303 	lsl.w	r3, r1, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	401a      	ands	r2, r3
 8001090:	6a39      	ldr	r1, [r7, #32]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	431a      	orrs	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 80b1 	beq.w	800120e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ac:	4b4d      	ldr	r3, [pc, #308]	@ (80011e4 <HAL_GPIO_Init+0x2b8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a4c      	ldr	r2, [pc, #304]	@ (80011e4 <HAL_GPIO_Init+0x2b8>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b4a      	ldr	r3, [pc, #296]	@ (80011e4 <HAL_GPIO_Init+0x2b8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010c4:	4a48      	ldr	r2, [pc, #288]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	220f      	movs	r2, #15
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	4013      	ands	r3, r2
 80010e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a40      	ldr	r2, [pc, #256]	@ (80011ec <HAL_GPIO_Init+0x2c0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d013      	beq.n	8001118 <HAL_GPIO_Init+0x1ec>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a3f      	ldr	r2, [pc, #252]	@ (80011f0 <HAL_GPIO_Init+0x2c4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d00d      	beq.n	8001114 <HAL_GPIO_Init+0x1e8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a3e      	ldr	r2, [pc, #248]	@ (80011f4 <HAL_GPIO_Init+0x2c8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d007      	beq.n	8001110 <HAL_GPIO_Init+0x1e4>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3d      	ldr	r2, [pc, #244]	@ (80011f8 <HAL_GPIO_Init+0x2cc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d101      	bne.n	800110c <HAL_GPIO_Init+0x1e0>
 8001108:	2303      	movs	r3, #3
 800110a:	e006      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 800110c:	2304      	movs	r3, #4
 800110e:	e004      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001110:	2302      	movs	r3, #2
 8001112:	e002      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001114:	2301      	movs	r3, #1
 8001116:	e000      	b.n	800111a <HAL_GPIO_Init+0x1ee>
 8001118:	2300      	movs	r3, #0
 800111a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800111c:	f002 0203 	and.w	r2, r2, #3
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	4093      	lsls	r3, r2
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800112a:	492f      	ldr	r1, [pc, #188]	@ (80011e8 <HAL_GPIO_Init+0x2bc>)
 800112c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001144:	4b2d      	ldr	r3, [pc, #180]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	492c      	ldr	r1, [pc, #176]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	608b      	str	r3, [r1, #8]
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001152:	4b2a      	ldr	r3, [pc, #168]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	43db      	mvns	r3, r3
 800115a:	4928      	ldr	r1, [pc, #160]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 800115c:	4013      	ands	r3, r2
 800115e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	4922      	ldr	r1, [pc, #136]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	60cb      	str	r3, [r1, #12]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800117a:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	491e      	ldr	r1, [pc, #120]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 8001184:	4013      	ands	r3, r2
 8001186:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	4918      	ldr	r1, [pc, #96]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4914      	ldr	r1, [pc, #80]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d021      	beq.n	8001200 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	490e      	ldr	r1, [pc, #56]	@ (80011fc <HAL_GPIO_Init+0x2d0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	600b      	str	r3, [r1, #0]
 80011c8:	e021      	b.n	800120e <HAL_GPIO_Init+0x2e2>
 80011ca:	bf00      	nop
 80011cc:	10320000 	.word	0x10320000
 80011d0:	10310000 	.word	0x10310000
 80011d4:	10220000 	.word	0x10220000
 80011d8:	10210000 	.word	0x10210000
 80011dc:	10120000 	.word	0x10120000
 80011e0:	10110000 	.word	0x10110000
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40010c00 	.word	0x40010c00
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40011400 	.word	0x40011400
 80011fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001200:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <HAL_GPIO_Init+0x304>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	43db      	mvns	r3, r3
 8001208:	4909      	ldr	r1, [pc, #36]	@ (8001230 <HAL_GPIO_Init+0x304>)
 800120a:	4013      	ands	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	3301      	adds	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121a:	fa22 f303 	lsr.w	r3, r2, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	f47f ae8e 	bne.w	8000f40 <HAL_GPIO_Init+0x14>
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	372c      	adds	r7, #44	@ 0x2c
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	40010400 	.word	0x40010400

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	611a      	str	r2, [r3, #16]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d006      	beq.n	8001288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f806 	bl	8001294 <HAL_GPIO_EXTI_Callback>
  }
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40010400 	.word	0x40010400

08001294 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e272      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8087 	beq.w	80013d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c8:	4b92      	ldr	r3, [pc, #584]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	2b04      	cmp	r3, #4
 80012d2:	d00c      	beq.n	80012ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d112      	bne.n	8001306 <HAL_RCC_OscConfig+0x5e>
 80012e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ec:	d10b      	bne.n	8001306 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ee:	4b89      	ldr	r3, [pc, #548]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d06c      	beq.n	80013d4 <HAL_RCC_OscConfig+0x12c>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d168      	bne.n	80013d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e24c      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800130e:	d106      	bne.n	800131e <HAL_RCC_OscConfig+0x76>
 8001310:	4b80      	ldr	r3, [pc, #512]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a7f      	ldr	r2, [pc, #508]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e02e      	b.n	800137c <HAL_RCC_OscConfig+0xd4>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0x98>
 8001326:	4b7b      	ldr	r3, [pc, #492]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a7a      	ldr	r2, [pc, #488]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 800132c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b78      	ldr	r3, [pc, #480]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a77      	ldr	r2, [pc, #476]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001338:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e01d      	b.n	800137c <HAL_RCC_OscConfig+0xd4>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001348:	d10c      	bne.n	8001364 <HAL_RCC_OscConfig+0xbc>
 800134a:	4b72      	ldr	r3, [pc, #456]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a71      	ldr	r2, [pc, #452]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b6f      	ldr	r3, [pc, #444]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a6e      	ldr	r2, [pc, #440]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e00b      	b.n	800137c <HAL_RCC_OscConfig+0xd4>
 8001364:	4b6b      	ldr	r3, [pc, #428]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a6a      	ldr	r2, [pc, #424]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 800136a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b68      	ldr	r3, [pc, #416]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a67      	ldr	r2, [pc, #412]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d013      	beq.n	80013ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fbe4 	bl	8000b50 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fbe0 	bl	8000b50 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	@ 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e200      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	4b5d      	ldr	r3, [pc, #372]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0xe4>
 80013aa:	e014      	b.n	80013d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fbd0 	bl	8000b50 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fbcc 	bl	8000b50 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	@ 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e1ec      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	4b53      	ldr	r3, [pc, #332]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x10c>
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d063      	beq.n	80014aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00b      	beq.n	8001406 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ee:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d11c      	bne.n	8001434 <HAL_RCC_OscConfig+0x18c>
 80013fa:	4b46      	ldr	r3, [pc, #280]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d116      	bne.n	8001434 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	4b43      	ldr	r3, [pc, #268]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <HAL_RCC_OscConfig+0x176>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d001      	beq.n	800141e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e1c0      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141e:	4b3d      	ldr	r3, [pc, #244]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	4939      	ldr	r1, [pc, #228]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 800142e:	4313      	orrs	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	e03a      	b.n	80014aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143c:	4b36      	ldr	r3, [pc, #216]	@ (8001518 <HAL_RCC_OscConfig+0x270>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7ff fb85 	bl	8000b50 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fb81 	bl	8000b50 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e1a1      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	4927      	ldr	r1, [pc, #156]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
 800147c:	e015      	b.n	80014aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <HAL_RCC_OscConfig+0x270>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fb64 	bl	8000b50 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148c:	f7ff fb60 	bl	8000b50 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e180      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d03a      	beq.n	800152c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d019      	beq.n	80014f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014be:	4b17      	ldr	r3, [pc, #92]	@ (800151c <HAL_RCC_OscConfig+0x274>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fb44 	bl	8000b50 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fb40 	bl	8000b50 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e160      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 face 	bl	8001a8c <RCC_Delay>
 80014f0:	e01c      	b.n	800152c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_RCC_OscConfig+0x274>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff fb2a 	bl	8000b50 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fe:	e00f      	b.n	8001520 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001500:	f7ff fb26 	bl	8000b50 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d908      	bls.n	8001520 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e146      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
 8001512:	bf00      	nop
 8001514:	40021000 	.word	0x40021000
 8001518:	42420000 	.word	0x42420000
 800151c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b92      	ldr	r3, [pc, #584]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e9      	bne.n	8001500 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a6 	beq.w	8001686 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b8b      	ldr	r3, [pc, #556]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10d      	bne.n	8001566 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	4b88      	ldr	r3, [pc, #544]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a87      	ldr	r2, [pc, #540]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b85      	ldr	r3, [pc, #532]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b82      	ldr	r3, [pc, #520]	@ (8001770 <HAL_RCC_OscConfig+0x4c8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b7f      	ldr	r3, [pc, #508]	@ (8001770 <HAL_RCC_OscConfig+0x4c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a7e      	ldr	r2, [pc, #504]	@ (8001770 <HAL_RCC_OscConfig+0x4c8>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fae7 	bl	8000b50 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001586:	f7ff fae3 	bl	8000b50 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b64      	cmp	r3, #100	@ 0x64
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e103      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b75      	ldr	r3, [pc, #468]	@ (8001770 <HAL_RCC_OscConfig+0x4c8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x312>
 80015ac:	4b6f      	ldr	r3, [pc, #444]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4a6e      	ldr	r2, [pc, #440]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6213      	str	r3, [r2, #32]
 80015b8:	e02d      	b.n	8001616 <HAL_RCC_OscConfig+0x36e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x334>
 80015c2:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a69      	ldr	r2, [pc, #420]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6213      	str	r3, [r2, #32]
 80015ce:	4b67      	ldr	r3, [pc, #412]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4a66      	ldr	r2, [pc, #408]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	6213      	str	r3, [r2, #32]
 80015da:	e01c      	b.n	8001616 <HAL_RCC_OscConfig+0x36e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d10c      	bne.n	80015fe <HAL_RCC_OscConfig+0x356>
 80015e4:	4b61      	ldr	r3, [pc, #388]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a60      	ldr	r2, [pc, #384]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	f043 0304 	orr.w	r3, r3, #4
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	4b5e      	ldr	r3, [pc, #376]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a5d      	ldr	r2, [pc, #372]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	e00b      	b.n	8001616 <HAL_RCC_OscConfig+0x36e>
 80015fe:	4b5b      	ldr	r3, [pc, #364]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	4a5a      	ldr	r2, [pc, #360]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6213      	str	r3, [r2, #32]
 800160a:	4b58      	ldr	r3, [pc, #352]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	4a57      	ldr	r2, [pc, #348]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001610:	f023 0304 	bic.w	r3, r3, #4
 8001614:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d015      	beq.n	800164a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff fa97 	bl	8000b50 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001624:	e00a      	b.n	800163c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001626:	f7ff fa93 	bl	8000b50 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e0b1      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163c:	4b4b      	ldr	r3, [pc, #300]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0ee      	beq.n	8001626 <HAL_RCC_OscConfig+0x37e>
 8001648:	e014      	b.n	8001674 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fa81 	bl	8000b50 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff fa7d 	bl	8000b50 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e09b      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001668:	4b40      	ldr	r3, [pc, #256]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ee      	bne.n	8001652 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d105      	bne.n	8001686 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167a:	4b3c      	ldr	r3, [pc, #240]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4a3b      	ldr	r2, [pc, #236]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001684:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8087 	beq.w	800179e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001690:	4b36      	ldr	r3, [pc, #216]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b08      	cmp	r3, #8
 800169a:	d061      	beq.n	8001760 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d146      	bne.n	8001732 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a4:	4b33      	ldr	r3, [pc, #204]	@ (8001774 <HAL_RCC_OscConfig+0x4cc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fa51 	bl	8000b50 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b2:	f7ff fa4d 	bl	8000b50 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e06d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	4b29      	ldr	r3, [pc, #164]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d8:	d108      	bne.n	80016ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	4921      	ldr	r1, [pc, #132]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a19      	ldr	r1, [r3, #32]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fc:	430b      	orrs	r3, r1
 80016fe:	491b      	ldr	r1, [pc, #108]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_OscConfig+0x4cc>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff fa21 	bl	8000b50 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff fa1d 	bl	8000b50 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e03d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x46a>
 8001730:	e035      	b.n	800179e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <HAL_RCC_OscConfig+0x4cc>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fa0a 	bl	8000b50 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff fa06 	bl	8000b50 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e026      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_RCC_OscConfig+0x4c4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x498>
 800175e:	e01e      	b.n	800179e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d107      	bne.n	8001778 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e019      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
 800176c:	40021000 	.word	0x40021000
 8001770:	40007000 	.word	0x40007000
 8001774:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001778:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <HAL_RCC_OscConfig+0x500>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	429a      	cmp	r2, r3
 800178a:	d106      	bne.n	800179a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0d0      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b6a      	ldr	r3, [pc, #424]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d910      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b67      	ldr	r3, [pc, #412]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 0207 	bic.w	r2, r3, #7
 80017d6:	4965      	ldr	r1, [pc, #404]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a58      	ldr	r2, [pc, #352]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001812:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4a52      	ldr	r2, [pc, #328]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800182a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d040      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d115      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e073      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e06b      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4936      	ldr	r1, [pc, #216]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff f958 	bl	8000b50 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff f954 	bl	8000b50 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e053      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b27      	ldr	r3, [pc, #156]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d210      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0207 	bic.w	r2, r3, #7
 80018e2:	4922      	ldr	r1, [pc, #136]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	4313      	orrs	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4602      	mov	r2, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	490a      	ldr	r1, [pc, #40]	@ (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	@ (8001978 <HAL_RCC_ClockConfig+0x1cc>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_RCC_ClockConfig+0x1d0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f8b6 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40022000 	.word	0x40022000
 8001970:	40021000 	.word	0x40021000
 8001974:	0800445c 	.word	0x0800445c
 8001978:	20000004 	.word	0x20000004
 800197c:	20000008 	.word	0x20000008

08001980 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800199a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x94>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d002      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x30>
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d003      	beq.n	80019b6 <HAL_RCC_GetSysClockFreq+0x36>
 80019ae:	e027      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80019b2:	613b      	str	r3, [r7, #16]
      break;
 80019b4:	e027      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	4a17      	ldr	r2, [pc, #92]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x9c>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d010      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x94>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	0c5b      	lsrs	r3, r3, #17
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019da:	5cd3      	ldrb	r3, [r2, r3]
 80019dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x98>)
 80019e2:	fb03 f202 	mul.w	r2, r3, r2
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	e004      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	613b      	str	r3, [r7, #16]
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a02:	613b      	str	r3, [r7, #16]
      break;
 8001a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a06:	693b      	ldr	r3, [r7, #16]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	007a1200 	.word	0x007a1200
 8001a1c:	08004474 	.word	0x08004474
 8001a20:	08004484 	.word	0x08004484
 8001a24:	003d0900 	.word	0x003d0900

08001a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	@ (8001a38 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	20000004 	.word	0x20000004

08001a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a40:	f7ff fff2 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	0a1b      	lsrs	r3, r3, #8
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	@ (8001a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	0800446c 	.word	0x0800446c

08001a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	0adb      	lsrs	r3, r3, #11
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4903      	ldr	r1, [pc, #12]	@ (8001a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	0800446c 	.word	0x0800446c

08001a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <RCC_Delay+0x34>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <RCC_Delay+0x38>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0a5b      	lsrs	r3, r3, #9
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa8:	bf00      	nop
  }
  while (Delay --);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f9      	bne.n	8001aa8 <RCC_Delay+0x1c>
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	10624dd3 	.word	0x10624dd3

08001ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e041      	b.n	8001b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7fe fe22 	bl	8000738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3304      	adds	r3, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f000 fab2 	bl	8002070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e041      	b.n	8001bfc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f839 	bl	8001c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f000 fa63 	bl	8002070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_TIM_PWM_Start+0x24>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e022      	b.n	8001c82 <HAL_TIM_PWM_Start+0x6a>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d109      	bne.n	8001c56 <HAL_TIM_PWM_Start+0x3e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	e015      	b.n	8001c82 <HAL_TIM_PWM_Start+0x6a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d109      	bne.n	8001c70 <HAL_TIM_PWM_Start+0x58>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	e008      	b.n	8001c82 <HAL_TIM_PWM_Start+0x6a>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	bf14      	ite	ne
 8001c7c:	2301      	movne	r3, #1
 8001c7e:	2300      	moveq	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e05e      	b.n	8001d48 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <HAL_TIM_PWM_Start+0x82>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c98:	e013      	b.n	8001cc2 <HAL_TIM_PWM_Start+0xaa>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d104      	bne.n	8001caa <HAL_TIM_PWM_Start+0x92>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ca8:	e00b      	b.n	8001cc2 <HAL_TIM_PWM_Start+0xaa>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d104      	bne.n	8001cba <HAL_TIM_PWM_Start+0xa2>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cb8:	e003      	b.n	8001cc2 <HAL_TIM_PWM_Start+0xaa>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc5c 	bl	8002588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8001d50 <HAL_TIM_PWM_Start+0x138>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d107      	bne.n	8001cea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a18      	ldr	r2, [pc, #96]	@ (8001d50 <HAL_TIM_PWM_Start+0x138>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00e      	beq.n	8001d12 <HAL_TIM_PWM_Start+0xfa>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cfc:	d009      	beq.n	8001d12 <HAL_TIM_PWM_Start+0xfa>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <HAL_TIM_PWM_Start+0x13c>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_TIM_PWM_Start+0xfa>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a12      	ldr	r2, [pc, #72]	@ (8001d58 <HAL_TIM_PWM_Start+0x140>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d111      	bne.n	8001d36 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d010      	beq.n	8001d46 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d34:	e007      	b.n	8001d46 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40000800 	.word	0x40000800

08001d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e0ae      	b.n	8001ed8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	f200 809f 	bhi.w	8001ec8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001dc5 	.word	0x08001dc5
 8001d94:	08001ec9 	.word	0x08001ec9
 8001d98:	08001ec9 	.word	0x08001ec9
 8001d9c:	08001ec9 	.word	0x08001ec9
 8001da0:	08001e05 	.word	0x08001e05
 8001da4:	08001ec9 	.word	0x08001ec9
 8001da8:	08001ec9 	.word	0x08001ec9
 8001dac:	08001ec9 	.word	0x08001ec9
 8001db0:	08001e47 	.word	0x08001e47
 8001db4:	08001ec9 	.word	0x08001ec9
 8001db8:	08001ec9 	.word	0x08001ec9
 8001dbc:	08001ec9 	.word	0x08001ec9
 8001dc0:	08001e87 	.word	0x08001e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f9be 	bl	800214c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0208 	orr.w	r2, r2, #8
 8001dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0204 	bic.w	r2, r2, #4
 8001dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6999      	ldr	r1, [r3, #24]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	619a      	str	r2, [r3, #24]
      break;
 8001e02:	e064      	b.n	8001ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fa04 	bl	8002218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6999      	ldr	r1, [r3, #24]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	021a      	lsls	r2, r3, #8
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	619a      	str	r2, [r3, #24]
      break;
 8001e44:	e043      	b.n	8001ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68b9      	ldr	r1, [r7, #8]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fa4d 	bl	80022ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0208 	orr.w	r2, r2, #8
 8001e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69da      	ldr	r2, [r3, #28]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0204 	bic.w	r2, r2, #4
 8001e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69d9      	ldr	r1, [r3, #28]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	61da      	str	r2, [r3, #28]
      break;
 8001e84:	e023      	b.n	8001ece <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fa97 	bl	80023c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69d9      	ldr	r1, [r3, #28]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	021a      	lsls	r2, r3, #8
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	61da      	str	r2, [r3, #28]
      break;
 8001ec6:	e002      	b.n	8001ece <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	75fb      	strb	r3, [r7, #23]
      break;
 8001ecc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_TIM_ConfigClockSource+0x1c>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0b4      	b.n	8002066 <HAL_TIM_ConfigClockSource+0x186>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f34:	d03e      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f3a:	f200 8087 	bhi.w	800204c <HAL_TIM_ConfigClockSource+0x16c>
 8001f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f42:	f000 8086 	beq.w	8002052 <HAL_TIM_ConfigClockSource+0x172>
 8001f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4a:	d87f      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x16c>
 8001f4c:	2b70      	cmp	r3, #112	@ 0x70
 8001f4e:	d01a      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xa6>
 8001f50:	2b70      	cmp	r3, #112	@ 0x70
 8001f52:	d87b      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x16c>
 8001f54:	2b60      	cmp	r3, #96	@ 0x60
 8001f56:	d050      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x11a>
 8001f58:	2b60      	cmp	r3, #96	@ 0x60
 8001f5a:	d877      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x16c>
 8001f5c:	2b50      	cmp	r3, #80	@ 0x50
 8001f5e:	d03c      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0xfa>
 8001f60:	2b50      	cmp	r3, #80	@ 0x50
 8001f62:	d873      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x16c>
 8001f64:	2b40      	cmp	r3, #64	@ 0x40
 8001f66:	d058      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x13a>
 8001f68:	2b40      	cmp	r3, #64	@ 0x40
 8001f6a:	d86f      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x16c>
 8001f6c:	2b30      	cmp	r3, #48	@ 0x30
 8001f6e:	d064      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x15a>
 8001f70:	2b30      	cmp	r3, #48	@ 0x30
 8001f72:	d86b      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x16c>
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d060      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x15a>
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d867      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x16c>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05c      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x15a>
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d05a      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x15a>
 8001f84:	e062      	b.n	800204c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f96:	f000 fad8 	bl	800254a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	609a      	str	r2, [r3, #8]
      break;
 8001fb2:	e04f      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fc4:	f000 fac1 	bl	800254a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fd6:	609a      	str	r2, [r3, #8]
      break;
 8001fd8:	e03c      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f000 fa38 	bl	800245c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2150      	movs	r1, #80	@ 0x50
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fa8f 	bl	8002516 <TIM_ITRx_SetConfig>
      break;
 8001ff8:	e02c      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002006:	461a      	mov	r2, r3
 8002008:	f000 fa56 	bl	80024b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2160      	movs	r1, #96	@ 0x60
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fa7f 	bl	8002516 <TIM_ITRx_SetConfig>
      break;
 8002018:	e01c      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002026:	461a      	mov	r2, r3
 8002028:	f000 fa18 	bl	800245c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2140      	movs	r1, #64	@ 0x40
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fa6f 	bl	8002516 <TIM_ITRx_SetConfig>
      break;
 8002038:	e00c      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4619      	mov	r1, r3
 8002044:	4610      	mov	r0, r2
 8002046:	f000 fa66 	bl	8002516 <TIM_ITRx_SetConfig>
      break;
 800204a:	e003      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
      break;
 8002050:	e000      	b.n	8002054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a2f      	ldr	r2, [pc, #188]	@ (8002140 <TIM_Base_SetConfig+0xd0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00b      	beq.n	80020a0 <TIM_Base_SetConfig+0x30>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208e:	d007      	beq.n	80020a0 <TIM_Base_SetConfig+0x30>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a2c      	ldr	r2, [pc, #176]	@ (8002144 <TIM_Base_SetConfig+0xd4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d003      	beq.n	80020a0 <TIM_Base_SetConfig+0x30>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <TIM_Base_SetConfig+0xd8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d108      	bne.n	80020b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a22      	ldr	r2, [pc, #136]	@ (8002140 <TIM_Base_SetConfig+0xd0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00b      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c0:	d007      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1f      	ldr	r2, [pc, #124]	@ (8002144 <TIM_Base_SetConfig+0xd4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d003      	beq.n	80020d2 <TIM_Base_SetConfig+0x62>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002148 <TIM_Base_SetConfig+0xd8>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d108      	bne.n	80020e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <TIM_Base_SetConfig+0xd0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d103      	bne.n	8002118 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f023 0201 	bic.w	r2, r3, #1
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]
  }
}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40000400 	.word	0x40000400
 8002148:	40000800 	.word	0x40000800

0800214c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f023 0201 	bic.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800217a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f023 0302 	bic.w	r3, r3, #2
 8002194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002214 <TIM_OC1_SetConfig+0xc8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d10c      	bne.n	80021c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f023 0308 	bic.w	r3, r3, #8
 80021ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f023 0304 	bic.w	r3, r3, #4
 80021c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a13      	ldr	r2, [pc, #76]	@ (8002214 <TIM_OC1_SetConfig+0xc8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d111      	bne.n	80021ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80021d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	621a      	str	r2, [r3, #32]
}
 8002208:	bf00      	nop
 800220a:	371c      	adds	r7, #28
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40012c00 	.word	0x40012c00

08002218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f023 0210 	bic.w	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800224e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f023 0320 	bic.w	r3, r3, #32
 8002262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <TIM_OC2_SetConfig+0xd0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d10d      	bne.n	8002294 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800227e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002292:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <TIM_OC2_SetConfig+0xd0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d113      	bne.n	80022c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	621a      	str	r2, [r3, #32]
}
 80022de:	bf00      	nop
 80022e0:	371c      	adds	r7, #28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00

080022ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800231a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1d      	ldr	r2, [pc, #116]	@ (80023bc <TIM_OC3_SetConfig+0xd0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d10d      	bne.n	8002366 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002364:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a14      	ldr	r2, [pc, #80]	@ (80023bc <TIM_OC3_SetConfig+0xd0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d113      	bne.n	8002396 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800237c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	621a      	str	r2, [r3, #32]
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40012c00 	.word	0x40012c00

080023c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800240a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	031b      	lsls	r3, r3, #12
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a0f      	ldr	r2, [pc, #60]	@ (8002458 <TIM_OC4_SetConfig+0x98>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d109      	bne.n	8002434 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	019b      	lsls	r3, r3, #6
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	621a      	str	r2, [r3, #32]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40012c00 	.word	0x40012c00

0800245c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f023 0201 	bic.w	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f023 030a 	bic.w	r3, r3, #10
 8002498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	f023 0210 	bic.w	r2, r3, #16
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	031b      	lsls	r3, r3, #12
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	621a      	str	r2, [r3, #32]
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800252c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	f043 0307 	orr.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800254a:	b480      	push	{r7}
 800254c:	b087      	sub	sp, #28
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002564:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	021a      	lsls	r2, r3, #8
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	431a      	orrs	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4313      	orrs	r3, r2
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	609a      	str	r2, [r3, #8]
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 031f 	and.w	r3, r3, #31
 800259a:	2201      	movs	r2, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	401a      	ands	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	fa01 f303 	lsl.w	r3, r1, r3
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	621a      	str	r2, [r3, #32]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e046      	b.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800260e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a16      	ldr	r2, [pc, #88]	@ (8002680 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00e      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002634:	d009      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d004      	beq.n	800264a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10c      	bne.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4313      	orrs	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800

0800268c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e03d      	b.n	8002724 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e042      	b.n	80027c6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d106      	bne.n	800275a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fe f853 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2224      	movs	r2, #36	@ 0x24
 800275e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002770:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fdfa 	bl	800336c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002786:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002796:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b08a      	sub	sp, #40	@ 0x28
 80027d2:	af02      	add	r7, sp, #8
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	4613      	mov	r3, r2
 80027dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d175      	bne.n	80028da <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_UART_Transmit+0x2c>
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06e      	b.n	80028dc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2221      	movs	r2, #33	@ 0x21
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800280c:	f7fe f9a0 	bl	8000b50 <HAL_GetTick>
 8002810:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	88fa      	ldrh	r2, [r7, #6]
 8002816:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002826:	d108      	bne.n	800283a <HAL_UART_Transmit+0x6c>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	e003      	b.n	8002842 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002842:	e02e      	b.n	80028a2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2200      	movs	r2, #0
 800284c:	2180      	movs	r1, #128	@ 0x80
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fb98 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e03a      	b.n	80028dc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10b      	bne.n	8002884 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	3302      	adds	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	e007      	b.n	8002894 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	781a      	ldrb	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3301      	adds	r3, #1
 8002892:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1cb      	bne.n	8002844 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2140      	movs	r1, #64	@ 0x40
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fb64 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e006      	b.n	80028dc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b20      	cmp	r3, #32
 8002902:	f040 8081 	bne.w	8002a08 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_UART_Receive+0x2e>
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e079      	b.n	8002a0a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2222      	movs	r2, #34	@ 0x22
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292a:	f7fe f911 	bl	8000b50 <HAL_GetTick>
 800292e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002944:	d108      	bne.n	8002958 <HAL_UART_Receive+0x74>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d104      	bne.n	8002958 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	e003      	b.n	8002960 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002960:	e047      	b.n	80029f2 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	2120      	movs	r1, #32
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fb09 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e042      	b.n	8002a0a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002996:	b29a      	uxth	r2, r3
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	3302      	adds	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e01f      	b.n	80029e4 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ac:	d007      	beq.n	80029be <HAL_UART_Receive+0xda>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_UART_Receive+0xe8>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e008      	b.n	80029de <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1b2      	bne.n	8002962 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0ba      	sub	sp, #232	@ 0xe8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_UART_IRQHandler+0x66>
 8002a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fbbc 	bl	80031f0 <UART_Receive_IT>
      return;
 8002a78:	e25b      	b.n	8002f32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80de 	beq.w	8002c40 <HAL_UART_IRQHandler+0x22c>
 8002a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80d1 	beq.w	8002c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xae>
 8002aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_UART_IRQHandler+0xd2>
 8002ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f043 0202 	orr.w	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_UART_IRQHandler+0xf6>
 8002af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d011      	beq.n	8002b3a <HAL_UART_IRQHandler+0x126>
 8002b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f043 0208 	orr.w	r2, r3, #8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 81f2 	beq.w	8002f28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_UART_IRQHandler+0x14e>
 8002b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fb47 	bl	80031f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_UART_IRQHandler+0x17a>
 8002b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04f      	beq.n	8002c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa51 	bl	8003036 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d041      	beq.n	8002c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1d9      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfa:	4a7e      	ldr	r2, [pc, #504]	@ (8002df4 <HAL_UART_IRQHandler+0x3e0>)
 8002bfc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f91a 	bl	8000e3c <HAL_DMA_Abort_IT>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	e00e      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f99c 	bl	8002f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e00a      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f998 	bl	8002f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e006      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f994 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c3a:	e175      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	bf00      	nop
    return;
 8002c3e:	e173      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	f040 814f 	bne.w	8002ee8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8148 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8141 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80b6 	beq.w	8002df8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8145 	beq.w	8002f2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002caa:	429a      	cmp	r2, r3
 8002cac:	f080 813e 	bcs.w	8002f2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	f000 8088 	beq.w	8002dd4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ce2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002cf0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1d9      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3314      	adds	r3, #20
 8002d16:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3314      	adds	r3, #20
 8002d30:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d34:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d38:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d3c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d40:	e841 2300 	strex	r3, r2, [r1]
 8002d44:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1e1      	bne.n	8002d10 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3314      	adds	r3, #20
 8002d52:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3314      	adds	r3, #20
 8002d6c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d74:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d76:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d78:	e841 2300 	strex	r3, r2, [r1]
 8002d7c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1e3      	bne.n	8002d4c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002da4:	f023 0310 	bic.w	r3, r3, #16
 8002da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	330c      	adds	r3, #12
 8002db2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002db6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002db8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e3      	bne.n	8002d92 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fff9 	bl	8000dc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	4619      	mov	r1, r3
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f8bf 	bl	8002f6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002df0:	e09c      	b.n	8002f2c <HAL_UART_IRQHandler+0x518>
 8002df2:	bf00      	nop
 8002df4:	080030fb 	.word	0x080030fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 808e 	beq.w	8002f30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8089 	beq.w	8002f30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	330c      	adds	r3, #12
 8002e3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e42:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e3      	bne.n	8002e1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3314      	adds	r3, #20
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	623b      	str	r3, [r7, #32]
   return(result);
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e82:	e841 2300 	strex	r3, r2, [r1]
 8002e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e3      	bne.n	8002e56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0310 	bic.w	r3, r3, #16
 8002eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ec0:	61fa      	str	r2, [r7, #28]
 8002ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e3      	bne.n	8002e9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eda:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ede:	4619      	mov	r1, r3
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f844 	bl	8002f6e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ee6:	e023      	b.n	8002f30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d009      	beq.n	8002f08 <HAL_UART_IRQHandler+0x4f4>
 8002ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f90e 	bl	8003122 <UART_Transmit_IT>
    return;
 8002f06:	e014      	b.n	8002f32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00e      	beq.n	8002f32 <HAL_UART_IRQHandler+0x51e>
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f94d 	bl	80031c0 <UART_EndTransmit_IT>
    return;
 8002f26:	e004      	b.n	8002f32 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f30:	bf00      	nop
  }
}
 8002f32:	37e8      	adds	r7, #232	@ 0xe8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr

08002f6e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f94:	e03b      	b.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d037      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fd fdd7 	bl	8000b50 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	6a3a      	ldr	r2, [r7, #32]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e03a      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d023      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b80      	cmp	r3, #128	@ 0x80
 8002fca:	d020      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b40      	cmp	r3, #64	@ 0x40
 8002fd0:	d01d      	beq.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d116      	bne.n	800300e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f81d 	bl	8003036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2208      	movs	r2, #8
 8003000:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e00f      	b.n	800302e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	429a      	cmp	r2, r3
 800302a:	d0b4      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003036:	b480      	push	{r7}
 8003038:	b095      	sub	sp, #84	@ 0x54
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	e853 3f00 	ldrex	r3, [r3]
 800304c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800305e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800306c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e5      	bne.n	800303e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3314      	adds	r3, #20
 8003078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	61fb      	str	r3, [r7, #28]
   return(result);
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	64bb      	str	r3, [r7, #72]	@ 0x48
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3314      	adds	r3, #20
 8003090:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003092:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003094:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003096:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800309a:	e841 2300 	strex	r3, r2, [r1]
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e5      	bne.n	8003072 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d119      	bne.n	80030e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f023 0310 	bic.w	r3, r3, #16
 80030c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ce:	61ba      	str	r2, [r7, #24]
 80030d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6979      	ldr	r1, [r7, #20]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	613b      	str	r3, [r7, #16]
   return(result);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e5      	bne.n	80030ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030f0:	bf00      	nop
 80030f2:	3754      	adds	r7, #84	@ 0x54
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff ff21 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003122:	b480      	push	{r7}
 8003124:	b085      	sub	sp, #20
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b21      	cmp	r3, #33	@ 0x21
 8003134:	d13e      	bne.n	80031b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800313e:	d114      	bne.n	800316a <UART_Transmit_IT+0x48>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d110      	bne.n	800316a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	1c9a      	adds	r2, r3, #2
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	621a      	str	r2, [r3, #32]
 8003168:	e008      	b.n	800317c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6211      	str	r1, [r2, #32]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29b      	uxth	r3, r3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4619      	mov	r1, r3
 800318a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800319e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e000      	b.n	80031b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fea9 	bl	8002f38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08c      	sub	sp, #48	@ 0x30
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b22      	cmp	r3, #34	@ 0x22
 8003202:	f040 80ae 	bne.w	8003362 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320e:	d117      	bne.n	8003240 <UART_Receive_IT+0x50>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d113      	bne.n	8003240 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	b29a      	uxth	r2, r3
 8003230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003232:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	1c9a      	adds	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	629a      	str	r2, [r3, #40]	@ 0x28
 800323e:	e026      	b.n	800328e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003246:	2300      	movs	r3, #0
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003252:	d007      	beq.n	8003264 <UART_Receive_IT+0x74>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <UART_Receive_IT+0x82>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e008      	b.n	8003284 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800327e:	b2da      	uxtb	r2, r3
 8003280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003282:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003292:	b29b      	uxth	r3, r3
 8003294:	3b01      	subs	r3, #1
 8003296:	b29b      	uxth	r3, r3
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4619      	mov	r1, r3
 800329c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d15d      	bne.n	800335e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0220 	bic.w	r2, r2, #32
 80032b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d135      	bne.n	8003354 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	613b      	str	r3, [r7, #16]
   return(result);
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f023 0310 	bic.w	r3, r3, #16
 8003304:	627b      	str	r3, [r7, #36]	@ 0x24
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330e:	623a      	str	r2, [r7, #32]
 8003310:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	69f9      	ldr	r1, [r7, #28]
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	61bb      	str	r3, [r7, #24]
   return(result);
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b10      	cmp	r3, #16
 800332e:	d10a      	bne.n	8003346 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff fe0e 	bl	8002f6e <HAL_UARTEx_RxEventCallback>
 8003352:	e002      	b.n	800335a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fdf8 	bl	8002f4a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e002      	b.n	8003364 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
  }
}
 8003364:	4618      	mov	r0, r3
 8003366:	3730      	adds	r7, #48	@ 0x30
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80033a6:	f023 030c 	bic.w	r3, r3, #12
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003480 <UART_SetConfig+0x114>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d103      	bne.n	80033dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033d4:	f7fe fb46 	bl	8001a64 <HAL_RCC_GetPCLK2Freq>
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	e002      	b.n	80033e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7fe fb2e 	bl	8001a3c <HAL_RCC_GetPCLK1Freq>
 80033e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009a      	lsls	r2, r3, #2
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	4a22      	ldr	r2, [pc, #136]	@ (8003484 <UART_SetConfig+0x118>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	0119      	lsls	r1, r3, #4
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009a      	lsls	r2, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fbb2 f2f3 	udiv	r2, r2, r3
 8003418:	4b1a      	ldr	r3, [pc, #104]	@ (8003484 <UART_SetConfig+0x118>)
 800341a:	fba3 0302 	umull	r0, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2064      	movs	r0, #100	@ 0x64
 8003422:	fb00 f303 	mul.w	r3, r0, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	3332      	adds	r3, #50	@ 0x32
 800342c:	4a15      	ldr	r2, [pc, #84]	@ (8003484 <UART_SetConfig+0x118>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003438:	4419      	add	r1, r3
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009a      	lsls	r2, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003450:	4b0c      	ldr	r3, [pc, #48]	@ (8003484 <UART_SetConfig+0x118>)
 8003452:	fba3 0302 	umull	r0, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2064      	movs	r0, #100	@ 0x64
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	3332      	adds	r3, #50	@ 0x32
 8003464:	4a07      	ldr	r2, [pc, #28]	@ (8003484 <UART_SetConfig+0x118>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	440a      	add	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40013800 	.word	0x40013800
 8003484:	51eb851f 	.word	0x51eb851f

08003488 <std>:
 8003488:	2300      	movs	r3, #0
 800348a:	b510      	push	{r4, lr}
 800348c:	4604      	mov	r4, r0
 800348e:	e9c0 3300 	strd	r3, r3, [r0]
 8003492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003496:	6083      	str	r3, [r0, #8]
 8003498:	8181      	strh	r1, [r0, #12]
 800349a:	6643      	str	r3, [r0, #100]	@ 0x64
 800349c:	81c2      	strh	r2, [r0, #14]
 800349e:	6183      	str	r3, [r0, #24]
 80034a0:	4619      	mov	r1, r3
 80034a2:	2208      	movs	r2, #8
 80034a4:	305c      	adds	r0, #92	@ 0x5c
 80034a6:	f000 f9f9 	bl	800389c <memset>
 80034aa:	4b0d      	ldr	r3, [pc, #52]	@ (80034e0 <std+0x58>)
 80034ac:	6224      	str	r4, [r4, #32]
 80034ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80034b0:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <std+0x5c>)
 80034b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80034b4:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <std+0x60>)
 80034b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80034b8:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <std+0x64>)
 80034ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <std+0x68>)
 80034be:	429c      	cmp	r4, r3
 80034c0:	d006      	beq.n	80034d0 <std+0x48>
 80034c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80034c6:	4294      	cmp	r4, r2
 80034c8:	d002      	beq.n	80034d0 <std+0x48>
 80034ca:	33d0      	adds	r3, #208	@ 0xd0
 80034cc:	429c      	cmp	r4, r3
 80034ce:	d105      	bne.n	80034dc <std+0x54>
 80034d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034d8:	f000 ba58 	b.w	800398c <__retarget_lock_init_recursive>
 80034dc:	bd10      	pop	{r4, pc}
 80034de:	bf00      	nop
 80034e0:	080036ed 	.word	0x080036ed
 80034e4:	0800370f 	.word	0x0800370f
 80034e8:	08003747 	.word	0x08003747
 80034ec:	0800376b 	.word	0x0800376b
 80034f0:	2000016c 	.word	0x2000016c

080034f4 <stdio_exit_handler>:
 80034f4:	4a02      	ldr	r2, [pc, #8]	@ (8003500 <stdio_exit_handler+0xc>)
 80034f6:	4903      	ldr	r1, [pc, #12]	@ (8003504 <stdio_exit_handler+0x10>)
 80034f8:	4803      	ldr	r0, [pc, #12]	@ (8003508 <stdio_exit_handler+0x14>)
 80034fa:	f000 b869 	b.w	80035d0 <_fwalk_sglue>
 80034fe:	bf00      	nop
 8003500:	20000010 	.word	0x20000010
 8003504:	08004221 	.word	0x08004221
 8003508:	20000020 	.word	0x20000020

0800350c <cleanup_stdio>:
 800350c:	6841      	ldr	r1, [r0, #4]
 800350e:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <cleanup_stdio+0x34>)
 8003510:	b510      	push	{r4, lr}
 8003512:	4299      	cmp	r1, r3
 8003514:	4604      	mov	r4, r0
 8003516:	d001      	beq.n	800351c <cleanup_stdio+0x10>
 8003518:	f000 fe82 	bl	8004220 <_fflush_r>
 800351c:	68a1      	ldr	r1, [r4, #8]
 800351e:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <cleanup_stdio+0x38>)
 8003520:	4299      	cmp	r1, r3
 8003522:	d002      	beq.n	800352a <cleanup_stdio+0x1e>
 8003524:	4620      	mov	r0, r4
 8003526:	f000 fe7b 	bl	8004220 <_fflush_r>
 800352a:	68e1      	ldr	r1, [r4, #12]
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <cleanup_stdio+0x3c>)
 800352e:	4299      	cmp	r1, r3
 8003530:	d004      	beq.n	800353c <cleanup_stdio+0x30>
 8003532:	4620      	mov	r0, r4
 8003534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003538:	f000 be72 	b.w	8004220 <_fflush_r>
 800353c:	bd10      	pop	{r4, pc}
 800353e:	bf00      	nop
 8003540:	2000016c 	.word	0x2000016c
 8003544:	200001d4 	.word	0x200001d4
 8003548:	2000023c 	.word	0x2000023c

0800354c <global_stdio_init.part.0>:
 800354c:	b510      	push	{r4, lr}
 800354e:	4b0b      	ldr	r3, [pc, #44]	@ (800357c <global_stdio_init.part.0+0x30>)
 8003550:	4c0b      	ldr	r4, [pc, #44]	@ (8003580 <global_stdio_init.part.0+0x34>)
 8003552:	4a0c      	ldr	r2, [pc, #48]	@ (8003584 <global_stdio_init.part.0+0x38>)
 8003554:	4620      	mov	r0, r4
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	2104      	movs	r1, #4
 800355a:	2200      	movs	r2, #0
 800355c:	f7ff ff94 	bl	8003488 <std>
 8003560:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003564:	2201      	movs	r2, #1
 8003566:	2109      	movs	r1, #9
 8003568:	f7ff ff8e 	bl	8003488 <std>
 800356c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003570:	2202      	movs	r2, #2
 8003572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003576:	2112      	movs	r1, #18
 8003578:	f7ff bf86 	b.w	8003488 <std>
 800357c:	200002a4 	.word	0x200002a4
 8003580:	2000016c 	.word	0x2000016c
 8003584:	080034f5 	.word	0x080034f5

08003588 <__sfp_lock_acquire>:
 8003588:	4801      	ldr	r0, [pc, #4]	@ (8003590 <__sfp_lock_acquire+0x8>)
 800358a:	f000 ba00 	b.w	800398e <__retarget_lock_acquire_recursive>
 800358e:	bf00      	nop
 8003590:	200002ad 	.word	0x200002ad

08003594 <__sfp_lock_release>:
 8003594:	4801      	ldr	r0, [pc, #4]	@ (800359c <__sfp_lock_release+0x8>)
 8003596:	f000 b9fb 	b.w	8003990 <__retarget_lock_release_recursive>
 800359a:	bf00      	nop
 800359c:	200002ad 	.word	0x200002ad

080035a0 <__sinit>:
 80035a0:	b510      	push	{r4, lr}
 80035a2:	4604      	mov	r4, r0
 80035a4:	f7ff fff0 	bl	8003588 <__sfp_lock_acquire>
 80035a8:	6a23      	ldr	r3, [r4, #32]
 80035aa:	b11b      	cbz	r3, 80035b4 <__sinit+0x14>
 80035ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b0:	f7ff bff0 	b.w	8003594 <__sfp_lock_release>
 80035b4:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <__sinit+0x28>)
 80035b6:	6223      	str	r3, [r4, #32]
 80035b8:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <__sinit+0x2c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f5      	bne.n	80035ac <__sinit+0xc>
 80035c0:	f7ff ffc4 	bl	800354c <global_stdio_init.part.0>
 80035c4:	e7f2      	b.n	80035ac <__sinit+0xc>
 80035c6:	bf00      	nop
 80035c8:	0800350d 	.word	0x0800350d
 80035cc:	200002a4 	.word	0x200002a4

080035d0 <_fwalk_sglue>:
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	4607      	mov	r7, r0
 80035d6:	4688      	mov	r8, r1
 80035d8:	4614      	mov	r4, r2
 80035da:	2600      	movs	r6, #0
 80035dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035e0:	f1b9 0901 	subs.w	r9, r9, #1
 80035e4:	d505      	bpl.n	80035f2 <_fwalk_sglue+0x22>
 80035e6:	6824      	ldr	r4, [r4, #0]
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d1f7      	bne.n	80035dc <_fwalk_sglue+0xc>
 80035ec:	4630      	mov	r0, r6
 80035ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d907      	bls.n	8003608 <_fwalk_sglue+0x38>
 80035f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035fc:	3301      	adds	r3, #1
 80035fe:	d003      	beq.n	8003608 <_fwalk_sglue+0x38>
 8003600:	4629      	mov	r1, r5
 8003602:	4638      	mov	r0, r7
 8003604:	47c0      	blx	r8
 8003606:	4306      	orrs	r6, r0
 8003608:	3568      	adds	r5, #104	@ 0x68
 800360a:	e7e9      	b.n	80035e0 <_fwalk_sglue+0x10>

0800360c <iprintf>:
 800360c:	b40f      	push	{r0, r1, r2, r3}
 800360e:	b507      	push	{r0, r1, r2, lr}
 8003610:	4906      	ldr	r1, [pc, #24]	@ (800362c <iprintf+0x20>)
 8003612:	ab04      	add	r3, sp, #16
 8003614:	6808      	ldr	r0, [r1, #0]
 8003616:	f853 2b04 	ldr.w	r2, [r3], #4
 800361a:	6881      	ldr	r1, [r0, #8]
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	f000 fad7 	bl	8003bd0 <_vfiprintf_r>
 8003622:	b003      	add	sp, #12
 8003624:	f85d eb04 	ldr.w	lr, [sp], #4
 8003628:	b004      	add	sp, #16
 800362a:	4770      	bx	lr
 800362c:	2000001c 	.word	0x2000001c

08003630 <_puts_r>:
 8003630:	6a03      	ldr	r3, [r0, #32]
 8003632:	b570      	push	{r4, r5, r6, lr}
 8003634:	4605      	mov	r5, r0
 8003636:	460e      	mov	r6, r1
 8003638:	6884      	ldr	r4, [r0, #8]
 800363a:	b90b      	cbnz	r3, 8003640 <_puts_r+0x10>
 800363c:	f7ff ffb0 	bl	80035a0 <__sinit>
 8003640:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003642:	07db      	lsls	r3, r3, #31
 8003644:	d405      	bmi.n	8003652 <_puts_r+0x22>
 8003646:	89a3      	ldrh	r3, [r4, #12]
 8003648:	0598      	lsls	r0, r3, #22
 800364a:	d402      	bmi.n	8003652 <_puts_r+0x22>
 800364c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800364e:	f000 f99e 	bl	800398e <__retarget_lock_acquire_recursive>
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	0719      	lsls	r1, r3, #28
 8003656:	d502      	bpl.n	800365e <_puts_r+0x2e>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d135      	bne.n	80036ca <_puts_r+0x9a>
 800365e:	4621      	mov	r1, r4
 8003660:	4628      	mov	r0, r5
 8003662:	f000 f8c5 	bl	80037f0 <__swsetup_r>
 8003666:	b380      	cbz	r0, 80036ca <_puts_r+0x9a>
 8003668:	f04f 35ff 	mov.w	r5, #4294967295
 800366c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800366e:	07da      	lsls	r2, r3, #31
 8003670:	d405      	bmi.n	800367e <_puts_r+0x4e>
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	059b      	lsls	r3, r3, #22
 8003676:	d402      	bmi.n	800367e <_puts_r+0x4e>
 8003678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800367a:	f000 f989 	bl	8003990 <__retarget_lock_release_recursive>
 800367e:	4628      	mov	r0, r5
 8003680:	bd70      	pop	{r4, r5, r6, pc}
 8003682:	2b00      	cmp	r3, #0
 8003684:	da04      	bge.n	8003690 <_puts_r+0x60>
 8003686:	69a2      	ldr	r2, [r4, #24]
 8003688:	429a      	cmp	r2, r3
 800368a:	dc17      	bgt.n	80036bc <_puts_r+0x8c>
 800368c:	290a      	cmp	r1, #10
 800368e:	d015      	beq.n	80036bc <_puts_r+0x8c>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	6022      	str	r2, [r4, #0]
 8003696:	7019      	strb	r1, [r3, #0]
 8003698:	68a3      	ldr	r3, [r4, #8]
 800369a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800369e:	3b01      	subs	r3, #1
 80036a0:	60a3      	str	r3, [r4, #8]
 80036a2:	2900      	cmp	r1, #0
 80036a4:	d1ed      	bne.n	8003682 <_puts_r+0x52>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da11      	bge.n	80036ce <_puts_r+0x9e>
 80036aa:	4622      	mov	r2, r4
 80036ac:	210a      	movs	r1, #10
 80036ae:	4628      	mov	r0, r5
 80036b0:	f000 f85f 	bl	8003772 <__swbuf_r>
 80036b4:	3001      	adds	r0, #1
 80036b6:	d0d7      	beq.n	8003668 <_puts_r+0x38>
 80036b8:	250a      	movs	r5, #10
 80036ba:	e7d7      	b.n	800366c <_puts_r+0x3c>
 80036bc:	4622      	mov	r2, r4
 80036be:	4628      	mov	r0, r5
 80036c0:	f000 f857 	bl	8003772 <__swbuf_r>
 80036c4:	3001      	adds	r0, #1
 80036c6:	d1e7      	bne.n	8003698 <_puts_r+0x68>
 80036c8:	e7ce      	b.n	8003668 <_puts_r+0x38>
 80036ca:	3e01      	subs	r6, #1
 80036cc:	e7e4      	b.n	8003698 <_puts_r+0x68>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	6022      	str	r2, [r4, #0]
 80036d4:	220a      	movs	r2, #10
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	e7ee      	b.n	80036b8 <_puts_r+0x88>
	...

080036dc <puts>:
 80036dc:	4b02      	ldr	r3, [pc, #8]	@ (80036e8 <puts+0xc>)
 80036de:	4601      	mov	r1, r0
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	f7ff bfa5 	b.w	8003630 <_puts_r>
 80036e6:	bf00      	nop
 80036e8:	2000001c 	.word	0x2000001c

080036ec <__sread>:
 80036ec:	b510      	push	{r4, lr}
 80036ee:	460c      	mov	r4, r1
 80036f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f4:	f000 f8fc 	bl	80038f0 <_read_r>
 80036f8:	2800      	cmp	r0, #0
 80036fa:	bfab      	itete	ge
 80036fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003700:	181b      	addge	r3, r3, r0
 8003702:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003706:	bfac      	ite	ge
 8003708:	6563      	strge	r3, [r4, #84]	@ 0x54
 800370a:	81a3      	strhlt	r3, [r4, #12]
 800370c:	bd10      	pop	{r4, pc}

0800370e <__swrite>:
 800370e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003712:	461f      	mov	r7, r3
 8003714:	898b      	ldrh	r3, [r1, #12]
 8003716:	4605      	mov	r5, r0
 8003718:	05db      	lsls	r3, r3, #23
 800371a:	460c      	mov	r4, r1
 800371c:	4616      	mov	r6, r2
 800371e:	d505      	bpl.n	800372c <__swrite+0x1e>
 8003720:	2302      	movs	r3, #2
 8003722:	2200      	movs	r2, #0
 8003724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003728:	f000 f8d0 	bl	80038cc <_lseek_r>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	4632      	mov	r2, r6
 8003730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003734:	81a3      	strh	r3, [r4, #12]
 8003736:	4628      	mov	r0, r5
 8003738:	463b      	mov	r3, r7
 800373a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800373e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003742:	f000 b8e7 	b.w	8003914 <_write_r>

08003746 <__sseek>:
 8003746:	b510      	push	{r4, lr}
 8003748:	460c      	mov	r4, r1
 800374a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800374e:	f000 f8bd 	bl	80038cc <_lseek_r>
 8003752:	1c43      	adds	r3, r0, #1
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	bf15      	itete	ne
 8003758:	6560      	strne	r0, [r4, #84]	@ 0x54
 800375a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800375e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003762:	81a3      	strheq	r3, [r4, #12]
 8003764:	bf18      	it	ne
 8003766:	81a3      	strhne	r3, [r4, #12]
 8003768:	bd10      	pop	{r4, pc}

0800376a <__sclose>:
 800376a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376e:	f000 b89d 	b.w	80038ac <_close_r>

08003772 <__swbuf_r>:
 8003772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003774:	460e      	mov	r6, r1
 8003776:	4614      	mov	r4, r2
 8003778:	4605      	mov	r5, r0
 800377a:	b118      	cbz	r0, 8003784 <__swbuf_r+0x12>
 800377c:	6a03      	ldr	r3, [r0, #32]
 800377e:	b90b      	cbnz	r3, 8003784 <__swbuf_r+0x12>
 8003780:	f7ff ff0e 	bl	80035a0 <__sinit>
 8003784:	69a3      	ldr	r3, [r4, #24]
 8003786:	60a3      	str	r3, [r4, #8]
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	071a      	lsls	r2, r3, #28
 800378c:	d501      	bpl.n	8003792 <__swbuf_r+0x20>
 800378e:	6923      	ldr	r3, [r4, #16]
 8003790:	b943      	cbnz	r3, 80037a4 <__swbuf_r+0x32>
 8003792:	4621      	mov	r1, r4
 8003794:	4628      	mov	r0, r5
 8003796:	f000 f82b 	bl	80037f0 <__swsetup_r>
 800379a:	b118      	cbz	r0, 80037a4 <__swbuf_r+0x32>
 800379c:	f04f 37ff 	mov.w	r7, #4294967295
 80037a0:	4638      	mov	r0, r7
 80037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	6922      	ldr	r2, [r4, #16]
 80037a8:	b2f6      	uxtb	r6, r6
 80037aa:	1a98      	subs	r0, r3, r2
 80037ac:	6963      	ldr	r3, [r4, #20]
 80037ae:	4637      	mov	r7, r6
 80037b0:	4283      	cmp	r3, r0
 80037b2:	dc05      	bgt.n	80037c0 <__swbuf_r+0x4e>
 80037b4:	4621      	mov	r1, r4
 80037b6:	4628      	mov	r0, r5
 80037b8:	f000 fd32 	bl	8004220 <_fflush_r>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d1ed      	bne.n	800379c <__swbuf_r+0x2a>
 80037c0:	68a3      	ldr	r3, [r4, #8]
 80037c2:	3b01      	subs	r3, #1
 80037c4:	60a3      	str	r3, [r4, #8]
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	6022      	str	r2, [r4, #0]
 80037cc:	701e      	strb	r6, [r3, #0]
 80037ce:	6962      	ldr	r2, [r4, #20]
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d004      	beq.n	80037e0 <__swbuf_r+0x6e>
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	07db      	lsls	r3, r3, #31
 80037da:	d5e1      	bpl.n	80037a0 <__swbuf_r+0x2e>
 80037dc:	2e0a      	cmp	r6, #10
 80037de:	d1df      	bne.n	80037a0 <__swbuf_r+0x2e>
 80037e0:	4621      	mov	r1, r4
 80037e2:	4628      	mov	r0, r5
 80037e4:	f000 fd1c 	bl	8004220 <_fflush_r>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d0d9      	beq.n	80037a0 <__swbuf_r+0x2e>
 80037ec:	e7d6      	b.n	800379c <__swbuf_r+0x2a>
	...

080037f0 <__swsetup_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4b29      	ldr	r3, [pc, #164]	@ (8003898 <__swsetup_r+0xa8>)
 80037f4:	4605      	mov	r5, r0
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	460c      	mov	r4, r1
 80037fa:	b118      	cbz	r0, 8003804 <__swsetup_r+0x14>
 80037fc:	6a03      	ldr	r3, [r0, #32]
 80037fe:	b90b      	cbnz	r3, 8003804 <__swsetup_r+0x14>
 8003800:	f7ff fece 	bl	80035a0 <__sinit>
 8003804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003808:	0719      	lsls	r1, r3, #28
 800380a:	d422      	bmi.n	8003852 <__swsetup_r+0x62>
 800380c:	06da      	lsls	r2, r3, #27
 800380e:	d407      	bmi.n	8003820 <__swsetup_r+0x30>
 8003810:	2209      	movs	r2, #9
 8003812:	602a      	str	r2, [r5, #0]
 8003814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	e033      	b.n	8003888 <__swsetup_r+0x98>
 8003820:	0758      	lsls	r0, r3, #29
 8003822:	d512      	bpl.n	800384a <__swsetup_r+0x5a>
 8003824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003826:	b141      	cbz	r1, 800383a <__swsetup_r+0x4a>
 8003828:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800382c:	4299      	cmp	r1, r3
 800382e:	d002      	beq.n	8003836 <__swsetup_r+0x46>
 8003830:	4628      	mov	r0, r5
 8003832:	f000 f8af 	bl	8003994 <_free_r>
 8003836:	2300      	movs	r3, #0
 8003838:	6363      	str	r3, [r4, #52]	@ 0x34
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003840:	81a3      	strh	r3, [r4, #12]
 8003842:	2300      	movs	r3, #0
 8003844:	6063      	str	r3, [r4, #4]
 8003846:	6923      	ldr	r3, [r4, #16]
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	81a3      	strh	r3, [r4, #12]
 8003852:	6923      	ldr	r3, [r4, #16]
 8003854:	b94b      	cbnz	r3, 800386a <__swsetup_r+0x7a>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800385c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003860:	d003      	beq.n	800386a <__swsetup_r+0x7a>
 8003862:	4621      	mov	r1, r4
 8003864:	4628      	mov	r0, r5
 8003866:	f000 fd28 	bl	80042ba <__smakebuf_r>
 800386a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386e:	f013 0201 	ands.w	r2, r3, #1
 8003872:	d00a      	beq.n	800388a <__swsetup_r+0x9a>
 8003874:	2200      	movs	r2, #0
 8003876:	60a2      	str	r2, [r4, #8]
 8003878:	6962      	ldr	r2, [r4, #20]
 800387a:	4252      	negs	r2, r2
 800387c:	61a2      	str	r2, [r4, #24]
 800387e:	6922      	ldr	r2, [r4, #16]
 8003880:	b942      	cbnz	r2, 8003894 <__swsetup_r+0xa4>
 8003882:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003886:	d1c5      	bne.n	8003814 <__swsetup_r+0x24>
 8003888:	bd38      	pop	{r3, r4, r5, pc}
 800388a:	0799      	lsls	r1, r3, #30
 800388c:	bf58      	it	pl
 800388e:	6962      	ldrpl	r2, [r4, #20]
 8003890:	60a2      	str	r2, [r4, #8]
 8003892:	e7f4      	b.n	800387e <__swsetup_r+0x8e>
 8003894:	2000      	movs	r0, #0
 8003896:	e7f7      	b.n	8003888 <__swsetup_r+0x98>
 8003898:	2000001c 	.word	0x2000001c

0800389c <memset>:
 800389c:	4603      	mov	r3, r0
 800389e:	4402      	add	r2, r0
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d100      	bne.n	80038a6 <memset+0xa>
 80038a4:	4770      	bx	lr
 80038a6:	f803 1b01 	strb.w	r1, [r3], #1
 80038aa:	e7f9      	b.n	80038a0 <memset+0x4>

080038ac <_close_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	2300      	movs	r3, #0
 80038b0:	4d05      	ldr	r5, [pc, #20]	@ (80038c8 <_close_r+0x1c>)
 80038b2:	4604      	mov	r4, r0
 80038b4:	4608      	mov	r0, r1
 80038b6:	602b      	str	r3, [r5, #0]
 80038b8:	f7fd f85f 	bl	800097a <_close>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d102      	bne.n	80038c6 <_close_r+0x1a>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <_close_r+0x1a>
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	200002a8 	.word	0x200002a8

080038cc <_lseek_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4604      	mov	r4, r0
 80038d0:	4608      	mov	r0, r1
 80038d2:	4611      	mov	r1, r2
 80038d4:	2200      	movs	r2, #0
 80038d6:	4d05      	ldr	r5, [pc, #20]	@ (80038ec <_lseek_r+0x20>)
 80038d8:	602a      	str	r2, [r5, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	f7fd f871 	bl	80009c2 <_lseek>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	d102      	bne.n	80038ea <_lseek_r+0x1e>
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	b103      	cbz	r3, 80038ea <_lseek_r+0x1e>
 80038e8:	6023      	str	r3, [r4, #0]
 80038ea:	bd38      	pop	{r3, r4, r5, pc}
 80038ec:	200002a8 	.word	0x200002a8

080038f0 <_read_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	2200      	movs	r2, #0
 80038fa:	4d05      	ldr	r5, [pc, #20]	@ (8003910 <_read_r+0x20>)
 80038fc:	602a      	str	r2, [r5, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	f7fd f802 	bl	8000908 <_read>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d102      	bne.n	800390e <_read_r+0x1e>
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	b103      	cbz	r3, 800390e <_read_r+0x1e>
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	200002a8 	.word	0x200002a8

08003914 <_write_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4604      	mov	r4, r0
 8003918:	4608      	mov	r0, r1
 800391a:	4611      	mov	r1, r2
 800391c:	2200      	movs	r2, #0
 800391e:	4d05      	ldr	r5, [pc, #20]	@ (8003934 <_write_r+0x20>)
 8003920:	602a      	str	r2, [r5, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	f7fd f80d 	bl	8000942 <_write>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d102      	bne.n	8003932 <_write_r+0x1e>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	b103      	cbz	r3, 8003932 <_write_r+0x1e>
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	bd38      	pop	{r3, r4, r5, pc}
 8003934:	200002a8 	.word	0x200002a8

08003938 <__errno>:
 8003938:	4b01      	ldr	r3, [pc, #4]	@ (8003940 <__errno+0x8>)
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	2000001c 	.word	0x2000001c

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	2600      	movs	r6, #0
 8003948:	4d0c      	ldr	r5, [pc, #48]	@ (800397c <__libc_init_array+0x38>)
 800394a:	4c0d      	ldr	r4, [pc, #52]	@ (8003980 <__libc_init_array+0x3c>)
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	10a4      	asrs	r4, r4, #2
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	f000 fd2e 	bl	80043b4 <_init>
 8003958:	2600      	movs	r6, #0
 800395a:	4d0a      	ldr	r5, [pc, #40]	@ (8003984 <__libc_init_array+0x40>)
 800395c:	4c0a      	ldr	r4, [pc, #40]	@ (8003988 <__libc_init_array+0x44>)
 800395e:	1b64      	subs	r4, r4, r5
 8003960:	10a4      	asrs	r4, r4, #2
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	f855 3b04 	ldr.w	r3, [r5], #4
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	f855 3b04 	ldr.w	r3, [r5], #4
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	080044bc 	.word	0x080044bc
 8003980:	080044bc 	.word	0x080044bc
 8003984:	080044bc 	.word	0x080044bc
 8003988:	080044c0 	.word	0x080044c0

0800398c <__retarget_lock_init_recursive>:
 800398c:	4770      	bx	lr

0800398e <__retarget_lock_acquire_recursive>:
 800398e:	4770      	bx	lr

08003990 <__retarget_lock_release_recursive>:
 8003990:	4770      	bx	lr
	...

08003994 <_free_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4605      	mov	r5, r0
 8003998:	2900      	cmp	r1, #0
 800399a:	d040      	beq.n	8003a1e <_free_r+0x8a>
 800399c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039a0:	1f0c      	subs	r4, r1, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bfb8      	it	lt
 80039a6:	18e4      	addlt	r4, r4, r3
 80039a8:	f000 f8de 	bl	8003b68 <__malloc_lock>
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <_free_r+0x8c>)
 80039ae:	6813      	ldr	r3, [r2, #0]
 80039b0:	b933      	cbnz	r3, 80039c0 <_free_r+0x2c>
 80039b2:	6063      	str	r3, [r4, #4]
 80039b4:	6014      	str	r4, [r2, #0]
 80039b6:	4628      	mov	r0, r5
 80039b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039bc:	f000 b8da 	b.w	8003b74 <__malloc_unlock>
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	d908      	bls.n	80039d6 <_free_r+0x42>
 80039c4:	6820      	ldr	r0, [r4, #0]
 80039c6:	1821      	adds	r1, r4, r0
 80039c8:	428b      	cmp	r3, r1
 80039ca:	bf01      	itttt	eq
 80039cc:	6819      	ldreq	r1, [r3, #0]
 80039ce:	685b      	ldreq	r3, [r3, #4]
 80039d0:	1809      	addeq	r1, r1, r0
 80039d2:	6021      	streq	r1, [r4, #0]
 80039d4:	e7ed      	b.n	80039b2 <_free_r+0x1e>
 80039d6:	461a      	mov	r2, r3
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	b10b      	cbz	r3, 80039e0 <_free_r+0x4c>
 80039dc:	42a3      	cmp	r3, r4
 80039de:	d9fa      	bls.n	80039d6 <_free_r+0x42>
 80039e0:	6811      	ldr	r1, [r2, #0]
 80039e2:	1850      	adds	r0, r2, r1
 80039e4:	42a0      	cmp	r0, r4
 80039e6:	d10b      	bne.n	8003a00 <_free_r+0x6c>
 80039e8:	6820      	ldr	r0, [r4, #0]
 80039ea:	4401      	add	r1, r0
 80039ec:	1850      	adds	r0, r2, r1
 80039ee:	4283      	cmp	r3, r0
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	d1e0      	bne.n	80039b6 <_free_r+0x22>
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4408      	add	r0, r1
 80039fa:	6010      	str	r0, [r2, #0]
 80039fc:	6053      	str	r3, [r2, #4]
 80039fe:	e7da      	b.n	80039b6 <_free_r+0x22>
 8003a00:	d902      	bls.n	8003a08 <_free_r+0x74>
 8003a02:	230c      	movs	r3, #12
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	e7d6      	b.n	80039b6 <_free_r+0x22>
 8003a08:	6820      	ldr	r0, [r4, #0]
 8003a0a:	1821      	adds	r1, r4, r0
 8003a0c:	428b      	cmp	r3, r1
 8003a0e:	bf01      	itttt	eq
 8003a10:	6819      	ldreq	r1, [r3, #0]
 8003a12:	685b      	ldreq	r3, [r3, #4]
 8003a14:	1809      	addeq	r1, r1, r0
 8003a16:	6021      	streq	r1, [r4, #0]
 8003a18:	6063      	str	r3, [r4, #4]
 8003a1a:	6054      	str	r4, [r2, #4]
 8003a1c:	e7cb      	b.n	80039b6 <_free_r+0x22>
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}
 8003a20:	200002b4 	.word	0x200002b4

08003a24 <sbrk_aligned>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4e0f      	ldr	r6, [pc, #60]	@ (8003a64 <sbrk_aligned+0x40>)
 8003a28:	460c      	mov	r4, r1
 8003a2a:	6831      	ldr	r1, [r6, #0]
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	b911      	cbnz	r1, 8003a36 <sbrk_aligned+0x12>
 8003a30:	f000 fca2 	bl	8004378 <_sbrk_r>
 8003a34:	6030      	str	r0, [r6, #0]
 8003a36:	4621      	mov	r1, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	f000 fc9d 	bl	8004378 <_sbrk_r>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	d103      	bne.n	8003a4a <sbrk_aligned+0x26>
 8003a42:	f04f 34ff 	mov.w	r4, #4294967295
 8003a46:	4620      	mov	r0, r4
 8003a48:	bd70      	pop	{r4, r5, r6, pc}
 8003a4a:	1cc4      	adds	r4, r0, #3
 8003a4c:	f024 0403 	bic.w	r4, r4, #3
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d0f8      	beq.n	8003a46 <sbrk_aligned+0x22>
 8003a54:	1a21      	subs	r1, r4, r0
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 fc8e 	bl	8004378 <_sbrk_r>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d1f2      	bne.n	8003a46 <sbrk_aligned+0x22>
 8003a60:	e7ef      	b.n	8003a42 <sbrk_aligned+0x1e>
 8003a62:	bf00      	nop
 8003a64:	200002b0 	.word	0x200002b0

08003a68 <_malloc_r>:
 8003a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a6c:	1ccd      	adds	r5, r1, #3
 8003a6e:	f025 0503 	bic.w	r5, r5, #3
 8003a72:	3508      	adds	r5, #8
 8003a74:	2d0c      	cmp	r5, #12
 8003a76:	bf38      	it	cc
 8003a78:	250c      	movcc	r5, #12
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	db01      	blt.n	8003a84 <_malloc_r+0x1c>
 8003a80:	42a9      	cmp	r1, r5
 8003a82:	d904      	bls.n	8003a8e <_malloc_r+0x26>
 8003a84:	230c      	movs	r3, #12
 8003a86:	6033      	str	r3, [r6, #0]
 8003a88:	2000      	movs	r0, #0
 8003a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b64 <_malloc_r+0xfc>
 8003a92:	f000 f869 	bl	8003b68 <__malloc_lock>
 8003a96:	f8d8 3000 	ldr.w	r3, [r8]
 8003a9a:	461c      	mov	r4, r3
 8003a9c:	bb44      	cbnz	r4, 8003af0 <_malloc_r+0x88>
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f7ff ffbf 	bl	8003a24 <sbrk_aligned>
 8003aa6:	1c43      	adds	r3, r0, #1
 8003aa8:	4604      	mov	r4, r0
 8003aaa:	d158      	bne.n	8003b5e <_malloc_r+0xf6>
 8003aac:	f8d8 4000 	ldr.w	r4, [r8]
 8003ab0:	4627      	mov	r7, r4
 8003ab2:	2f00      	cmp	r7, #0
 8003ab4:	d143      	bne.n	8003b3e <_malloc_r+0xd6>
 8003ab6:	2c00      	cmp	r4, #0
 8003ab8:	d04b      	beq.n	8003b52 <_malloc_r+0xea>
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	4639      	mov	r1, r7
 8003abe:	4630      	mov	r0, r6
 8003ac0:	eb04 0903 	add.w	r9, r4, r3
 8003ac4:	f000 fc58 	bl	8004378 <_sbrk_r>
 8003ac8:	4581      	cmp	r9, r0
 8003aca:	d142      	bne.n	8003b52 <_malloc_r+0xea>
 8003acc:	6821      	ldr	r1, [r4, #0]
 8003ace:	4630      	mov	r0, r6
 8003ad0:	1a6d      	subs	r5, r5, r1
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	f7ff ffa6 	bl	8003a24 <sbrk_aligned>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d03a      	beq.n	8003b52 <_malloc_r+0xea>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	442b      	add	r3, r5
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	bb62      	cbnz	r2, 8003b44 <_malloc_r+0xdc>
 8003aea:	f8c8 7000 	str.w	r7, [r8]
 8003aee:	e00f      	b.n	8003b10 <_malloc_r+0xa8>
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	1b52      	subs	r2, r2, r5
 8003af4:	d420      	bmi.n	8003b38 <_malloc_r+0xd0>
 8003af6:	2a0b      	cmp	r2, #11
 8003af8:	d917      	bls.n	8003b2a <_malloc_r+0xc2>
 8003afa:	1961      	adds	r1, r4, r5
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	6025      	str	r5, [r4, #0]
 8003b00:	bf18      	it	ne
 8003b02:	6059      	strne	r1, [r3, #4]
 8003b04:	6863      	ldr	r3, [r4, #4]
 8003b06:	bf08      	it	eq
 8003b08:	f8c8 1000 	streq.w	r1, [r8]
 8003b0c:	5162      	str	r2, [r4, r5]
 8003b0e:	604b      	str	r3, [r1, #4]
 8003b10:	4630      	mov	r0, r6
 8003b12:	f000 f82f 	bl	8003b74 <__malloc_unlock>
 8003b16:	f104 000b 	add.w	r0, r4, #11
 8003b1a:	1d23      	adds	r3, r4, #4
 8003b1c:	f020 0007 	bic.w	r0, r0, #7
 8003b20:	1ac2      	subs	r2, r0, r3
 8003b22:	bf1c      	itt	ne
 8003b24:	1a1b      	subne	r3, r3, r0
 8003b26:	50a3      	strne	r3, [r4, r2]
 8003b28:	e7af      	b.n	8003a8a <_malloc_r+0x22>
 8003b2a:	6862      	ldr	r2, [r4, #4]
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	bf0c      	ite	eq
 8003b30:	f8c8 2000 	streq.w	r2, [r8]
 8003b34:	605a      	strne	r2, [r3, #4]
 8003b36:	e7eb      	b.n	8003b10 <_malloc_r+0xa8>
 8003b38:	4623      	mov	r3, r4
 8003b3a:	6864      	ldr	r4, [r4, #4]
 8003b3c:	e7ae      	b.n	8003a9c <_malloc_r+0x34>
 8003b3e:	463c      	mov	r4, r7
 8003b40:	687f      	ldr	r7, [r7, #4]
 8003b42:	e7b6      	b.n	8003ab2 <_malloc_r+0x4a>
 8003b44:	461a      	mov	r2, r3
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	42a3      	cmp	r3, r4
 8003b4a:	d1fb      	bne.n	8003b44 <_malloc_r+0xdc>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	6053      	str	r3, [r2, #4]
 8003b50:	e7de      	b.n	8003b10 <_malloc_r+0xa8>
 8003b52:	230c      	movs	r3, #12
 8003b54:	4630      	mov	r0, r6
 8003b56:	6033      	str	r3, [r6, #0]
 8003b58:	f000 f80c 	bl	8003b74 <__malloc_unlock>
 8003b5c:	e794      	b.n	8003a88 <_malloc_r+0x20>
 8003b5e:	6005      	str	r5, [r0, #0]
 8003b60:	e7d6      	b.n	8003b10 <_malloc_r+0xa8>
 8003b62:	bf00      	nop
 8003b64:	200002b4 	.word	0x200002b4

08003b68 <__malloc_lock>:
 8003b68:	4801      	ldr	r0, [pc, #4]	@ (8003b70 <__malloc_lock+0x8>)
 8003b6a:	f7ff bf10 	b.w	800398e <__retarget_lock_acquire_recursive>
 8003b6e:	bf00      	nop
 8003b70:	200002ac 	.word	0x200002ac

08003b74 <__malloc_unlock>:
 8003b74:	4801      	ldr	r0, [pc, #4]	@ (8003b7c <__malloc_unlock+0x8>)
 8003b76:	f7ff bf0b 	b.w	8003990 <__retarget_lock_release_recursive>
 8003b7a:	bf00      	nop
 8003b7c:	200002ac 	.word	0x200002ac

08003b80 <__sfputc_r>:
 8003b80:	6893      	ldr	r3, [r2, #8]
 8003b82:	b410      	push	{r4}
 8003b84:	3b01      	subs	r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	6093      	str	r3, [r2, #8]
 8003b8a:	da07      	bge.n	8003b9c <__sfputc_r+0x1c>
 8003b8c:	6994      	ldr	r4, [r2, #24]
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	db01      	blt.n	8003b96 <__sfputc_r+0x16>
 8003b92:	290a      	cmp	r1, #10
 8003b94:	d102      	bne.n	8003b9c <__sfputc_r+0x1c>
 8003b96:	bc10      	pop	{r4}
 8003b98:	f7ff bdeb 	b.w	8003772 <__swbuf_r>
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	1c58      	adds	r0, r3, #1
 8003ba0:	6010      	str	r0, [r2, #0]
 8003ba2:	7019      	strb	r1, [r3, #0]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	bc10      	pop	{r4}
 8003ba8:	4770      	bx	lr

08003baa <__sfputs_r>:
 8003baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bac:	4606      	mov	r6, r0
 8003bae:	460f      	mov	r7, r1
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	18d5      	adds	r5, r2, r3
 8003bb4:	42ac      	cmp	r4, r5
 8003bb6:	d101      	bne.n	8003bbc <__sfputs_r+0x12>
 8003bb8:	2000      	movs	r0, #0
 8003bba:	e007      	b.n	8003bcc <__sfputs_r+0x22>
 8003bbc:	463a      	mov	r2, r7
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc4:	f7ff ffdc 	bl	8003b80 <__sfputc_r>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d1f3      	bne.n	8003bb4 <__sfputs_r+0xa>
 8003bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bd0 <_vfiprintf_r>:
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	460d      	mov	r5, r1
 8003bd6:	4614      	mov	r4, r2
 8003bd8:	4698      	mov	r8, r3
 8003bda:	4606      	mov	r6, r0
 8003bdc:	b09d      	sub	sp, #116	@ 0x74
 8003bde:	b118      	cbz	r0, 8003be8 <_vfiprintf_r+0x18>
 8003be0:	6a03      	ldr	r3, [r0, #32]
 8003be2:	b90b      	cbnz	r3, 8003be8 <_vfiprintf_r+0x18>
 8003be4:	f7ff fcdc 	bl	80035a0 <__sinit>
 8003be8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bea:	07d9      	lsls	r1, r3, #31
 8003bec:	d405      	bmi.n	8003bfa <_vfiprintf_r+0x2a>
 8003bee:	89ab      	ldrh	r3, [r5, #12]
 8003bf0:	059a      	lsls	r2, r3, #22
 8003bf2:	d402      	bmi.n	8003bfa <_vfiprintf_r+0x2a>
 8003bf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bf6:	f7ff feca 	bl	800398e <__retarget_lock_acquire_recursive>
 8003bfa:	89ab      	ldrh	r3, [r5, #12]
 8003bfc:	071b      	lsls	r3, r3, #28
 8003bfe:	d501      	bpl.n	8003c04 <_vfiprintf_r+0x34>
 8003c00:	692b      	ldr	r3, [r5, #16]
 8003c02:	b99b      	cbnz	r3, 8003c2c <_vfiprintf_r+0x5c>
 8003c04:	4629      	mov	r1, r5
 8003c06:	4630      	mov	r0, r6
 8003c08:	f7ff fdf2 	bl	80037f0 <__swsetup_r>
 8003c0c:	b170      	cbz	r0, 8003c2c <_vfiprintf_r+0x5c>
 8003c0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c10:	07dc      	lsls	r4, r3, #31
 8003c12:	d504      	bpl.n	8003c1e <_vfiprintf_r+0x4e>
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	b01d      	add	sp, #116	@ 0x74
 8003c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1e:	89ab      	ldrh	r3, [r5, #12]
 8003c20:	0598      	lsls	r0, r3, #22
 8003c22:	d4f7      	bmi.n	8003c14 <_vfiprintf_r+0x44>
 8003c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c26:	f7ff feb3 	bl	8003990 <__retarget_lock_release_recursive>
 8003c2a:	e7f3      	b.n	8003c14 <_vfiprintf_r+0x44>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c30:	2320      	movs	r3, #32
 8003c32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c36:	2330      	movs	r3, #48	@ 0x30
 8003c38:	f04f 0901 	mov.w	r9, #1
 8003c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c40:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003dec <_vfiprintf_r+0x21c>
 8003c44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c48:	4623      	mov	r3, r4
 8003c4a:	469a      	mov	sl, r3
 8003c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c50:	b10a      	cbz	r2, 8003c56 <_vfiprintf_r+0x86>
 8003c52:	2a25      	cmp	r2, #37	@ 0x25
 8003c54:	d1f9      	bne.n	8003c4a <_vfiprintf_r+0x7a>
 8003c56:	ebba 0b04 	subs.w	fp, sl, r4
 8003c5a:	d00b      	beq.n	8003c74 <_vfiprintf_r+0xa4>
 8003c5c:	465b      	mov	r3, fp
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4629      	mov	r1, r5
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff ffa1 	bl	8003baa <__sfputs_r>
 8003c68:	3001      	adds	r0, #1
 8003c6a:	f000 80a7 	beq.w	8003dbc <_vfiprintf_r+0x1ec>
 8003c6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c70:	445a      	add	r2, fp
 8003c72:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c74:	f89a 3000 	ldrb.w	r3, [sl]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 809f 	beq.w	8003dbc <_vfiprintf_r+0x1ec>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c88:	f10a 0a01 	add.w	sl, sl, #1
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	9307      	str	r3, [sp, #28]
 8003c90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c94:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c96:	4654      	mov	r4, sl
 8003c98:	2205      	movs	r2, #5
 8003c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c9e:	4853      	ldr	r0, [pc, #332]	@ (8003dec <_vfiprintf_r+0x21c>)
 8003ca0:	f000 fb7a 	bl	8004398 <memchr>
 8003ca4:	9a04      	ldr	r2, [sp, #16]
 8003ca6:	b9d8      	cbnz	r0, 8003ce0 <_vfiprintf_r+0x110>
 8003ca8:	06d1      	lsls	r1, r2, #27
 8003caa:	bf44      	itt	mi
 8003cac:	2320      	movmi	r3, #32
 8003cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cb2:	0713      	lsls	r3, r2, #28
 8003cb4:	bf44      	itt	mi
 8003cb6:	232b      	movmi	r3, #43	@ 0x2b
 8003cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cc2:	d015      	beq.n	8003cf0 <_vfiprintf_r+0x120>
 8003cc4:	4654      	mov	r4, sl
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f04f 0c0a 	mov.w	ip, #10
 8003ccc:	9a07      	ldr	r2, [sp, #28]
 8003cce:	4621      	mov	r1, r4
 8003cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cd4:	3b30      	subs	r3, #48	@ 0x30
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	d94b      	bls.n	8003d72 <_vfiprintf_r+0x1a2>
 8003cda:	b1b0      	cbz	r0, 8003d0a <_vfiprintf_r+0x13a>
 8003cdc:	9207      	str	r2, [sp, #28]
 8003cde:	e014      	b.n	8003d0a <_vfiprintf_r+0x13a>
 8003ce0:	eba0 0308 	sub.w	r3, r0, r8
 8003ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	46a2      	mov	sl, r4
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	e7d2      	b.n	8003c96 <_vfiprintf_r+0xc6>
 8003cf0:	9b03      	ldr	r3, [sp, #12]
 8003cf2:	1d19      	adds	r1, r3, #4
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	9103      	str	r1, [sp, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bfbb      	ittet	lt
 8003cfc:	425b      	neglt	r3, r3
 8003cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8003d02:	9307      	strge	r3, [sp, #28]
 8003d04:	9307      	strlt	r3, [sp, #28]
 8003d06:	bfb8      	it	lt
 8003d08:	9204      	strlt	r2, [sp, #16]
 8003d0a:	7823      	ldrb	r3, [r4, #0]
 8003d0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d0e:	d10a      	bne.n	8003d26 <_vfiprintf_r+0x156>
 8003d10:	7863      	ldrb	r3, [r4, #1]
 8003d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d14:	d132      	bne.n	8003d7c <_vfiprintf_r+0x1ac>
 8003d16:	9b03      	ldr	r3, [sp, #12]
 8003d18:	3402      	adds	r4, #2
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	9203      	str	r2, [sp, #12]
 8003d20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d24:	9305      	str	r3, [sp, #20]
 8003d26:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003df0 <_vfiprintf_r+0x220>
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	4650      	mov	r0, sl
 8003d2e:	7821      	ldrb	r1, [r4, #0]
 8003d30:	f000 fb32 	bl	8004398 <memchr>
 8003d34:	b138      	cbz	r0, 8003d46 <_vfiprintf_r+0x176>
 8003d36:	2240      	movs	r2, #64	@ 0x40
 8003d38:	9b04      	ldr	r3, [sp, #16]
 8003d3a:	eba0 000a 	sub.w	r0, r0, sl
 8003d3e:	4082      	lsls	r2, r0
 8003d40:	4313      	orrs	r3, r2
 8003d42:	3401      	adds	r4, #1
 8003d44:	9304      	str	r3, [sp, #16]
 8003d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d4a:	2206      	movs	r2, #6
 8003d4c:	4829      	ldr	r0, [pc, #164]	@ (8003df4 <_vfiprintf_r+0x224>)
 8003d4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d52:	f000 fb21 	bl	8004398 <memchr>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d03f      	beq.n	8003dda <_vfiprintf_r+0x20a>
 8003d5a:	4b27      	ldr	r3, [pc, #156]	@ (8003df8 <_vfiprintf_r+0x228>)
 8003d5c:	bb1b      	cbnz	r3, 8003da6 <_vfiprintf_r+0x1d6>
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	3307      	adds	r3, #7
 8003d62:	f023 0307 	bic.w	r3, r3, #7
 8003d66:	3308      	adds	r3, #8
 8003d68:	9303      	str	r3, [sp, #12]
 8003d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d6c:	443b      	add	r3, r7
 8003d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d70:	e76a      	b.n	8003c48 <_vfiprintf_r+0x78>
 8003d72:	460c      	mov	r4, r1
 8003d74:	2001      	movs	r0, #1
 8003d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d7a:	e7a8      	b.n	8003cce <_vfiprintf_r+0xfe>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f04f 0c0a 	mov.w	ip, #10
 8003d82:	4619      	mov	r1, r3
 8003d84:	3401      	adds	r4, #1
 8003d86:	9305      	str	r3, [sp, #20]
 8003d88:	4620      	mov	r0, r4
 8003d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d8e:	3a30      	subs	r2, #48	@ 0x30
 8003d90:	2a09      	cmp	r2, #9
 8003d92:	d903      	bls.n	8003d9c <_vfiprintf_r+0x1cc>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0c6      	beq.n	8003d26 <_vfiprintf_r+0x156>
 8003d98:	9105      	str	r1, [sp, #20]
 8003d9a:	e7c4      	b.n	8003d26 <_vfiprintf_r+0x156>
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	2301      	movs	r3, #1
 8003da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003da4:	e7f0      	b.n	8003d88 <_vfiprintf_r+0x1b8>
 8003da6:	ab03      	add	r3, sp, #12
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	462a      	mov	r2, r5
 8003dac:	4630      	mov	r0, r6
 8003dae:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <_vfiprintf_r+0x22c>)
 8003db0:	a904      	add	r1, sp, #16
 8003db2:	f3af 8000 	nop.w
 8003db6:	4607      	mov	r7, r0
 8003db8:	1c78      	adds	r0, r7, #1
 8003dba:	d1d6      	bne.n	8003d6a <_vfiprintf_r+0x19a>
 8003dbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003dbe:	07d9      	lsls	r1, r3, #31
 8003dc0:	d405      	bmi.n	8003dce <_vfiprintf_r+0x1fe>
 8003dc2:	89ab      	ldrh	r3, [r5, #12]
 8003dc4:	059a      	lsls	r2, r3, #22
 8003dc6:	d402      	bmi.n	8003dce <_vfiprintf_r+0x1fe>
 8003dc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dca:	f7ff fde1 	bl	8003990 <__retarget_lock_release_recursive>
 8003dce:	89ab      	ldrh	r3, [r5, #12]
 8003dd0:	065b      	lsls	r3, r3, #25
 8003dd2:	f53f af1f 	bmi.w	8003c14 <_vfiprintf_r+0x44>
 8003dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003dd8:	e71e      	b.n	8003c18 <_vfiprintf_r+0x48>
 8003dda:	ab03      	add	r3, sp, #12
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	462a      	mov	r2, r5
 8003de0:	4630      	mov	r0, r6
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <_vfiprintf_r+0x22c>)
 8003de4:	a904      	add	r1, sp, #16
 8003de6:	f000 f87d 	bl	8003ee4 <_printf_i>
 8003dea:	e7e4      	b.n	8003db6 <_vfiprintf_r+0x1e6>
 8003dec:	08004486 	.word	0x08004486
 8003df0:	0800448c 	.word	0x0800448c
 8003df4:	08004490 	.word	0x08004490
 8003df8:	00000000 	.word	0x00000000
 8003dfc:	08003bab 	.word	0x08003bab

08003e00 <_printf_common>:
 8003e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e04:	4616      	mov	r6, r2
 8003e06:	4698      	mov	r8, r3
 8003e08:	688a      	ldr	r2, [r1, #8]
 8003e0a:	690b      	ldr	r3, [r1, #16]
 8003e0c:	4607      	mov	r7, r0
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	bfb8      	it	lt
 8003e12:	4613      	movlt	r3, r2
 8003e14:	6033      	str	r3, [r6, #0]
 8003e16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e20:	b10a      	cbz	r2, 8003e26 <_printf_common+0x26>
 8003e22:	3301      	adds	r3, #1
 8003e24:	6033      	str	r3, [r6, #0]
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	0699      	lsls	r1, r3, #26
 8003e2a:	bf42      	ittt	mi
 8003e2c:	6833      	ldrmi	r3, [r6, #0]
 8003e2e:	3302      	addmi	r3, #2
 8003e30:	6033      	strmi	r3, [r6, #0]
 8003e32:	6825      	ldr	r5, [r4, #0]
 8003e34:	f015 0506 	ands.w	r5, r5, #6
 8003e38:	d106      	bne.n	8003e48 <_printf_common+0x48>
 8003e3a:	f104 0a19 	add.w	sl, r4, #25
 8003e3e:	68e3      	ldr	r3, [r4, #12]
 8003e40:	6832      	ldr	r2, [r6, #0]
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	42ab      	cmp	r3, r5
 8003e46:	dc2b      	bgt.n	8003ea0 <_printf_common+0xa0>
 8003e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e4c:	6822      	ldr	r2, [r4, #0]
 8003e4e:	3b00      	subs	r3, #0
 8003e50:	bf18      	it	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	0692      	lsls	r2, r2, #26
 8003e56:	d430      	bmi.n	8003eba <_printf_common+0xba>
 8003e58:	4641      	mov	r1, r8
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e60:	47c8      	blx	r9
 8003e62:	3001      	adds	r0, #1
 8003e64:	d023      	beq.n	8003eae <_printf_common+0xae>
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	6922      	ldr	r2, [r4, #16]
 8003e6a:	f003 0306 	and.w	r3, r3, #6
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	bf14      	ite	ne
 8003e72:	2500      	movne	r5, #0
 8003e74:	6833      	ldreq	r3, [r6, #0]
 8003e76:	f04f 0600 	mov.w	r6, #0
 8003e7a:	bf08      	it	eq
 8003e7c:	68e5      	ldreq	r5, [r4, #12]
 8003e7e:	f104 041a 	add.w	r4, r4, #26
 8003e82:	bf08      	it	eq
 8003e84:	1aed      	subeq	r5, r5, r3
 8003e86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e8a:	bf08      	it	eq
 8003e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e90:	4293      	cmp	r3, r2
 8003e92:	bfc4      	itt	gt
 8003e94:	1a9b      	subgt	r3, r3, r2
 8003e96:	18ed      	addgt	r5, r5, r3
 8003e98:	42b5      	cmp	r5, r6
 8003e9a:	d11a      	bne.n	8003ed2 <_printf_common+0xd2>
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	e008      	b.n	8003eb2 <_printf_common+0xb2>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	4652      	mov	r2, sl
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	47c8      	blx	r9
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d103      	bne.n	8003eb6 <_printf_common+0xb6>
 8003eae:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb6:	3501      	adds	r5, #1
 8003eb8:	e7c1      	b.n	8003e3e <_printf_common+0x3e>
 8003eba:	2030      	movs	r0, #48	@ 0x30
 8003ebc:	18e1      	adds	r1, r4, r3
 8003ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ec8:	4422      	add	r2, r4
 8003eca:	3302      	adds	r3, #2
 8003ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ed0:	e7c2      	b.n	8003e58 <_printf_common+0x58>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	4638      	mov	r0, r7
 8003eda:	47c8      	blx	r9
 8003edc:	3001      	adds	r0, #1
 8003ede:	d0e6      	beq.n	8003eae <_printf_common+0xae>
 8003ee0:	3601      	adds	r6, #1
 8003ee2:	e7d9      	b.n	8003e98 <_printf_common+0x98>

08003ee4 <_printf_i>:
 8003ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	7e0f      	ldrb	r7, [r1, #24]
 8003eea:	4691      	mov	r9, r2
 8003eec:	2f78      	cmp	r7, #120	@ 0x78
 8003eee:	4680      	mov	r8, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	469a      	mov	sl, r3
 8003ef4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003efa:	d807      	bhi.n	8003f0c <_printf_i+0x28>
 8003efc:	2f62      	cmp	r7, #98	@ 0x62
 8003efe:	d80a      	bhi.n	8003f16 <_printf_i+0x32>
 8003f00:	2f00      	cmp	r7, #0
 8003f02:	f000 80d1 	beq.w	80040a8 <_printf_i+0x1c4>
 8003f06:	2f58      	cmp	r7, #88	@ 0x58
 8003f08:	f000 80b8 	beq.w	800407c <_printf_i+0x198>
 8003f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f14:	e03a      	b.n	8003f8c <_printf_i+0xa8>
 8003f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f1a:	2b15      	cmp	r3, #21
 8003f1c:	d8f6      	bhi.n	8003f0c <_printf_i+0x28>
 8003f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f24 <_printf_i+0x40>)
 8003f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08003f0d 	.word	0x08003f0d
 8003f30:	08003f0d 	.word	0x08003f0d
 8003f34:	08003f0d 	.word	0x08003f0d
 8003f38:	08003f0d 	.word	0x08003f0d
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003f0d 	.word	0x08003f0d
 8003f44:	08003f0d 	.word	0x08003f0d
 8003f48:	08003f0d 	.word	0x08003f0d
 8003f4c:	08003f0d 	.word	0x08003f0d
 8003f50:	0800408f 	.word	0x0800408f
 8003f54:	08003fbb 	.word	0x08003fbb
 8003f58:	08004049 	.word	0x08004049
 8003f5c:	08003f0d 	.word	0x08003f0d
 8003f60:	08003f0d 	.word	0x08003f0d
 8003f64:	080040b1 	.word	0x080040b1
 8003f68:	08003f0d 	.word	0x08003f0d
 8003f6c:	08003fbb 	.word	0x08003fbb
 8003f70:	08003f0d 	.word	0x08003f0d
 8003f74:	08003f0d 	.word	0x08003f0d
 8003f78:	08004051 	.word	0x08004051
 8003f7c:	6833      	ldr	r3, [r6, #0]
 8003f7e:	1d1a      	adds	r2, r3, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6032      	str	r2, [r6, #0]
 8003f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e09c      	b.n	80040ca <_printf_i+0x1e6>
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	6820      	ldr	r0, [r4, #0]
 8003f94:	1d19      	adds	r1, r3, #4
 8003f96:	6031      	str	r1, [r6, #0]
 8003f98:	0606      	lsls	r6, r0, #24
 8003f9a:	d501      	bpl.n	8003fa0 <_printf_i+0xbc>
 8003f9c:	681d      	ldr	r5, [r3, #0]
 8003f9e:	e003      	b.n	8003fa8 <_printf_i+0xc4>
 8003fa0:	0645      	lsls	r5, r0, #25
 8003fa2:	d5fb      	bpl.n	8003f9c <_printf_i+0xb8>
 8003fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	da03      	bge.n	8003fb4 <_printf_i+0xd0>
 8003fac:	232d      	movs	r3, #45	@ 0x2d
 8003fae:	426d      	negs	r5, r5
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb4:	230a      	movs	r3, #10
 8003fb6:	4858      	ldr	r0, [pc, #352]	@ (8004118 <_printf_i+0x234>)
 8003fb8:	e011      	b.n	8003fde <_printf_i+0xfa>
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	6833      	ldr	r3, [r6, #0]
 8003fbe:	0608      	lsls	r0, r1, #24
 8003fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fc4:	d402      	bmi.n	8003fcc <_printf_i+0xe8>
 8003fc6:	0649      	lsls	r1, r1, #25
 8003fc8:	bf48      	it	mi
 8003fca:	b2ad      	uxthmi	r5, r5
 8003fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fce:	6033      	str	r3, [r6, #0]
 8003fd0:	bf14      	ite	ne
 8003fd2:	230a      	movne	r3, #10
 8003fd4:	2308      	moveq	r3, #8
 8003fd6:	4850      	ldr	r0, [pc, #320]	@ (8004118 <_printf_i+0x234>)
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fde:	6866      	ldr	r6, [r4, #4]
 8003fe0:	2e00      	cmp	r6, #0
 8003fe2:	60a6      	str	r6, [r4, #8]
 8003fe4:	db05      	blt.n	8003ff2 <_printf_i+0x10e>
 8003fe6:	6821      	ldr	r1, [r4, #0]
 8003fe8:	432e      	orrs	r6, r5
 8003fea:	f021 0104 	bic.w	r1, r1, #4
 8003fee:	6021      	str	r1, [r4, #0]
 8003ff0:	d04b      	beq.n	800408a <_printf_i+0x1a6>
 8003ff2:	4616      	mov	r6, r2
 8003ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8003ffc:	5dc7      	ldrb	r7, [r0, r7]
 8003ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004002:	462f      	mov	r7, r5
 8004004:	42bb      	cmp	r3, r7
 8004006:	460d      	mov	r5, r1
 8004008:	d9f4      	bls.n	8003ff4 <_printf_i+0x110>
 800400a:	2b08      	cmp	r3, #8
 800400c:	d10b      	bne.n	8004026 <_printf_i+0x142>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07df      	lsls	r7, r3, #31
 8004012:	d508      	bpl.n	8004026 <_printf_i+0x142>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6861      	ldr	r1, [r4, #4]
 8004018:	4299      	cmp	r1, r3
 800401a:	bfde      	ittt	le
 800401c:	2330      	movle	r3, #48	@ 0x30
 800401e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004026:	1b92      	subs	r2, r2, r6
 8004028:	6122      	str	r2, [r4, #16]
 800402a:	464b      	mov	r3, r9
 800402c:	4621      	mov	r1, r4
 800402e:	4640      	mov	r0, r8
 8004030:	f8cd a000 	str.w	sl, [sp]
 8004034:	aa03      	add	r2, sp, #12
 8004036:	f7ff fee3 	bl	8003e00 <_printf_common>
 800403a:	3001      	adds	r0, #1
 800403c:	d14a      	bne.n	80040d4 <_printf_i+0x1f0>
 800403e:	f04f 30ff 	mov.w	r0, #4294967295
 8004042:	b004      	add	sp, #16
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	f043 0320 	orr.w	r3, r3, #32
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	2778      	movs	r7, #120	@ 0x78
 8004052:	4832      	ldr	r0, [pc, #200]	@ (800411c <_printf_i+0x238>)
 8004054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	6831      	ldr	r1, [r6, #0]
 800405c:	061f      	lsls	r7, r3, #24
 800405e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004062:	d402      	bmi.n	800406a <_printf_i+0x186>
 8004064:	065f      	lsls	r7, r3, #25
 8004066:	bf48      	it	mi
 8004068:	b2ad      	uxthmi	r5, r5
 800406a:	6031      	str	r1, [r6, #0]
 800406c:	07d9      	lsls	r1, r3, #31
 800406e:	bf44      	itt	mi
 8004070:	f043 0320 	orrmi.w	r3, r3, #32
 8004074:	6023      	strmi	r3, [r4, #0]
 8004076:	b11d      	cbz	r5, 8004080 <_printf_i+0x19c>
 8004078:	2310      	movs	r3, #16
 800407a:	e7ad      	b.n	8003fd8 <_printf_i+0xf4>
 800407c:	4826      	ldr	r0, [pc, #152]	@ (8004118 <_printf_i+0x234>)
 800407e:	e7e9      	b.n	8004054 <_printf_i+0x170>
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	f023 0320 	bic.w	r3, r3, #32
 8004086:	6023      	str	r3, [r4, #0]
 8004088:	e7f6      	b.n	8004078 <_printf_i+0x194>
 800408a:	4616      	mov	r6, r2
 800408c:	e7bd      	b.n	800400a <_printf_i+0x126>
 800408e:	6833      	ldr	r3, [r6, #0]
 8004090:	6825      	ldr	r5, [r4, #0]
 8004092:	1d18      	adds	r0, r3, #4
 8004094:	6961      	ldr	r1, [r4, #20]
 8004096:	6030      	str	r0, [r6, #0]
 8004098:	062e      	lsls	r6, r5, #24
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	d501      	bpl.n	80040a2 <_printf_i+0x1be>
 800409e:	6019      	str	r1, [r3, #0]
 80040a0:	e002      	b.n	80040a8 <_printf_i+0x1c4>
 80040a2:	0668      	lsls	r0, r5, #25
 80040a4:	d5fb      	bpl.n	800409e <_printf_i+0x1ba>
 80040a6:	8019      	strh	r1, [r3, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	4616      	mov	r6, r2
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	e7bc      	b.n	800402a <_printf_i+0x146>
 80040b0:	6833      	ldr	r3, [r6, #0]
 80040b2:	2100      	movs	r1, #0
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	6032      	str	r2, [r6, #0]
 80040b8:	681e      	ldr	r6, [r3, #0]
 80040ba:	6862      	ldr	r2, [r4, #4]
 80040bc:	4630      	mov	r0, r6
 80040be:	f000 f96b 	bl	8004398 <memchr>
 80040c2:	b108      	cbz	r0, 80040c8 <_printf_i+0x1e4>
 80040c4:	1b80      	subs	r0, r0, r6
 80040c6:	6060      	str	r0, [r4, #4]
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040d2:	e7aa      	b.n	800402a <_printf_i+0x146>
 80040d4:	4632      	mov	r2, r6
 80040d6:	4649      	mov	r1, r9
 80040d8:	4640      	mov	r0, r8
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	47d0      	blx	sl
 80040de:	3001      	adds	r0, #1
 80040e0:	d0ad      	beq.n	800403e <_printf_i+0x15a>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	079b      	lsls	r3, r3, #30
 80040e6:	d413      	bmi.n	8004110 <_printf_i+0x22c>
 80040e8:	68e0      	ldr	r0, [r4, #12]
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	4298      	cmp	r0, r3
 80040ee:	bfb8      	it	lt
 80040f0:	4618      	movlt	r0, r3
 80040f2:	e7a6      	b.n	8004042 <_printf_i+0x15e>
 80040f4:	2301      	movs	r3, #1
 80040f6:	4632      	mov	r2, r6
 80040f8:	4649      	mov	r1, r9
 80040fa:	4640      	mov	r0, r8
 80040fc:	47d0      	blx	sl
 80040fe:	3001      	adds	r0, #1
 8004100:	d09d      	beq.n	800403e <_printf_i+0x15a>
 8004102:	3501      	adds	r5, #1
 8004104:	68e3      	ldr	r3, [r4, #12]
 8004106:	9903      	ldr	r1, [sp, #12]
 8004108:	1a5b      	subs	r3, r3, r1
 800410a:	42ab      	cmp	r3, r5
 800410c:	dcf2      	bgt.n	80040f4 <_printf_i+0x210>
 800410e:	e7eb      	b.n	80040e8 <_printf_i+0x204>
 8004110:	2500      	movs	r5, #0
 8004112:	f104 0619 	add.w	r6, r4, #25
 8004116:	e7f5      	b.n	8004104 <_printf_i+0x220>
 8004118:	08004497 	.word	0x08004497
 800411c:	080044a8 	.word	0x080044a8

08004120 <__sflush_r>:
 8004120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	0716      	lsls	r6, r2, #28
 8004128:	4605      	mov	r5, r0
 800412a:	460c      	mov	r4, r1
 800412c:	d454      	bmi.n	80041d8 <__sflush_r+0xb8>
 800412e:	684b      	ldr	r3, [r1, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	dc02      	bgt.n	800413a <__sflush_r+0x1a>
 8004134:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004136:	2b00      	cmp	r3, #0
 8004138:	dd48      	ble.n	80041cc <__sflush_r+0xac>
 800413a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800413c:	2e00      	cmp	r6, #0
 800413e:	d045      	beq.n	80041cc <__sflush_r+0xac>
 8004140:	2300      	movs	r3, #0
 8004142:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004146:	682f      	ldr	r7, [r5, #0]
 8004148:	6a21      	ldr	r1, [r4, #32]
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	d030      	beq.n	80041b0 <__sflush_r+0x90>
 800414e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	0759      	lsls	r1, r3, #29
 8004154:	d505      	bpl.n	8004162 <__sflush_r+0x42>
 8004156:	6863      	ldr	r3, [r4, #4]
 8004158:	1ad2      	subs	r2, r2, r3
 800415a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800415c:	b10b      	cbz	r3, 8004162 <__sflush_r+0x42>
 800415e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004160:	1ad2      	subs	r2, r2, r3
 8004162:	2300      	movs	r3, #0
 8004164:	4628      	mov	r0, r5
 8004166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004168:	6a21      	ldr	r1, [r4, #32]
 800416a:	47b0      	blx	r6
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	d106      	bne.n	8004180 <__sflush_r+0x60>
 8004172:	6829      	ldr	r1, [r5, #0]
 8004174:	291d      	cmp	r1, #29
 8004176:	d82b      	bhi.n	80041d0 <__sflush_r+0xb0>
 8004178:	4a28      	ldr	r2, [pc, #160]	@ (800421c <__sflush_r+0xfc>)
 800417a:	40ca      	lsrs	r2, r1
 800417c:	07d6      	lsls	r6, r2, #31
 800417e:	d527      	bpl.n	80041d0 <__sflush_r+0xb0>
 8004180:	2200      	movs	r2, #0
 8004182:	6062      	str	r2, [r4, #4]
 8004184:	6922      	ldr	r2, [r4, #16]
 8004186:	04d9      	lsls	r1, r3, #19
 8004188:	6022      	str	r2, [r4, #0]
 800418a:	d504      	bpl.n	8004196 <__sflush_r+0x76>
 800418c:	1c42      	adds	r2, r0, #1
 800418e:	d101      	bne.n	8004194 <__sflush_r+0x74>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b903      	cbnz	r3, 8004196 <__sflush_r+0x76>
 8004194:	6560      	str	r0, [r4, #84]	@ 0x54
 8004196:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004198:	602f      	str	r7, [r5, #0]
 800419a:	b1b9      	cbz	r1, 80041cc <__sflush_r+0xac>
 800419c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041a0:	4299      	cmp	r1, r3
 80041a2:	d002      	beq.n	80041aa <__sflush_r+0x8a>
 80041a4:	4628      	mov	r0, r5
 80041a6:	f7ff fbf5 	bl	8003994 <_free_r>
 80041aa:	2300      	movs	r3, #0
 80041ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80041ae:	e00d      	b.n	80041cc <__sflush_r+0xac>
 80041b0:	2301      	movs	r3, #1
 80041b2:	4628      	mov	r0, r5
 80041b4:	47b0      	blx	r6
 80041b6:	4602      	mov	r2, r0
 80041b8:	1c50      	adds	r0, r2, #1
 80041ba:	d1c9      	bne.n	8004150 <__sflush_r+0x30>
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0c6      	beq.n	8004150 <__sflush_r+0x30>
 80041c2:	2b1d      	cmp	r3, #29
 80041c4:	d001      	beq.n	80041ca <__sflush_r+0xaa>
 80041c6:	2b16      	cmp	r3, #22
 80041c8:	d11d      	bne.n	8004206 <__sflush_r+0xe6>
 80041ca:	602f      	str	r7, [r5, #0]
 80041cc:	2000      	movs	r0, #0
 80041ce:	e021      	b.n	8004214 <__sflush_r+0xf4>
 80041d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041d4:	b21b      	sxth	r3, r3
 80041d6:	e01a      	b.n	800420e <__sflush_r+0xee>
 80041d8:	690f      	ldr	r7, [r1, #16]
 80041da:	2f00      	cmp	r7, #0
 80041dc:	d0f6      	beq.n	80041cc <__sflush_r+0xac>
 80041de:	0793      	lsls	r3, r2, #30
 80041e0:	bf18      	it	ne
 80041e2:	2300      	movne	r3, #0
 80041e4:	680e      	ldr	r6, [r1, #0]
 80041e6:	bf08      	it	eq
 80041e8:	694b      	ldreq	r3, [r1, #20]
 80041ea:	1bf6      	subs	r6, r6, r7
 80041ec:	600f      	str	r7, [r1, #0]
 80041ee:	608b      	str	r3, [r1, #8]
 80041f0:	2e00      	cmp	r6, #0
 80041f2:	ddeb      	ble.n	80041cc <__sflush_r+0xac>
 80041f4:	4633      	mov	r3, r6
 80041f6:	463a      	mov	r2, r7
 80041f8:	4628      	mov	r0, r5
 80041fa:	6a21      	ldr	r1, [r4, #32]
 80041fc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004200:	47e0      	blx	ip
 8004202:	2800      	cmp	r0, #0
 8004204:	dc07      	bgt.n	8004216 <__sflush_r+0xf6>
 8004206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800420a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800420e:	f04f 30ff 	mov.w	r0, #4294967295
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004216:	4407      	add	r7, r0
 8004218:	1a36      	subs	r6, r6, r0
 800421a:	e7e9      	b.n	80041f0 <__sflush_r+0xd0>
 800421c:	20400001 	.word	0x20400001

08004220 <_fflush_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	690b      	ldr	r3, [r1, #16]
 8004224:	4605      	mov	r5, r0
 8004226:	460c      	mov	r4, r1
 8004228:	b913      	cbnz	r3, 8004230 <_fflush_r+0x10>
 800422a:	2500      	movs	r5, #0
 800422c:	4628      	mov	r0, r5
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	b118      	cbz	r0, 800423a <_fflush_r+0x1a>
 8004232:	6a03      	ldr	r3, [r0, #32]
 8004234:	b90b      	cbnz	r3, 800423a <_fflush_r+0x1a>
 8004236:	f7ff f9b3 	bl	80035a0 <__sinit>
 800423a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f3      	beq.n	800422a <_fflush_r+0xa>
 8004242:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004244:	07d0      	lsls	r0, r2, #31
 8004246:	d404      	bmi.n	8004252 <_fflush_r+0x32>
 8004248:	0599      	lsls	r1, r3, #22
 800424a:	d402      	bmi.n	8004252 <_fflush_r+0x32>
 800424c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800424e:	f7ff fb9e 	bl	800398e <__retarget_lock_acquire_recursive>
 8004252:	4628      	mov	r0, r5
 8004254:	4621      	mov	r1, r4
 8004256:	f7ff ff63 	bl	8004120 <__sflush_r>
 800425a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800425c:	4605      	mov	r5, r0
 800425e:	07da      	lsls	r2, r3, #31
 8004260:	d4e4      	bmi.n	800422c <_fflush_r+0xc>
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	059b      	lsls	r3, r3, #22
 8004266:	d4e1      	bmi.n	800422c <_fflush_r+0xc>
 8004268:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800426a:	f7ff fb91 	bl	8003990 <__retarget_lock_release_recursive>
 800426e:	e7dd      	b.n	800422c <_fflush_r+0xc>

08004270 <__swhatbuf_r>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	460c      	mov	r4, r1
 8004274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004278:	4615      	mov	r5, r2
 800427a:	2900      	cmp	r1, #0
 800427c:	461e      	mov	r6, r3
 800427e:	b096      	sub	sp, #88	@ 0x58
 8004280:	da0c      	bge.n	800429c <__swhatbuf_r+0x2c>
 8004282:	89a3      	ldrh	r3, [r4, #12]
 8004284:	2100      	movs	r1, #0
 8004286:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800428a:	bf14      	ite	ne
 800428c:	2340      	movne	r3, #64	@ 0x40
 800428e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004292:	2000      	movs	r0, #0
 8004294:	6031      	str	r1, [r6, #0]
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	b016      	add	sp, #88	@ 0x58
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	466a      	mov	r2, sp
 800429e:	f000 f849 	bl	8004334 <_fstat_r>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	dbed      	blt.n	8004282 <__swhatbuf_r+0x12>
 80042a6:	9901      	ldr	r1, [sp, #4]
 80042a8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80042ac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80042b0:	4259      	negs	r1, r3
 80042b2:	4159      	adcs	r1, r3
 80042b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80042b8:	e7eb      	b.n	8004292 <__swhatbuf_r+0x22>

080042ba <__smakebuf_r>:
 80042ba:	898b      	ldrh	r3, [r1, #12]
 80042bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042be:	079d      	lsls	r5, r3, #30
 80042c0:	4606      	mov	r6, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	d507      	bpl.n	80042d6 <__smakebuf_r+0x1c>
 80042c6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80042ca:	6023      	str	r3, [r4, #0]
 80042cc:	6123      	str	r3, [r4, #16]
 80042ce:	2301      	movs	r3, #1
 80042d0:	6163      	str	r3, [r4, #20]
 80042d2:	b003      	add	sp, #12
 80042d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d6:	466a      	mov	r2, sp
 80042d8:	ab01      	add	r3, sp, #4
 80042da:	f7ff ffc9 	bl	8004270 <__swhatbuf_r>
 80042de:	9f00      	ldr	r7, [sp, #0]
 80042e0:	4605      	mov	r5, r0
 80042e2:	4639      	mov	r1, r7
 80042e4:	4630      	mov	r0, r6
 80042e6:	f7ff fbbf 	bl	8003a68 <_malloc_r>
 80042ea:	b948      	cbnz	r0, 8004300 <__smakebuf_r+0x46>
 80042ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042f0:	059a      	lsls	r2, r3, #22
 80042f2:	d4ee      	bmi.n	80042d2 <__smakebuf_r+0x18>
 80042f4:	f023 0303 	bic.w	r3, r3, #3
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	81a3      	strh	r3, [r4, #12]
 80042fe:	e7e2      	b.n	80042c6 <__smakebuf_r+0xc>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	9b01      	ldr	r3, [sp, #4]
 800430e:	6020      	str	r0, [r4, #0]
 8004310:	b15b      	cbz	r3, 800432a <__smakebuf_r+0x70>
 8004312:	4630      	mov	r0, r6
 8004314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004318:	f000 f81e 	bl	8004358 <_isatty_r>
 800431c:	b128      	cbz	r0, 800432a <__smakebuf_r+0x70>
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	f023 0303 	bic.w	r3, r3, #3
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	81a3      	strh	r3, [r4, #12]
 800432a:	89a3      	ldrh	r3, [r4, #12]
 800432c:	431d      	orrs	r5, r3
 800432e:	81a5      	strh	r5, [r4, #12]
 8004330:	e7cf      	b.n	80042d2 <__smakebuf_r+0x18>
	...

08004334 <_fstat_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	2300      	movs	r3, #0
 8004338:	4d06      	ldr	r5, [pc, #24]	@ (8004354 <_fstat_r+0x20>)
 800433a:	4604      	mov	r4, r0
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	602b      	str	r3, [r5, #0]
 8004342:	f7fc fb25 	bl	8000990 <_fstat>
 8004346:	1c43      	adds	r3, r0, #1
 8004348:	d102      	bne.n	8004350 <_fstat_r+0x1c>
 800434a:	682b      	ldr	r3, [r5, #0]
 800434c:	b103      	cbz	r3, 8004350 <_fstat_r+0x1c>
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	bd38      	pop	{r3, r4, r5, pc}
 8004352:	bf00      	nop
 8004354:	200002a8 	.word	0x200002a8

08004358 <_isatty_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	2300      	movs	r3, #0
 800435c:	4d05      	ldr	r5, [pc, #20]	@ (8004374 <_isatty_r+0x1c>)
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fc fb23 	bl	80009ae <_isatty>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_isatty_r+0x1a>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b103      	cbz	r3, 8004372 <_isatty_r+0x1a>
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	200002a8 	.word	0x200002a8

08004378 <_sbrk_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	2300      	movs	r3, #0
 800437c:	4d05      	ldr	r5, [pc, #20]	@ (8004394 <_sbrk_r+0x1c>)
 800437e:	4604      	mov	r4, r0
 8004380:	4608      	mov	r0, r1
 8004382:	602b      	str	r3, [r5, #0]
 8004384:	f7fc fb2a 	bl	80009dc <_sbrk>
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d102      	bne.n	8004392 <_sbrk_r+0x1a>
 800438c:	682b      	ldr	r3, [r5, #0]
 800438e:	b103      	cbz	r3, 8004392 <_sbrk_r+0x1a>
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	bd38      	pop	{r3, r4, r5, pc}
 8004394:	200002a8 	.word	0x200002a8

08004398 <memchr>:
 8004398:	4603      	mov	r3, r0
 800439a:	b510      	push	{r4, lr}
 800439c:	b2c9      	uxtb	r1, r1
 800439e:	4402      	add	r2, r0
 80043a0:	4293      	cmp	r3, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	d101      	bne.n	80043aa <memchr+0x12>
 80043a6:	2000      	movs	r0, #0
 80043a8:	e003      	b.n	80043b2 <memchr+0x1a>
 80043aa:	7804      	ldrb	r4, [r0, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	428c      	cmp	r4, r1
 80043b0:	d1f6      	bne.n	80043a0 <memchr+0x8>
 80043b2:	bd10      	pop	{r4, pc}

080043b4 <_init>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr

080043c0 <_fini>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr
