
LCD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000578c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d78  08005898  08005898  00006898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006610  08006610  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006610  08006610  00007610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006618  08006618  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006618  08006618  00007618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800661c  0800661c  0000761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006620  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000068  08006688  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006688  000082d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8d3  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a98  00000000  00000000  00013964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00015400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094b  00000000  00000000  00015fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018342  00000000  00000000  0001692b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dee1  00000000  00000000  0002ec6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088697  00000000  00000000  0003cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c51e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f4  00000000  00000000  000c5228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c8c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08005880 	.word	0x08005880

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08005880 	.word	0x08005880

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  if (ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f004 f9cd 	bl	8004512 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f004 f9c6 	bl	8004512 <HAL_UART_Transmit>

  return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	08005898 	.word	0x08005898
 8000194:	20000130 	.word	0x20000130

08000198 <I2C_Scan>:
  * @brief  I2C 주소 스캔 함수
  * @param  None
  * @retval None
  */
void I2C_Scan(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
  printf("\n=== I2C Address Scan ===\n");
 800019e:	482a      	ldr	r0, [pc, #168]	@ (8000248 <I2C_Scan+0xb0>)
 80001a0:	f004 fcbe 	bl	8004b20 <puts>
  printf("Scanning I2C bus...\n");
 80001a4:	4829      	ldr	r0, [pc, #164]	@ (800024c <I2C_Scan+0xb4>)
 80001a6:	f004 fcbb 	bl	8004b20 <puts>

  i2c_scan_found = 0;
 80001aa:	4b29      	ldr	r3, [pc, #164]	@ (8000250 <I2C_Scan+0xb8>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	701a      	strb	r2, [r3, #0]

  for(uint8_t i = 0; i < 128; i++) // 7비트 주소(i) 0부터 127까지 반복
 80001b0:	2300      	movs	r3, #0
 80001b2:	71fb      	strb	r3, [r7, #7]
 80001b4:	e02e      	b.n	8000214 <I2C_Scan+0x7c>
  {
    if(HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK)
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	b29b      	uxth	r3, r3
 80001ba:	005b      	lsls	r3, r3, #1
 80001bc:	b299      	uxth	r1, r3
 80001be:	2305      	movs	r3, #5
 80001c0:	2203      	movs	r2, #3
 80001c2:	4824      	ldr	r0, [pc, #144]	@ (8000254 <I2C_Scan+0xbc>)
 80001c4:	f002 fd14 	bl	8002bf0 <HAL_I2C_IsDeviceReady>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d11f      	bne.n	800020e <I2C_Scan+0x76>
    	// I2C 주소를 8비트 형식으로 받음, 왼쪽으로 1비트 쉬프트 하면 7비트(i)가 8비트 슬레이브 주소로 만들어짐
    	// 슬레이브 주소: 특정 장치 호출할 때 사용, 지금은 EEPROM 장치의 주소가 되는 거임
    	//HAL_I2C_IsDeviceReady(사용할 I2C, 8비트 슬레이브 주소, 시도횟수, 타임아웃시간) == 응답 반환
    {
      printf("Found I2C device at address: 0x%02X (7-bit: 0x%02X)\n", (i<<1), i);
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	79fa      	ldrb	r2, [r7, #7]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4820      	ldr	r0, [pc, #128]	@ (8000258 <I2C_Scan+0xc0>)
 80001d8:	f004 fc32 	bl	8004a40 <iprintf>
      i2c_scan_found++;
 80001dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000250 <I2C_Scan+0xb8>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000250 <I2C_Scan+0xb8>)
 80001e6:	701a      	strb	r2, [r3, #0]
      // K24C256 주소 범위 확인 (0xA0~0xAE) 왜 이 범위인 거임?
      // 1010 A2 A1 A0
      // 상위 4비트: 고정값, EEPROM 종류를 나타내는 디바이스 타입 코드
      // 하위 3비트: EEPROM 칩의 A2, A1, A0 핀을 GND나 VCC에 연결하여 설정하는 하드웨어 주소

      if((i<<1) >= 0xA0 && (i<<1) <= 0xAE)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2b9f      	cmp	r3, #159	@ 0x9f
 80001ee:	dd0e      	ble.n	800020e <I2C_Scan+0x76>
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	2bae      	cmp	r3, #174	@ 0xae
 80001f6:	dc0a      	bgt.n	800020e <I2C_Scan+0x76>
      {
        eeprom_address = (i<<1); // 응답 주소가 범위 내에 있으면, 해당 주소를 저장하고 테스트에 활용
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	005b      	lsls	r3, r3, #1
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	4b17      	ldr	r3, [pc, #92]	@ (800025c <I2C_Scan+0xc4>)
 8000200:	701a      	strb	r2, [r3, #0]
        printf("** K24C256 EEPROM detected at 0x%02X **\n", eeprom_address);
 8000202:	4b16      	ldr	r3, [pc, #88]	@ (800025c <I2C_Scan+0xc4>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	4619      	mov	r1, r3
 8000208:	4815      	ldr	r0, [pc, #84]	@ (8000260 <I2C_Scan+0xc8>)
 800020a:	f004 fc19 	bl	8004a40 <iprintf>
  for(uint8_t i = 0; i < 128; i++) // 7비트 주소(i) 0부터 127까지 반복
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	3301      	adds	r3, #1
 8000212:	71fb      	strb	r3, [r7, #7]
 8000214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000218:	2b00      	cmp	r3, #0
 800021a:	dacc      	bge.n	80001b6 <I2C_Scan+0x1e>
      }
    }
  }

  if(i2c_scan_found == 0)
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <I2C_Scan+0xb8>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d103      	bne.n	800022c <I2C_Scan+0x94>
  {
    printf("No I2C devices found!\n");
 8000224:	480f      	ldr	r0, [pc, #60]	@ (8000264 <I2C_Scan+0xcc>)
 8000226:	f004 fc7b 	bl	8004b20 <puts>
 800022a:	e005      	b.n	8000238 <I2C_Scan+0xa0>
  }
  else
  {
    printf("Total %d I2C device(s) found.\n", i2c_scan_found);
 800022c:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <I2C_Scan+0xb8>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4619      	mov	r1, r3
 8000232:	480d      	ldr	r0, [pc, #52]	@ (8000268 <I2C_Scan+0xd0>)
 8000234:	f004 fc04 	bl	8004a40 <iprintf>
  }
  printf("========================\n\n");
 8000238:	480c      	ldr	r0, [pc, #48]	@ (800026c <I2C_Scan+0xd4>)
 800023a:	f004 fc71 	bl	8004b20 <puts>
}
 800023e:	bf00      	nop
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	0800589c 	.word	0x0800589c
 800024c:	080058b8 	.word	0x080058b8
 8000250:	20000178 	.word	0x20000178
 8000254:	20000084 	.word	0x20000084
 8000258:	080058cc 	.word	0x080058cc
 800025c:	20000179 	.word	0x20000179
 8000260:	08005904 	.word	0x08005904
 8000264:	08005930 	.word	0x08005930
 8000268:	08005948 	.word	0x08005948
 800026c:	08005968 	.word	0x08005968

08000270 <EEPROM_Write>:
  * @param  data: 쓸 데이터 포인터
  * @param  size: 데이터 크기
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef EEPROM_Write(uint16_t mem_addr, uint8_t *data, uint16_t size)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af04      	add	r7, sp, #16
 8000276:	4603      	mov	r3, r0
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	80fb      	strh	r3, [r7, #6]
 800027c:	4613      	mov	r3, r2
 800027e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000280:	2300      	movs	r3, #0
 8000282:	73fb      	strb	r3, [r7, #15]
  uint16_t bytes_to_write;
  uint16_t current_addr = mem_addr;
 8000284:	88fb      	ldrh	r3, [r7, #6]
 8000286:	817b      	strh	r3, [r7, #10]
  uint16_t data_index = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	813b      	strh	r3, [r7, #8]

  while(size > 0)
 800028c:	e03a      	b.n	8000304 <EEPROM_Write+0x94>
  {
    // 페이지 경계를 고려한 쓰기 크기 계산
    bytes_to_write = EEPROM_PAGE_SIZE - (current_addr % EEPROM_PAGE_SIZE);
 800028e:	897b      	ldrh	r3, [r7, #10]
 8000290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000294:	b29b      	uxth	r3, r3
 8000296:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800029a:	81bb      	strh	r3, [r7, #12]
    if(bytes_to_write > size)
 800029c:	89ba      	ldrh	r2, [r7, #12]
 800029e:	88bb      	ldrh	r3, [r7, #4]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d901      	bls.n	80002a8 <EEPROM_Write+0x38>
      bytes_to_write = size;
 80002a4:	88bb      	ldrh	r3, [r7, #4]
 80002a6:	81bb      	strh	r3, [r7, #12]

    // EEPROM에 쓰기
    status = HAL_I2C_Mem_Write(&hi2c1, eeprom_address, current_addr,I2C_MEMADD_SIZE_16BIT, &data[data_index], bytes_to_write, HAL_MAX_DELAY);
 80002a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000314 <EEPROM_Write+0xa4>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	4618      	mov	r0, r3
 80002ae:	893b      	ldrh	r3, [r7, #8]
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	8979      	ldrh	r1, [r7, #10]
 80002b6:	f04f 32ff 	mov.w	r2, #4294967295
 80002ba:	9202      	str	r2, [sp, #8]
 80002bc:	89ba      	ldrh	r2, [r7, #12]
 80002be:	9201      	str	r2, [sp, #4]
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2310      	movs	r3, #16
 80002c4:	460a      	mov	r2, r1
 80002c6:	4601      	mov	r1, r0
 80002c8:	4813      	ldr	r0, [pc, #76]	@ (8000318 <EEPROM_Write+0xa8>)
 80002ca:	f002 f923 	bl	8002514 <HAL_I2C_Mem_Write>
 80002ce:	4603      	mov	r3, r0
 80002d0:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK)
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d006      	beq.n	80002e6 <EEPROM_Write+0x76>
    {
      printf("EEPROM Write Error at address 0x%04X\n", current_addr);
 80002d8:	897b      	ldrh	r3, [r7, #10]
 80002da:	4619      	mov	r1, r3
 80002dc:	480f      	ldr	r0, [pc, #60]	@ (800031c <EEPROM_Write+0xac>)
 80002de:	f004 fbaf 	bl	8004a40 <iprintf>
      return status;
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	e012      	b.n	800030c <EEPROM_Write+0x9c>
    }

    // EEPROM 쓰기 완료 대기 (Write Cycle Time)
    HAL_Delay(5);
 80002e6:	2005      	movs	r0, #5
 80002e8:	f001 fa74 	bl	80017d4 <HAL_Delay>

    // 다음 쓰기를 위한 변수 업데이트
    current_addr += bytes_to_write;
 80002ec:	897a      	ldrh	r2, [r7, #10]
 80002ee:	89bb      	ldrh	r3, [r7, #12]
 80002f0:	4413      	add	r3, r2
 80002f2:	817b      	strh	r3, [r7, #10]
    data_index += bytes_to_write;
 80002f4:	893a      	ldrh	r2, [r7, #8]
 80002f6:	89bb      	ldrh	r3, [r7, #12]
 80002f8:	4413      	add	r3, r2
 80002fa:	813b      	strh	r3, [r7, #8]
    size -= bytes_to_write;
 80002fc:	88ba      	ldrh	r2, [r7, #4]
 80002fe:	89bb      	ldrh	r3, [r7, #12]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	80bb      	strh	r3, [r7, #4]
  while(size > 0)
 8000304:	88bb      	ldrh	r3, [r7, #4]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d1c1      	bne.n	800028e <EEPROM_Write+0x1e>
  }

  return status;
 800030a:	7bfb      	ldrb	r3, [r7, #15]
}
 800030c:	4618      	mov	r0, r3
 800030e:	3710      	adds	r7, #16
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	20000179 	.word	0x20000179
 8000318:	20000084 	.word	0x20000084
 800031c:	08005984 	.word	0x08005984

08000320 <EEPROM_Read>:
  * @param  data: 읽을 데이터 포인터
  * @param  size: 데이터 크기
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef EEPROM_Read(uint16_t mem_addr, uint8_t *data, uint16_t size)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af04      	add	r7, sp, #16
 8000326:	4603      	mov	r3, r0
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	80fb      	strh	r3, [r7, #6]
 800032c:	4613      	mov	r3, r2
 800032e:	80bb      	strh	r3, [r7, #4]
  return HAL_I2C_Mem_Read(&hi2c1, eeprom_address, mem_addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <EEPROM_Read+0x38>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4619      	mov	r1, r3
 8000336:	88fa      	ldrh	r2, [r7, #6]
 8000338:	f04f 33ff 	mov.w	r3, #4294967295
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	88bb      	ldrh	r3, [r7, #4]
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	2310      	movs	r3, #16
 8000348:	4804      	ldr	r0, [pc, #16]	@ (800035c <EEPROM_Read+0x3c>)
 800034a:	f002 f9dd 	bl	8002708 <HAL_I2C_Mem_Read>
 800034e:	4603      	mov	r3, r0
}
 8000350:	4618      	mov	r0, r3
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000179 	.word	0x20000179
 800035c:	20000084 	.word	0x20000084

08000360 <EEPROM_Test>:
  * @brief  EEPROM 테스트 함수
  * @param  None
  * @retval None
  */
void EEPROM_Test(void)
{
 8000360:	b5b0      	push	{r4, r5, r7, lr}
 8000362:	b0ac      	sub	sp, #176	@ 0xb0
 8000364:	af00      	add	r7, sp, #0
  if(eeprom_address == 0)
 8000366:	4b7f      	ldr	r3, [pc, #508]	@ (8000564 <EEPROM_Test+0x204>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d103      	bne.n	8000376 <EEPROM_Test+0x16>
  {
    printf("EEPROM not detected! Cannot perform test.\n\n");
 800036e:	487e      	ldr	r0, [pc, #504]	@ (8000568 <EEPROM_Test+0x208>)
 8000370:	f004 fbd6 	bl	8004b20 <puts>
    return;
 8000374:	e0f2      	b.n	800055c <EEPROM_Test+0x1fc>
  }

  printf("=== EEPROM Test ===\n");
 8000376:	487d      	ldr	r0, [pc, #500]	@ (800056c <EEPROM_Test+0x20c>)
 8000378:	f004 fbd2 	bl	8004b20 <puts>

  // 테스트 데이터 준비
  char write_data[] = "Hello, STM32F103 with K24C256 EEPROM!";
 800037c:	4b7c      	ldr	r3, [pc, #496]	@ (8000570 <EEPROM_Test+0x210>)
 800037e:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8000382:	461d      	mov	r5, r3
 8000384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000390:	6020      	str	r0, [r4, #0]
 8000392:	3404      	adds	r4, #4
 8000394:	8021      	strh	r1, [r4, #0]
  uint8_t read_data[100] = {0};
 8000396:	f107 0318 	add.w	r3, r7, #24
 800039a:	2264      	movs	r2, #100	@ 0x64
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f004 fcae 	bl	8004d00 <memset>
  uint16_t data_len = strlen(write_data);
 80003a4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fecf 	bl	800014c <strlen>
 80003ae:	4603      	mov	r3, r0
 80003b0:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6

  printf("Test Address: 0x%04X\n", TEST_ADDRESS);
 80003b4:	2100      	movs	r1, #0
 80003b6:	486f      	ldr	r0, [pc, #444]	@ (8000574 <EEPROM_Test+0x214>)
 80003b8:	f004 fb42 	bl	8004a40 <iprintf>
  printf("Write Data: \"%s\" (%d bytes)\n", write_data, data_len);
 80003bc:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80003c0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80003c4:	4619      	mov	r1, r3
 80003c6:	486c      	ldr	r0, [pc, #432]	@ (8000578 <EEPROM_Test+0x218>)
 80003c8:	f004 fb3a 	bl	8004a40 <iprintf>

  // EEPROM에 데이터 쓰기
  printf("Writing to EEPROM...\n");
 80003cc:	486b      	ldr	r0, [pc, #428]	@ (800057c <EEPROM_Test+0x21c>)
 80003ce:	f004 fba7 	bl	8004b20 <puts>
  if(EEPROM_Write(TEST_ADDRESS, (uint8_t*)write_data, data_len) == HAL_OK)
 80003d2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80003d6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80003da:	4619      	mov	r1, r3
 80003dc:	2000      	movs	r0, #0
 80003de:	f7ff ff47 	bl	8000270 <EEPROM_Write>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d114      	bne.n	8000412 <EEPROM_Test+0xb2>
  {
    printf("Write successful!\n");
 80003e8:	4865      	ldr	r0, [pc, #404]	@ (8000580 <EEPROM_Test+0x220>)
 80003ea:	f004 fb99 	bl	8004b20 <puts>
    printf("Write failed!\n");
    return;
  }

  // 잠시 대기
  HAL_Delay(10);
 80003ee:	200a      	movs	r0, #10
 80003f0:	f001 f9f0 	bl	80017d4 <HAL_Delay>

  // EEPROM에서 데이터 읽기
  printf("Reading from EEPROM...\n");
 80003f4:	4863      	ldr	r0, [pc, #396]	@ (8000584 <EEPROM_Test+0x224>)
 80003f6:	f004 fb93 	bl	8004b20 <puts>
  if(EEPROM_Read(TEST_ADDRESS, read_data, data_len) == HAL_OK)
 80003fa:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	4619      	mov	r1, r3
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff ff8b 	bl	8000320 <EEPROM_Read>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d123      	bne.n	8000458 <EEPROM_Test+0xf8>
 8000410:	e003      	b.n	800041a <EEPROM_Test+0xba>
    printf("Write failed!\n");
 8000412:	485d      	ldr	r0, [pc, #372]	@ (8000588 <EEPROM_Test+0x228>)
 8000414:	f004 fb84 	bl	8004b20 <puts>
    return;
 8000418:	e0a0      	b.n	800055c <EEPROM_Test+0x1fc>
  {
    printf("Read successful!\n");
 800041a:	485c      	ldr	r0, [pc, #368]	@ (800058c <EEPROM_Test+0x22c>)
 800041c:	f004 fb80 	bl	8004b20 <puts>
    printf("Read Data: \"%s\" (%d bytes)\n", (char*)read_data, data_len);
 8000420:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8000424:	f107 0318 	add.w	r3, r7, #24
 8000428:	4619      	mov	r1, r3
 800042a:	4859      	ldr	r0, [pc, #356]	@ (8000590 <EEPROM_Test+0x230>)
 800042c:	f004 fb08 	bl	8004a40 <iprintf>

    // 데이터 비교
    if(memcmp(write_data, read_data, data_len) == 0)
 8000430:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8000434:	f107 0118 	add.w	r1, r7, #24
 8000438:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800043c:	4618      	mov	r0, r3
 800043e:	f004 fc4f 	bl	8004ce0 <memcmp>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d103      	bne.n	8000450 <EEPROM_Test+0xf0>
    {
      printf("** Data verification PASSED! **\n");
 8000448:	4852      	ldr	r0, [pc, #328]	@ (8000594 <EEPROM_Test+0x234>)
 800044a:	f004 fb69 	bl	8004b20 <puts>
 800044e:	e006      	b.n	800045e <EEPROM_Test+0xfe>
    }
    else
    {
      printf("** Data verification FAILED! **\n");
 8000450:	4851      	ldr	r0, [pc, #324]	@ (8000598 <EEPROM_Test+0x238>)
 8000452:	f004 fb65 	bl	8004b20 <puts>
 8000456:	e002      	b.n	800045e <EEPROM_Test+0xfe>
    }
  }
  else
  {
    printf("Read failed!\n");
 8000458:	4850      	ldr	r0, [pc, #320]	@ (800059c <EEPROM_Test+0x23c>)
 800045a:	f004 fb61 	bl	8004b20 <puts>
  }

  printf("===================\n\n");
 800045e:	4850      	ldr	r0, [pc, #320]	@ (80005a0 <EEPROM_Test+0x240>)
 8000460:	f004 fb5e 	bl	8004b20 <puts>

  // 추가 테스트: 숫자 데이터
  printf("=== Number Data Test ===\n");
 8000464:	484f      	ldr	r0, [pc, #316]	@ (80005a4 <EEPROM_Test+0x244>)
 8000466:	f004 fb5b 	bl	8004b20 <puts>
  uint8_t num_write[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 800046a:	4a4f      	ldr	r2, [pc, #316]	@ (80005a8 <EEPROM_Test+0x248>)
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	ca07      	ldmia	r2, {r0, r1, r2}
 8000472:	c303      	stmia	r3!, {r0, r1}
 8000474:	801a      	strh	r2, [r3, #0]
  uint8_t num_read[10] = {0};
 8000476:	463b      	mov	r3, r7
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	811a      	strh	r2, [r3, #8]
  uint16_t num_addr = TEST_ADDRESS + 100;
 8000480:	2364      	movs	r3, #100	@ 0x64
 8000482:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4

  printf("Writing numbers 0-9 to address 0x%04X...\n", num_addr);
 8000486:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800048a:	4619      	mov	r1, r3
 800048c:	4847      	ldr	r0, [pc, #284]	@ (80005ac <EEPROM_Test+0x24c>)
 800048e:	f004 fad7 	bl	8004a40 <iprintf>
  if(EEPROM_Write(num_addr, num_write, 10) == HAL_OK)
 8000492:	f107 010c 	add.w	r1, r7, #12
 8000496:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 800049a:	220a      	movs	r2, #10
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fee7 	bl	8000270 <EEPROM_Write>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d156      	bne.n	8000556 <EEPROM_Test+0x1f6>
  {
    HAL_Delay(10);
 80004a8:	200a      	movs	r0, #10
 80004aa:	f001 f993 	bl	80017d4 <HAL_Delay>

    if(EEPROM_Read(num_addr, num_read, 10) == HAL_OK)
 80004ae:	4639      	mov	r1, r7
 80004b0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 80004b4:	220a      	movs	r2, #10
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff32 	bl	8000320 <EEPROM_Read>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d149      	bne.n	8000556 <EEPROM_Test+0x1f6>
    {
      printf("Write Data: ");
 80004c2:	483b      	ldr	r0, [pc, #236]	@ (80005b0 <EEPROM_Test+0x250>)
 80004c4:	f004 fabc 	bl	8004a40 <iprintf>
      for(int i = 0; i < 10; i++) printf("%d ", num_write[i]);
 80004c8:	2300      	movs	r3, #0
 80004ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80004ce:	e00e      	b.n	80004ee <EEPROM_Test+0x18e>
 80004d0:	f107 020c 	add.w	r2, r7, #12
 80004d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	4835      	ldr	r0, [pc, #212]	@ (80005b4 <EEPROM_Test+0x254>)
 80004e0:	f004 faae 	bl	8004a40 <iprintf>
 80004e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80004e8:	3301      	adds	r3, #1
 80004ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80004ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80004f2:	2b09      	cmp	r3, #9
 80004f4:	ddec      	ble.n	80004d0 <EEPROM_Test+0x170>
      printf("\n");
 80004f6:	200a      	movs	r0, #10
 80004f8:	f004 fab4 	bl	8004a64 <putchar>

      printf("Read Data:  ");
 80004fc:	482e      	ldr	r0, [pc, #184]	@ (80005b8 <EEPROM_Test+0x258>)
 80004fe:	f004 fa9f 	bl	8004a40 <iprintf>
      for(int i = 0; i < 10; i++) printf("%d ", num_read[i]);
 8000502:	2300      	movs	r3, #0
 8000504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000508:	e00d      	b.n	8000526 <EEPROM_Test+0x1c6>
 800050a:	463a      	mov	r2, r7
 800050c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	4827      	ldr	r0, [pc, #156]	@ (80005b4 <EEPROM_Test+0x254>)
 8000518:	f004 fa92 	bl	8004a40 <iprintf>
 800051c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000520:	3301      	adds	r3, #1
 8000522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800052a:	2b09      	cmp	r3, #9
 800052c:	dded      	ble.n	800050a <EEPROM_Test+0x1aa>
      printf("\n");
 800052e:	200a      	movs	r0, #10
 8000530:	f004 fa98 	bl	8004a64 <putchar>

      if(memcmp(num_write, num_read, 10) == 0)
 8000534:	4639      	mov	r1, r7
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	220a      	movs	r2, #10
 800053c:	4618      	mov	r0, r3
 800053e:	f004 fbcf 	bl	8004ce0 <memcmp>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d103      	bne.n	8000550 <EEPROM_Test+0x1f0>
      {
        printf("** Number test PASSED! **\n");
 8000548:	481c      	ldr	r0, [pc, #112]	@ (80005bc <EEPROM_Test+0x25c>)
 800054a:	f004 fae9 	bl	8004b20 <puts>
 800054e:	e002      	b.n	8000556 <EEPROM_Test+0x1f6>
      }
      else
      {
        printf("** Number test FAILED! **\n");
 8000550:	481b      	ldr	r0, [pc, #108]	@ (80005c0 <EEPROM_Test+0x260>)
 8000552:	f004 fae5 	bl	8004b20 <puts>
      }
    }
  }
  printf("========================\n\n");
 8000556:	481b      	ldr	r0, [pc, #108]	@ (80005c4 <EEPROM_Test+0x264>)
 8000558:	f004 fae2 	bl	8004b20 <puts>
}
 800055c:	37b0      	adds	r7, #176	@ 0xb0
 800055e:	46bd      	mov	sp, r7
 8000560:	bdb0      	pop	{r4, r5, r7, pc}
 8000562:	bf00      	nop
 8000564:	20000179 	.word	0x20000179
 8000568:	080059ac 	.word	0x080059ac
 800056c:	080059d8 	.word	0x080059d8
 8000570:	08005bb4 	.word	0x08005bb4
 8000574:	080059ec 	.word	0x080059ec
 8000578:	08005a04 	.word	0x08005a04
 800057c:	08005a24 	.word	0x08005a24
 8000580:	08005a3c 	.word	0x08005a3c
 8000584:	08005a60 	.word	0x08005a60
 8000588:	08005a50 	.word	0x08005a50
 800058c:	08005a78 	.word	0x08005a78
 8000590:	08005a8c 	.word	0x08005a8c
 8000594:	08005aa8 	.word	0x08005aa8
 8000598:	08005ac8 	.word	0x08005ac8
 800059c:	08005ae8 	.word	0x08005ae8
 80005a0:	08005af8 	.word	0x08005af8
 80005a4:	08005b10 	.word	0x08005b10
 80005a8:	08005bdc 	.word	0x08005bdc
 80005ac:	08005b2c 	.word	0x08005b2c
 80005b0:	08005b58 	.word	0x08005b58
 80005b4:	08005b68 	.word	0x08005b68
 80005b8:	08005b6c 	.word	0x08005b6c
 80005bc:	08005b7c 	.word	0x08005b7c
 80005c0:	08005b98 	.word	0x08005b98
 80005c4:	08005968 	.word	0x08005968

080005c8 <Test_0xB0_Device>:

void Test_0xB0_Device(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b092      	sub	sp, #72	@ 0x48
 80005cc:	af04      	add	r7, sp, #16
  printf("=== Testing 0xB0 Device Identity ===\n");
 80005ce:	48be      	ldr	r0, [pc, #760]	@ (80008c8 <Test_0xB0_Device+0x300>)
 80005d0:	f004 faa6 	bl	8004b20 <puts>
  printf("Checking if 0xB0 is an extended memory block...\n\n");
 80005d4:	48bd      	ldr	r0, [pc, #756]	@ (80008cc <Test_0xB0_Device+0x304>)
 80005d6:	f004 faa3 	bl	8004b20 <puts>

  uint8_t write_data[] = "Block1Test";
 80005da:	4abd      	ldr	r2, [pc, #756]	@ (80008d0 <Test_0xB0_Device+0x308>)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e2:	c303      	stmia	r3!, {r0, r1}
 80005e4:	801a      	strh	r2, [r3, #0]
 80005e6:	3302      	adds	r3, #2
 80005e8:	0c12      	lsrs	r2, r2, #16
 80005ea:	701a      	strb	r2, [r3, #0]
  uint8_t read_data[20] = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  uint16_t test_addr = 0x0100;
 80005fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000600:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  HAL_StatusTypeDef status;

  // 테스트 1: EEPROM처럼 동작하는지 확인
  printf("Test 1: Writing to 0xB0 at address 0x%04X...\n", test_addr);
 8000602:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000604:	4619      	mov	r1, r3
 8000606:	48b3      	ldr	r0, [pc, #716]	@ (80008d4 <Test_0xB0_Device+0x30c>)
 8000608:	f004 fa1a 	bl	8004a40 <iprintf>
  status = HAL_I2C_Mem_Write(&hi2c1, 0xB0, test_addr,
                             I2C_MEMADD_SIZE_16BIT, write_data,
                             strlen((char*)write_data), HAL_MAX_DELAY);
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fd9b 	bl	800014c <strlen>
 8000616:	4603      	mov	r3, r0
  status = HAL_I2C_Mem_Write(&hi2c1, 0xB0, test_addr,
 8000618:	b29b      	uxth	r3, r3
 800061a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800061c:	f04f 31ff 	mov.w	r1, #4294967295
 8000620:	9102      	str	r1, [sp, #8]
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2310      	movs	r3, #16
 800062c:	21b0      	movs	r1, #176	@ 0xb0
 800062e:	48aa      	ldr	r0, [pc, #680]	@ (80008d8 <Test_0xB0_Device+0x310>)
 8000630:	f001 ff70 	bl	8002514 <HAL_I2C_Mem_Write>
 8000634:	4603      	mov	r3, r0
 8000636:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

  if(status == HAL_OK)
 800063a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800063e:	2b00      	cmp	r3, #0
 8000640:	d15f      	bne.n	8000702 <Test_0xB0_Device+0x13a>
  {
    printf("  Write to 0xB0: SUCCESS\n");
 8000642:	48a6      	ldr	r0, [pc, #664]	@ (80008dc <Test_0xB0_Device+0x314>)
 8000644:	f004 fa6c 	bl	8004b20 <puts>
    HAL_Delay(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f001 f8c3 	bl	80017d4 <HAL_Delay>

    // 읽기 시도
    printf("Test 2: Reading from 0xB0 at address 0x%04X...\n", test_addr);
 800064e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000650:	4619      	mov	r1, r3
 8000652:	48a3      	ldr	r0, [pc, #652]	@ (80008e0 <Test_0xB0_Device+0x318>)
 8000654:	f004 f9f4 	bl	8004a40 <iprintf>
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, test_addr,
                              I2C_MEMADD_SIZE_16BIT, read_data,
                              strlen((char*)write_data), HAL_MAX_DELAY);
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff fd75 	bl	800014c <strlen>
 8000662:	4603      	mov	r3, r0
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, test_addr,
 8000664:	b29b      	uxth	r3, r3
 8000666:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000668:	f04f 31ff 	mov.w	r1, #4294967295
 800066c:	9102      	str	r1, [sp, #8]
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2310      	movs	r3, #16
 8000678:	21b0      	movs	r1, #176	@ 0xb0
 800067a:	4897      	ldr	r0, [pc, #604]	@ (80008d8 <Test_0xB0_Device+0x310>)
 800067c:	f002 f844 	bl	8002708 <HAL_I2C_Mem_Read>
 8000680:	4603      	mov	r3, r0
 8000682:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if(status == HAL_OK)
 8000686:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800068a:	2b00      	cmp	r3, #0
 800068c:	d132      	bne.n	80006f4 <Test_0xB0_Device+0x12c>
    {
      printf("  Read from 0xB0: SUCCESS\n");
 800068e:	4895      	ldr	r0, [pc, #596]	@ (80008e4 <Test_0xB0_Device+0x31c>)
 8000690:	f004 fa46 	bl	8004b20 <puts>
      printf("  Write Data: \"%s\"\n", write_data);
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4619      	mov	r1, r3
 800069a:	4893      	ldr	r0, [pc, #588]	@ (80008e8 <Test_0xB0_Device+0x320>)
 800069c:	f004 f9d0 	bl	8004a40 <iprintf>
      printf("  Read Data:  \"%s\"\n", read_data);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	4891      	ldr	r0, [pc, #580]	@ (80008ec <Test_0xB0_Device+0x324>)
 80006a8:	f004 f9ca 	bl	8004a40 <iprintf>

      if(memcmp(write_data, read_data, strlen((char*)write_data)) == 0)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff fd4b 	bl	800014c <strlen>
 80006b6:	4602      	mov	r2, r0
 80006b8:	f107 010c 	add.w	r1, r7, #12
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fb0d 	bl	8004ce0 <memcmp>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10f      	bne.n	80006ec <Test_0xB0_Device+0x124>
      {
        printf("\n** 0xB0 IS A VALID EEPROM BLOCK! **\n");
 80006cc:	4888      	ldr	r0, [pc, #544]	@ (80008f0 <Test_0xB0_Device+0x328>)
 80006ce:	f004 fa27 	bl	8004b20 <puts>
        printf("** Your chip is likely 64KB (512Kbit), not 32KB! **\n");
 80006d2:	4888      	ldr	r0, [pc, #544]	@ (80008f4 <Test_0xB0_Device+0x32c>)
 80006d4:	f004 fa24 	bl	8004b20 <puts>
        printf("** Block 0 (0xA0): 32KB **\n");
 80006d8:	4887      	ldr	r0, [pc, #540]	@ (80008f8 <Test_0xB0_Device+0x330>)
 80006da:	f004 fa21 	bl	8004b20 <puts>
        printf("** Block 1 (0xB0): 32KB **\n");
 80006de:	4887      	ldr	r0, [pc, #540]	@ (80008fc <Test_0xB0_Device+0x334>)
 80006e0:	f004 fa1e 	bl	8004b20 <puts>
        printf("** Total: 64KB available! **\n");
 80006e4:	4886      	ldr	r0, [pc, #536]	@ (8000900 <Test_0xB0_Device+0x338>)
 80006e6:	f004 fa1b 	bl	8004b20 <puts>
 80006ea:	e07d      	b.n	80007e8 <Test_0xB0_Device+0x220>
      }
      else
      {
        printf("\n** Data mismatch - 0xB0 behavior unclear **\n");
 80006ec:	4885      	ldr	r0, [pc, #532]	@ (8000904 <Test_0xB0_Device+0x33c>)
 80006ee:	f004 fa17 	bl	8004b20 <puts>
 80006f2:	e079      	b.n	80007e8 <Test_0xB0_Device+0x220>
      }
    }
    else
    {
      printf("  Read from 0xB0: FAILED\n");
 80006f4:	4884      	ldr	r0, [pc, #528]	@ (8000908 <Test_0xB0_Device+0x340>)
 80006f6:	f004 fa13 	bl	8004b20 <puts>
      printf("** 0xB0 accepts write but not read - unusual device **\n");
 80006fa:	4884      	ldr	r0, [pc, #528]	@ (800090c <Test_0xB0_Device+0x344>)
 80006fc:	f004 fa10 	bl	8004b20 <puts>
 8000700:	e072      	b.n	80007e8 <Test_0xB0_Device+0x220>
    }
  }
  else
  {
    printf("  Write to 0xB0: FAILED\n");
 8000702:	4883      	ldr	r0, [pc, #524]	@ (8000910 <Test_0xB0_Device+0x348>)
 8000704:	f004 fa0c 	bl	8004b20 <puts>

    // 테스트 3: 다른 프로토콜 시도
    printf("\nTest 3: Trying different access methods...\n");
 8000708:	4882      	ldr	r0, [pc, #520]	@ (8000914 <Test_0xB0_Device+0x34c>)
 800070a:	f004 fa09 	bl	8004b20 <puts>

    // 8비트 주소로 시도
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x00,
 800070e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	2308      	movs	r3, #8
 8000716:	9301      	str	r3, [sp, #4]
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2301      	movs	r3, #1
 8000720:	2200      	movs	r2, #0
 8000722:	21b0      	movs	r1, #176	@ 0xb0
 8000724:	486c      	ldr	r0, [pc, #432]	@ (80008d8 <Test_0xB0_Device+0x310>)
 8000726:	f001 ffef 	bl	8002708 <HAL_I2C_Mem_Read>
 800072a:	4603      	mov	r3, r0
 800072c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                              I2C_MEMADD_SIZE_8BIT, read_data, 8, 1000);
    if(status == HAL_OK)
 8000730:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000734:	2b00      	cmp	r3, #0
 8000736:	d11e      	bne.n	8000776 <Test_0xB0_Device+0x1ae>
    {
      printf("  8-bit address read: SUCCESS\n");
 8000738:	4877      	ldr	r0, [pc, #476]	@ (8000918 <Test_0xB0_Device+0x350>)
 800073a:	f004 f9f1 	bl	8004b20 <puts>
      printf("  Data: ");
 800073e:	4877      	ldr	r0, [pc, #476]	@ (800091c <Test_0xB0_Device+0x354>)
 8000740:	f004 f97e 	bl	8004a40 <iprintf>
      for(int i=0; i<8; i++) printf("%02X ", read_data[i]);
 8000744:	2300      	movs	r3, #0
 8000746:	637b      	str	r3, [r7, #52]	@ 0x34
 8000748:	e00b      	b.n	8000762 <Test_0xB0_Device+0x19a>
 800074a:	f107 020c 	add.w	r2, r7, #12
 800074e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	4872      	ldr	r0, [pc, #456]	@ (8000920 <Test_0xB0_Device+0x358>)
 8000758:	f004 f972 	bl	8004a40 <iprintf>
 800075c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800075e:	3301      	adds	r3, #1
 8000760:	637b      	str	r3, [r7, #52]	@ 0x34
 8000762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000764:	2b07      	cmp	r3, #7
 8000766:	ddf0      	ble.n	800074a <Test_0xB0_Device+0x182>
      printf("\n");
 8000768:	200a      	movs	r0, #10
 800076a:	f004 f97b 	bl	8004a64 <putchar>
      printf("** 0xB0 is likely an RTC, sensor, or other I2C device **\n");
 800076e:	486d      	ldr	r0, [pc, #436]	@ (8000924 <Test_0xB0_Device+0x35c>)
 8000770:	f004 f9d6 	bl	8004b20 <puts>
 8000774:	e038      	b.n	80007e8 <Test_0xB0_Device+0x220>
    }
    else
    {
      // 단순 수신 시도
      status = HAL_I2C_Master_Receive(&hi2c1, 0xB0, read_data, 8, 1000);
 8000776:	f107 020c 	add.w	r2, r7, #12
 800077a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2308      	movs	r3, #8
 8000782:	21b0      	movs	r1, #176	@ 0xb0
 8000784:	4854      	ldr	r0, [pc, #336]	@ (80008d8 <Test_0xB0_Device+0x310>)
 8000786:	f001 fc59 	bl	800203c <HAL_I2C_Master_Receive>
 800078a:	4603      	mov	r3, r0
 800078c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
      if(status == HAL_OK)
 8000790:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000794:	2b00      	cmp	r3, #0
 8000796:	d11e      	bne.n	80007d6 <Test_0xB0_Device+0x20e>
      {
        printf("  Simple receive: SUCCESS\n");
 8000798:	4863      	ldr	r0, [pc, #396]	@ (8000928 <Test_0xB0_Device+0x360>)
 800079a:	f004 f9c1 	bl	8004b20 <puts>
        printf("  Data: ");
 800079e:	485f      	ldr	r0, [pc, #380]	@ (800091c <Test_0xB0_Device+0x354>)
 80007a0:	f004 f94e 	bl	8004a40 <iprintf>
        for(int i=0; i<8; i++) printf("%02X ", read_data[i]);
 80007a4:	2300      	movs	r3, #0
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80007a8:	e00b      	b.n	80007c2 <Test_0xB0_Device+0x1fa>
 80007aa:	f107 020c 	add.w	r2, r7, #12
 80007ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007b0:	4413      	add	r3, r2
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	485a      	ldr	r0, [pc, #360]	@ (8000920 <Test_0xB0_Device+0x358>)
 80007b8:	f004 f942 	bl	8004a40 <iprintf>
 80007bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007be:	3301      	adds	r3, #1
 80007c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80007c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007c4:	2b07      	cmp	r3, #7
 80007c6:	ddf0      	ble.n	80007aa <Test_0xB0_Device+0x1e2>
        printf("\n");
 80007c8:	200a      	movs	r0, #10
 80007ca:	f004 f94b 	bl	8004a64 <putchar>
        printf("** 0xB0 responds but protocol unclear **\n");
 80007ce:	4857      	ldr	r0, [pc, #348]	@ (800092c <Test_0xB0_Device+0x364>)
 80007d0:	f004 f9a6 	bl	8004b20 <puts>
 80007d4:	e008      	b.n	80007e8 <Test_0xB0_Device+0x220>
      }
      else
      {
        printf("  All access methods: FAILED\n");
 80007d6:	4856      	ldr	r0, [pc, #344]	@ (8000930 <Test_0xB0_Device+0x368>)
 80007d8:	f004 f9a2 	bl	8004b20 <puts>
        printf("** 0xB0 detected but not accessible **\n");
 80007dc:	4855      	ldr	r0, [pc, #340]	@ (8000934 <Test_0xB0_Device+0x36c>)
 80007de:	f004 f99f 	bl	8004b20 <puts>
        printf("** Possible ghost address or bus issue **\n");
 80007e2:	4855      	ldr	r0, [pc, #340]	@ (8000938 <Test_0xB0_Device+0x370>)
 80007e4:	f004 f99c 	bl	8004b20 <puts>
      }
    }
  }

  // 크로스 체크: 0xA0와 0xB0가 같은 메모리를 공유하는지 확인
  printf("\nTest 4: Cross-check with 0xA0...\n");
 80007e8:	4854      	ldr	r0, [pc, #336]	@ (800093c <Test_0xB0_Device+0x374>)
 80007ea:	f004 f999 	bl	8004b20 <puts>
  memset(read_data, 0, sizeof(read_data));
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2214      	movs	r2, #20
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 fa82 	bl	8004d00 <memset>

  // 0xA0에 특별한 데이터 쓰기
  uint8_t marker[] = "CrossCheck";
 80007fc:	4a50      	ldr	r2, [pc, #320]	@ (8000940 <Test_0xB0_Device+0x378>)
 80007fe:	463b      	mov	r3, r7
 8000800:	ca07      	ldmia	r2, {r0, r1, r2}
 8000802:	c303      	stmia	r3!, {r0, r1}
 8000804:	801a      	strh	r2, [r3, #0]
 8000806:	3302      	adds	r3, #2
 8000808:	0c12      	lsrs	r2, r2, #16
 800080a:	701a      	strb	r2, [r3, #0]
  if(EEPROM_Write(0x0200, marker, strlen((char*)marker)) == HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fc9c 	bl	800014c <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000820:	f7ff fd26 	bl	8000270 <EEPROM_Write>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	f040 80a4 	bne.w	8000974 <Test_0xB0_Device+0x3ac>
  {
    HAL_Delay(10);
 800082c:	200a      	movs	r0, #10
 800082e:	f000 ffd1 	bl	80017d4 <HAL_Delay>

    // 0xB0의 같은 주소에서 읽기 시도
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x0200,
                              I2C_MEMADD_SIZE_16BIT, read_data,
                              strlen((char*)marker), HAL_MAX_DELAY);
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fc89 	bl	800014c <strlen>
 800083a:	4603      	mov	r3, r0
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x0200,
 800083c:	b29b      	uxth	r3, r3
 800083e:	f04f 32ff 	mov.w	r2, #4294967295
 8000842:	9202      	str	r2, [sp, #8]
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	2310      	movs	r3, #16
 800084e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000852:	21b0      	movs	r1, #176	@ 0xb0
 8000854:	4820      	ldr	r0, [pc, #128]	@ (80008d8 <Test_0xB0_Device+0x310>)
 8000856:	f001 ff57 	bl	8002708 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if(status == HAL_OK)
 8000860:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000864:	2b00      	cmp	r3, #0
 8000866:	d17f      	bne.n	8000968 <Test_0xB0_Device+0x3a0>
    {
      printf("  0xB0 read at 0x0200: SUCCESS\n");
 8000868:	4836      	ldr	r0, [pc, #216]	@ (8000944 <Test_0xB0_Device+0x37c>)
 800086a:	f004 f959 	bl	8004b20 <puts>
      printf("  0xA0 wrote: \"%s\"\n", marker);
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	4835      	ldr	r0, [pc, #212]	@ (8000948 <Test_0xB0_Device+0x380>)
 8000874:	f004 f8e4 	bl	8004a40 <iprintf>
      printf("  0xB0 read:  \"%s\"\n", read_data);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4833      	ldr	r0, [pc, #204]	@ (800094c <Test_0xB0_Device+0x384>)
 8000880:	f004 f8de 	bl	8004a40 <iprintf>

      if(memcmp(marker, read_data, strlen((char*)marker)) == 0)
 8000884:	463b      	mov	r3, r7
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fc60 	bl	800014c <strlen>
 800088c:	4602      	mov	r2, r0
 800088e:	f107 010c 	add.w	r1, r7, #12
 8000892:	463b      	mov	r3, r7
 8000894:	4618      	mov	r0, r3
 8000896:	f004 fa23 	bl	8004ce0 <memcmp>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d109      	bne.n	80008b4 <Test_0xB0_Device+0x2ec>
      {
        printf("\n** 0xA0 and 0xB0 share SAME memory! **\n");
 80008a0:	482b      	ldr	r0, [pc, #172]	@ (8000950 <Test_0xB0_Device+0x388>)
 80008a2:	f004 f93d 	bl	8004b20 <puts>
        printf("** 0xB0 is an ALIAS of 0xA0 - same 32KB chip **\n");
 80008a6:	482b      	ldr	r0, [pc, #172]	@ (8000954 <Test_0xB0_Device+0x38c>)
 80008a8:	f004 f93a 	bl	8004b20 <puts>
        printf("** Your chip reports multiple addresses **\n");
 80008ac:	482a      	ldr	r0, [pc, #168]	@ (8000958 <Test_0xB0_Device+0x390>)
 80008ae:	f004 f937 	bl	8004b20 <puts>
 80008b2:	e05f      	b.n	8000974 <Test_0xB0_Device+0x3ac>
      }
      else
      {
        printf("\n** 0xA0 and 0xB0 have DIFFERENT data! **\n");
 80008b4:	4829      	ldr	r0, [pc, #164]	@ (800095c <Test_0xB0_Device+0x394>)
 80008b6:	f004 f933 	bl	8004b20 <puts>
        printf("** They are INDEPENDENT memory blocks **\n");
 80008ba:	4829      	ldr	r0, [pc, #164]	@ (8000960 <Test_0xB0_Device+0x398>)
 80008bc:	f004 f930 	bl	8004b20 <puts>
        printf("** Total 64KB confirmed! **\n");
 80008c0:	4828      	ldr	r0, [pc, #160]	@ (8000964 <Test_0xB0_Device+0x39c>)
 80008c2:	f004 f92d 	bl	8004b20 <puts>
 80008c6:	e055      	b.n	8000974 <Test_0xB0_Device+0x3ac>
 80008c8:	08005be8 	.word	0x08005be8
 80008cc:	08005c10 	.word	0x08005c10
 80008d0:	0800617c 	.word	0x0800617c
 80008d4:	08005c44 	.word	0x08005c44
 80008d8:	20000084 	.word	0x20000084
 80008dc:	08005c74 	.word	0x08005c74
 80008e0:	08005c90 	.word	0x08005c90
 80008e4:	08005cc0 	.word	0x08005cc0
 80008e8:	08005cdc 	.word	0x08005cdc
 80008ec:	08005cf0 	.word	0x08005cf0
 80008f0:	08005d04 	.word	0x08005d04
 80008f4:	08005d2c 	.word	0x08005d2c
 80008f8:	08005d60 	.word	0x08005d60
 80008fc:	08005d7c 	.word	0x08005d7c
 8000900:	08005d98 	.word	0x08005d98
 8000904:	08005db8 	.word	0x08005db8
 8000908:	08005de8 	.word	0x08005de8
 800090c:	08005e04 	.word	0x08005e04
 8000910:	08005e3c 	.word	0x08005e3c
 8000914:	08005e54 	.word	0x08005e54
 8000918:	08005e80 	.word	0x08005e80
 800091c:	08005ea0 	.word	0x08005ea0
 8000920:	08005eac 	.word	0x08005eac
 8000924:	08005eb4 	.word	0x08005eb4
 8000928:	08005ef0 	.word	0x08005ef0
 800092c:	08005f0c 	.word	0x08005f0c
 8000930:	08005f38 	.word	0x08005f38
 8000934:	08005f58 	.word	0x08005f58
 8000938:	08005f80 	.word	0x08005f80
 800093c:	08005fac 	.word	0x08005fac
 8000940:	08006188 	.word	0x08006188
 8000944:	08005fd0 	.word	0x08005fd0
 8000948:	08005ff0 	.word	0x08005ff0
 800094c:	08006004 	.word	0x08006004
 8000950:	08006018 	.word	0x08006018
 8000954:	08006040 	.word	0x08006040
 8000958:	08006070 	.word	0x08006070
 800095c:	0800609c 	.word	0x0800609c
 8000960:	080060c8 	.word	0x080060c8
 8000964:	080060f4 	.word	0x080060f4
      }
    }
    else
    {
      printf("  0xB0 read at 0x0200: FAILED\n");
 8000968:	4806      	ldr	r0, [pc, #24]	@ (8000984 <Test_0xB0_Device+0x3bc>)
 800096a:	f004 f8d9 	bl	8004b20 <puts>
      printf("** Cannot determine relationship **\n");
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <Test_0xB0_Device+0x3c0>)
 8000970:	f004 f8d6 	bl	8004b20 <puts>
    }
  }

  printf("====================================\n\n");
 8000974:	4805      	ldr	r0, [pc, #20]	@ (800098c <Test_0xB0_Device+0x3c4>)
 8000976:	f004 f8d3 	bl	8004b20 <puts>
}
 800097a:	bf00      	nop
 800097c:	3738      	adds	r7, #56	@ 0x38
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	08006110 	.word	0x08006110
 8000988:	08006130 	.word	0x08006130
 800098c:	08006154 	.word	0x08006154

08000990 <LCD_WriteCommand>:


void LCD_WriteCommand(uint8_t cmd) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <LCD_WriteCommand+0x44>)
 80009a2:	f001 f9cd 	bl	8001d40 <HAL_GPIO_WritePin>
    LCD_DC_LOW();
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	@ 0x40
 80009aa:	480b      	ldr	r0, [pc, #44]	@ (80009d8 <LCD_WriteCommand+0x48>)
 80009ac:	f001 f9c8 	bl	8001d40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80009b0:	1df9      	adds	r1, r7, #7
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	2201      	movs	r2, #1
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <LCD_WriteCommand+0x4c>)
 80009ba:	f003 fb5d 	bl	8004078 <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 80009be:	2201      	movs	r2, #1
 80009c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009c4:	4803      	ldr	r0, [pc, #12]	@ (80009d4 <LCD_WriteCommand+0x44>)
 80009c6:	f001 f9bb 	bl	8001d40 <HAL_GPIO_WritePin>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40011000 	.word	0x40011000
 80009d8:	40010800 	.word	0x40010800
 80009dc:	200000d8 	.word	0x200000d8

080009e0 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <LCD_WriteData+0x44>)
 80009f2:	f001 f9a5 	bl	8001d40 <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 80009f6:	2201      	movs	r2, #1
 80009f8:	2140      	movs	r1, #64	@ 0x40
 80009fa:	480b      	ldr	r0, [pc, #44]	@ (8000a28 <LCD_WriteData+0x48>)
 80009fc:	f001 f9a0 	bl	8001d40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8000a00:	1df9      	adds	r1, r7, #7
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	2201      	movs	r2, #1
 8000a08:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <LCD_WriteData+0x4c>)
 8000a0a:	f003 fb35 	bl	8004078 <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a14:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <LCD_WriteData+0x44>)
 8000a16:	f001 f993 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40011000 	.word	0x40011000
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	200000d8 	.word	0x200000d8

08000a30 <LCD_WriteData16>:

void LCD_WriteData16(uint16_t data) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = (data >> 8) & 0xFF;
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	b29b      	uxth	r3, r3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	737b      	strb	r3, [r7, #13]

    LCD_CS_LOW();
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <LCD_WriteData16+0x54>)
 8000a52:	f001 f975 	bl	8001d40 <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 8000a56:	2201      	movs	r2, #1
 8000a58:	2140      	movs	r1, #64	@ 0x40
 8000a5a:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <LCD_WriteData16+0x58>)
 8000a5c:	f001 f970 	bl	8001d40 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 8000a60:	f107 010c 	add.w	r1, r7, #12
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4808      	ldr	r0, [pc, #32]	@ (8000a8c <LCD_WriteData16+0x5c>)
 8000a6c:	f003 fb04 	bl	8004078 <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a76:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <LCD_WriteData16+0x54>)
 8000a78:	f001 f962 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40011000 	.word	0x40011000
 8000a88:	40010800 	.word	0x40010800
 8000a8c:	200000d8 	.word	0x200000d8

08000a90 <LCD_Init>:

void LCD_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    // Hardware reset
    LCD_RES_LOW();
 8000a94:	2200      	movs	r2, #0
 8000a96:	2102      	movs	r1, #2
 8000a98:	4890      	ldr	r0, [pc, #576]	@ (8000cdc <LCD_Init+0x24c>)
 8000a9a:	f001 f951 	bl	8001d40 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000a9e:	2064      	movs	r0, #100	@ 0x64
 8000aa0:	f000 fe98 	bl	80017d4 <HAL_Delay>
    LCD_RES_HIGH();
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2102      	movs	r1, #2
 8000aa8:	488c      	ldr	r0, [pc, #560]	@ (8000cdc <LCD_Init+0x24c>)
 8000aaa:	f001 f949 	bl	8001d40 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000aae:	2064      	movs	r0, #100	@ 0x64
 8000ab0:	f000 fe90 	bl	80017d4 <HAL_Delay>

    // Software reset
    LCD_WriteCommand(ST7735_SWRESET);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff ff6b 	bl	8000990 <LCD_WriteCommand>
    HAL_Delay(150);
 8000aba:	2096      	movs	r0, #150	@ 0x96
 8000abc:	f000 fe8a 	bl	80017d4 <HAL_Delay>

    // Out of sleep mode
    LCD_WriteCommand(ST7735_SLPOUT);
 8000ac0:	2011      	movs	r0, #17
 8000ac2:	f7ff ff65 	bl	8000990 <LCD_WriteCommand>
    HAL_Delay(500);
 8000ac6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aca:	f000 fe83 	bl	80017d4 <HAL_Delay>

    // Frame rate control - normal mode
    LCD_WriteCommand(ST7735_FRMCTR1);
 8000ace:	20b1      	movs	r0, #177	@ 0xb1
 8000ad0:	f7ff ff5e 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x01);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff ff83 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2C);
 8000ada:	202c      	movs	r0, #44	@ 0x2c
 8000adc:	f7ff ff80 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2D);
 8000ae0:	202d      	movs	r0, #45	@ 0x2d
 8000ae2:	f7ff ff7d 	bl	80009e0 <LCD_WriteData>

    // Frame rate control - idle mode
    LCD_WriteCommand(ST7735_FRMCTR2);
 8000ae6:	20b2      	movs	r0, #178	@ 0xb2
 8000ae8:	f7ff ff52 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x01);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f7ff ff77 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2C);
 8000af2:	202c      	movs	r0, #44	@ 0x2c
 8000af4:	f7ff ff74 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2D);
 8000af8:	202d      	movs	r0, #45	@ 0x2d
 8000afa:	f7ff ff71 	bl	80009e0 <LCD_WriteData>

    // Frame rate control - partial mode
    LCD_WriteCommand(ST7735_FRMCTR3);
 8000afe:	20b3      	movs	r0, #179	@ 0xb3
 8000b00:	f7ff ff46 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x01);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff ff6b 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2C);
 8000b0a:	202c      	movs	r0, #44	@ 0x2c
 8000b0c:	f7ff ff68 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2D);
 8000b10:	202d      	movs	r0, #45	@ 0x2d
 8000b12:	f7ff ff65 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x01);
 8000b16:	2001      	movs	r0, #1
 8000b18:	f7ff ff62 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2C);
 8000b1c:	202c      	movs	r0, #44	@ 0x2c
 8000b1e:	f7ff ff5f 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2D);
 8000b22:	202d      	movs	r0, #45	@ 0x2d
 8000b24:	f7ff ff5c 	bl	80009e0 <LCD_WriteData>

    // Display inversion control
    LCD_WriteCommand(ST7735_INVCTR);
 8000b28:	20b4      	movs	r0, #180	@ 0xb4
 8000b2a:	f7ff ff31 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x07);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f7ff ff56 	bl	80009e0 <LCD_WriteData>

    // Power control
    LCD_WriteCommand(ST7735_PWCTR1);
 8000b34:	20c0      	movs	r0, #192	@ 0xc0
 8000b36:	f7ff ff2b 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0xA2);
 8000b3a:	20a2      	movs	r0, #162	@ 0xa2
 8000b3c:	f7ff ff50 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x02);
 8000b40:	2002      	movs	r0, #2
 8000b42:	f7ff ff4d 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x84);
 8000b46:	2084      	movs	r0, #132	@ 0x84
 8000b48:	f7ff ff4a 	bl	80009e0 <LCD_WriteData>

    LCD_WriteCommand(ST7735_PWCTR2);
 8000b4c:	20c1      	movs	r0, #193	@ 0xc1
 8000b4e:	f7ff ff1f 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0xC5);
 8000b52:	20c5      	movs	r0, #197	@ 0xc5
 8000b54:	f7ff ff44 	bl	80009e0 <LCD_WriteData>

    LCD_WriteCommand(ST7735_PWCTR3);
 8000b58:	20c2      	movs	r0, #194	@ 0xc2
 8000b5a:	f7ff ff19 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x0A);
 8000b5e:	200a      	movs	r0, #10
 8000b60:	f7ff ff3e 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff ff3b 	bl	80009e0 <LCD_WriteData>

    LCD_WriteCommand(ST7735_PWCTR4);
 8000b6a:	20c3      	movs	r0, #195	@ 0xc3
 8000b6c:	f7ff ff10 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x8A);
 8000b70:	208a      	movs	r0, #138	@ 0x8a
 8000b72:	f7ff ff35 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2A);
 8000b76:	202a      	movs	r0, #42	@ 0x2a
 8000b78:	f7ff ff32 	bl	80009e0 <LCD_WriteData>

    LCD_WriteCommand(ST7735_PWCTR5);
 8000b7c:	20c4      	movs	r0, #196	@ 0xc4
 8000b7e:	f7ff ff07 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x8A);
 8000b82:	208a      	movs	r0, #138	@ 0x8a
 8000b84:	f7ff ff2c 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0xEE);
 8000b88:	20ee      	movs	r0, #238	@ 0xee
 8000b8a:	f7ff ff29 	bl	80009e0 <LCD_WriteData>

    // VCOM control
    LCD_WriteCommand(ST7735_VMCTR1);
 8000b8e:	20c5      	movs	r0, #197	@ 0xc5
 8000b90:	f7ff fefe 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x0E);
 8000b94:	200e      	movs	r0, #14
 8000b96:	f7ff ff23 	bl	80009e0 <LCD_WriteData>

    // Display inversion off
    LCD_WriteCommand(ST7735_INVOFF);
 8000b9a:	2020      	movs	r0, #32
 8000b9c:	f7ff fef8 	bl	8000990 <LCD_WriteCommand>

    // Memory access control (rotation)
    LCD_WriteCommand(ST7735_MADCTL);
 8000ba0:	2036      	movs	r0, #54	@ 0x36
 8000ba2:	f7ff fef5 	bl	8000990 <LCD_WriteCommand>
    // 1. 기본 90도 회전 (추천)
    //LCD_WriteData(0x20); // MY=0, MX=0, MV=1
    // 2. 현재 사용중
    //LCD_WriteData(0xE0); // MY=1, MX=1, MV=1
    // 3. 90도 + X축만 미러링
    LCD_WriteData(0x60); // MY=0, MX=1, MV=1
 8000ba6:	2060      	movs	r0, #96	@ 0x60
 8000ba8:	f7ff ff1a 	bl	80009e0 <LCD_WriteData>
    // 4. 90도 + Y축만 미러링
    //LCD_WriteData(0xA0); // MY=1, MX=0, MV=1

    // Color mode: 16-bit color
    LCD_WriteCommand(ST7735_COLMOD);
 8000bac:	203a      	movs	r0, #58	@ 0x3a
 8000bae:	f7ff feef 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x05);
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f7ff ff14 	bl	80009e0 <LCD_WriteData>

    // Column address set
    LCD_WriteCommand(ST7735_CASET);
 8000bb8:	202a      	movs	r0, #42	@ 0x2a
 8000bba:	f7ff fee9 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ff0e 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff ff0b 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ff08 	bl	80009e0 <LCD_WriteData>
    //LCD_WriteData(0x4F); // 79
    LCD_WriteData(0x9F); // 159
 8000bd0:	209f      	movs	r0, #159	@ 0x9f
 8000bd2:	f7ff ff05 	bl	80009e0 <LCD_WriteData>


    // Row address set
    LCD_WriteCommand(ST7735_RASET);
 8000bd6:	202b      	movs	r0, #43	@ 0x2b
 8000bd8:	f7ff feda 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff feff 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff fefc 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff fef9 	bl	80009e0 <LCD_WriteData>
    //LCD_WriteData(0x9F); // 159
    // Row address set (80픽셀)
	LCD_WriteData(0x4F); // 79
 8000bee:	204f      	movs	r0, #79	@ 0x4f
 8000bf0:	f7ff fef6 	bl	80009e0 <LCD_WriteData>

    // Gamma correction
    LCD_WriteCommand(ST7735_GMCTRP1);
 8000bf4:	20e0      	movs	r0, #224	@ 0xe0
 8000bf6:	f7ff fecb 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x0f);
 8000bfa:	200f      	movs	r0, #15
 8000bfc:	f7ff fef0 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x1a);
 8000c00:	201a      	movs	r0, #26
 8000c02:	f7ff feed 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x0f);
 8000c06:	200f      	movs	r0, #15
 8000c08:	f7ff feea 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x18);
 8000c0c:	2018      	movs	r0, #24
 8000c0e:	f7ff fee7 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2f);
 8000c12:	202f      	movs	r0, #47	@ 0x2f
 8000c14:	f7ff fee4 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x28);
 8000c18:	2028      	movs	r0, #40	@ 0x28
 8000c1a:	f7ff fee1 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x20);
 8000c1e:	2020      	movs	r0, #32
 8000c20:	f7ff fede 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x22);
 8000c24:	2022      	movs	r0, #34	@ 0x22
 8000c26:	f7ff fedb 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x1f);
 8000c2a:	201f      	movs	r0, #31
 8000c2c:	f7ff fed8 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x1b);
 8000c30:	201b      	movs	r0, #27
 8000c32:	f7ff fed5 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x23);
 8000c36:	2023      	movs	r0, #35	@ 0x23
 8000c38:	f7ff fed2 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x37);
 8000c3c:	2037      	movs	r0, #55	@ 0x37
 8000c3e:	f7ff fecf 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fecc 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x07);
 8000c48:	2007      	movs	r0, #7
 8000c4a:	f7ff fec9 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x02);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f7ff fec6 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x10);
 8000c54:	2010      	movs	r0, #16
 8000c56:	f7ff fec3 	bl	80009e0 <LCD_WriteData>

    LCD_WriteCommand(ST7735_GMCTRN1);
 8000c5a:	20e1      	movs	r0, #225	@ 0xe1
 8000c5c:	f7ff fe98 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x0f);
 8000c60:	200f      	movs	r0, #15
 8000c62:	f7ff febd 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x1b);
 8000c66:	201b      	movs	r0, #27
 8000c68:	f7ff feba 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x0f);
 8000c6c:	200f      	movs	r0, #15
 8000c6e:	f7ff feb7 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x17);
 8000c72:	2017      	movs	r0, #23
 8000c74:	f7ff feb4 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x33);
 8000c78:	2033      	movs	r0, #51	@ 0x33
 8000c7a:	f7ff feb1 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2c);
 8000c7e:	202c      	movs	r0, #44	@ 0x2c
 8000c80:	f7ff feae 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x29);
 8000c84:	2029      	movs	r0, #41	@ 0x29
 8000c86:	f7ff feab 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x2e);
 8000c8a:	202e      	movs	r0, #46	@ 0x2e
 8000c8c:	f7ff fea8 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x30);
 8000c90:	2030      	movs	r0, #48	@ 0x30
 8000c92:	f7ff fea5 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x30);
 8000c96:	2030      	movs	r0, #48	@ 0x30
 8000c98:	f7ff fea2 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x39);
 8000c9c:	2039      	movs	r0, #57	@ 0x39
 8000c9e:	f7ff fe9f 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x3f);
 8000ca2:	203f      	movs	r0, #63	@ 0x3f
 8000ca4:	f7ff fe9c 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fe99 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x07);
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f7ff fe96 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x03);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f7ff fe93 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x10);
 8000cba:	2010      	movs	r0, #16
 8000cbc:	f7ff fe90 	bl	80009e0 <LCD_WriteData>

    // Normal display on
    LCD_WriteCommand(ST7735_NORON);
 8000cc0:	2013      	movs	r0, #19
 8000cc2:	f7ff fe65 	bl	8000990 <LCD_WriteCommand>
    HAL_Delay(10);
 8000cc6:	200a      	movs	r0, #10
 8000cc8:	f000 fd84 	bl	80017d4 <HAL_Delay>

    // Main screen turn on
    LCD_WriteCommand(ST7735_DISPON);
 8000ccc:	2029      	movs	r0, #41	@ 0x29
 8000cce:	f7ff fe5f 	bl	8000990 <LCD_WriteCommand>
    HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	@ 0x64
 8000cd4:	f000 fd7e 	bl	80017d4 <HAL_Delay>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010800 	.word	0x40010800

08000ce0 <LCD_SetWindow>:

void LCD_SetWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	4608      	mov	r0, r1
 8000cea:	4611      	mov	r1, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	4623      	mov	r3, r4
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71bb      	strb	r3, [r7, #6]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	717b      	strb	r3, [r7, #5]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	713b      	strb	r3, [r7, #4]
    // 0.96" ST7735S LCD 오프셋 적용
    uint8_t x_offset = 0;  // X축 오프셋
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
    uint8_t y_offset = 0;   // Y축 오프셋
 8000d02:	2300      	movs	r3, #0
 8000d04:	73bb      	strb	r3, [r7, #14]

    // Column address set (X축)
    LCD_WriteCommand(ST7735_CASET);
 8000d06:	202a      	movs	r0, #42	@ 0x2a
 8000d08:	f7ff fe42 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fe67 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(x0 + x_offset);
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	4413      	add	r3, r2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fe60 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fe5d 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(x1 + x_offset);
 8000d26:	797a      	ldrb	r2, [r7, #5]
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fe56 	bl	80009e0 <LCD_WriteData>

    // Row address set (Y축)
    LCD_WriteCommand(ST7735_RASET);
 8000d34:	202b      	movs	r0, #43	@ 0x2b
 8000d36:	f7ff fe2b 	bl	8000990 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fe50 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(y0 + y_offset);
 8000d40:	79ba      	ldrb	r2, [r7, #6]
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
 8000d44:	4413      	add	r3, r2
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fe49 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f7ff fe46 	bl	80009e0 <LCD_WriteData>
    LCD_WriteData(y1 + y_offset);
 8000d54:	793a      	ldrb	r2, [r7, #4]
 8000d56:	7bbb      	ldrb	r3, [r7, #14]
 8000d58:	4413      	add	r3, r2
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fe3f 	bl	80009e0 <LCD_WriteData>

    // Write to RAM
    LCD_WriteCommand(ST7735_RAMWR);
 8000d62:	202c      	movs	r0, #44	@ 0x2c
 8000d64:	f7ff fe14 	bl	8000990 <LCD_WriteCommand>
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <LCD_DrawPixel>:

void LCD_DrawPixel(uint8_t x, uint8_t y, uint16_t color) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	71bb      	strb	r3, [r7, #6]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	80bb      	strh	r3, [r7, #4]
    if(x >= LCD_WIDTH || y >= LCD_HEIGHT) return;
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b9f      	cmp	r3, #159	@ 0x9f
 8000d86:	d80d      	bhi.n	8000da4 <LCD_DrawPixel+0x34>
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b77      	cmp	r3, #119	@ 0x77
 8000d8c:	d80a      	bhi.n	8000da4 <LCD_DrawPixel+0x34>

    LCD_SetWindow(x, y, x, y);
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	79fa      	ldrb	r2, [r7, #7]
 8000d92:	79b9      	ldrb	r1, [r7, #6]
 8000d94:	79f8      	ldrb	r0, [r7, #7]
 8000d96:	f7ff ffa3 	bl	8000ce0 <LCD_SetWindow>
    LCD_WriteData16(color);
 8000d9a:	88bb      	ldrh	r3, [r7, #4]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe47 	bl	8000a30 <LCD_WriteData16>
 8000da2:	e000      	b.n	8000da6 <LCD_DrawPixel+0x36>
    if(x >= LCD_WIDTH || y >= LCD_HEIGHT) return;
 8000da4:	bf00      	nop
}
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <LCD_Fill>:

void LCD_Fill(uint16_t color) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
    LCD_SetWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8000db6:	2377      	movs	r3, #119	@ 0x77
 8000db8:	229f      	movs	r2, #159	@ 0x9f
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff ff8f 	bl	8000ce0 <LCD_SetWindow>

    LCD_CS_LOW();
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc8:	4815      	ldr	r0, [pc, #84]	@ (8000e20 <LCD_Fill+0x74>)
 8000dca:	f000 ffb9 	bl	8001d40 <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2140      	movs	r1, #64	@ 0x40
 8000dd2:	4814      	ldr	r0, [pc, #80]	@ (8000e24 <LCD_Fill+0x78>)
 8000dd4:	f000 ffb4 	bl	8001d40 <HAL_GPIO_WritePin>

    for(uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8000dd8:	2300      	movs	r3, #0
 8000dda:	81fb      	strh	r3, [r7, #14]
 8000ddc:	e012      	b.n	8000e04 <LCD_Fill+0x58>
        uint8_t buffer[2];
        buffer[0] = (color >> 8) & 0xFF;
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	733b      	strb	r3, [r7, #12]
        buffer[1] = color & 0xFF;
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 8000dee:	f107 010c 	add.w	r1, r7, #12
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	2202      	movs	r2, #2
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <LCD_Fill+0x7c>)
 8000dfa:	f003 f93d 	bl	8004078 <HAL_SPI_Transmit>
    for(uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8000dfe:	89fb      	ldrh	r3, [r7, #14]
 8000e00:	3301      	adds	r3, #1
 8000e02:	81fb      	strh	r3, [r7, #14]
 8000e04:	89fb      	ldrh	r3, [r7, #14]
 8000e06:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8000e0a:	d3e8      	bcc.n	8000dde <LCD_Fill+0x32>
    }

    LCD_CS_HIGH();
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e12:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <LCD_Fill+0x74>)
 8000e14:	f000 ff94 	bl	8001d40 <HAL_GPIO_WritePin>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40011000 	.word	0x40011000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	200000d8 	.word	0x200000d8

08000e2c <LCD_DrawChar>:

void LCD_DrawChar(uint8_t x, uint8_t y, char ch, uint16_t color, uint16_t bg_color) {
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4604      	mov	r4, r0
 8000e34:	4608      	mov	r0, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4623      	mov	r3, r4
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71bb      	strb	r3, [r7, #6]
 8000e42:	460b      	mov	r3, r1
 8000e44:	717b      	strb	r3, [r7, #5]
 8000e46:	4613      	mov	r3, r2
 8000e48:	807b      	strh	r3, [r7, #2]
    if(ch < 32 || ch > 126) ch = 32; // Replace invalid chars with space
 8000e4a:	797b      	ldrb	r3, [r7, #5]
 8000e4c:	2b1f      	cmp	r3, #31
 8000e4e:	d902      	bls.n	8000e56 <LCD_DrawChar+0x2a>
 8000e50:	797b      	ldrb	r3, [r7, #5]
 8000e52:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e54:	d901      	bls.n	8000e5a <LCD_DrawChar+0x2e>
 8000e56:	2320      	movs	r3, #32
 8000e58:	717b      	strb	r3, [r7, #5]

    const uint8_t* font_char = font8x8[ch - 32];
 8000e5a:	797b      	ldrb	r3, [r7, #5]
 8000e5c:	3b20      	subs	r3, #32
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee0 <LCD_DrawChar+0xb4>)
 8000e62:	4413      	add	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]

    for(uint8_t i = 0; i < 8; i++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	75fb      	strb	r3, [r7, #23]
 8000e6a:	e031      	b.n	8000ed0 <LCD_DrawChar+0xa4>
        uint8_t line = font_char[i];
 8000e6c:	7dfb      	ldrb	r3, [r7, #23]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	73fb      	strb	r3, [r7, #15]
        for(uint8_t j = 0; j < 8; j++) {
 8000e76:	2300      	movs	r3, #0
 8000e78:	75bb      	strb	r3, [r7, #22]
 8000e7a:	e023      	b.n	8000ec4 <LCD_DrawChar+0x98>
            //if(line & (0x80 >> j)) {
        	if(line & (0x01 << j)) { // LSB부터 읽기
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	7dbb      	ldrb	r3, [r7, #22]
 8000e80:	fa42 f303 	asr.w	r3, r2, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00c      	beq.n	8000ea6 <LCD_DrawChar+0x7a>
                LCD_DrawPixel(x + j, y + i, color);
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	7dbb      	ldrb	r3, [r7, #22]
 8000e90:	4413      	add	r3, r2
 8000e92:	b2d8      	uxtb	r0, r3
 8000e94:	79ba      	ldrb	r2, [r7, #6]
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff ff66 	bl	8000d70 <LCD_DrawPixel>
 8000ea4:	e00b      	b.n	8000ebe <LCD_DrawChar+0x92>
            } else {
                LCD_DrawPixel(x + j, y + i, bg_color);
 8000ea6:	79fa      	ldrb	r2, [r7, #7]
 8000ea8:	7dbb      	ldrb	r3, [r7, #22]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b2d8      	uxtb	r0, r3
 8000eae:	79ba      	ldrb	r2, [r7, #6]
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff ff59 	bl	8000d70 <LCD_DrawPixel>
        for(uint8_t j = 0; j < 8; j++) {
 8000ebe:	7dbb      	ldrb	r3, [r7, #22]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	75bb      	strb	r3, [r7, #22]
 8000ec4:	7dbb      	ldrb	r3, [r7, #22]
 8000ec6:	2b07      	cmp	r3, #7
 8000ec8:	d9d8      	bls.n	8000e7c <LCD_DrawChar+0x50>
    for(uint8_t i = 0; i < 8; i++) {
 8000eca:	7dfb      	ldrb	r3, [r7, #23]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	75fb      	strb	r3, [r7, #23]
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	2b07      	cmp	r3, #7
 8000ed4:	d9ca      	bls.n	8000e6c <LCD_DrawChar+0x40>
            }
        }
    }
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}
 8000ee0:	080062b8 	.word	0x080062b8

08000ee4 <LCD_DrawString>:

void LCD_DrawString(uint8_t x, uint8_t y, const char* str, uint16_t color, uint16_t bg_color) {
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	603a      	str	r2, [r7, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	80bb      	strh	r3, [r7, #4]
    uint8_t orig_x = x;
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	73fb      	strb	r3, [r7, #15]

    while(*str) {
 8000efe:	e02b      	b.n	8000f58 <LCD_DrawString+0x74>
        if(*str == '\n') {
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b0a      	cmp	r3, #10
 8000f06:	d105      	bne.n	8000f14 <LCD_DrawString+0x30>
            y += 8;
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	3308      	adds	r3, #8
 8000f0c:	71bb      	strb	r3, [r7, #6]
            x = orig_x;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	e01e      	b.n	8000f52 <LCD_DrawString+0x6e>
        } else if(*str == '\r') {
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b0d      	cmp	r3, #13
 8000f1a:	d102      	bne.n	8000f22 <LCD_DrawString+0x3e>
            x = orig_x;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	e017      	b.n	8000f52 <LCD_DrawString+0x6e>
        } else {
            if(x + 8 > LCD_WIDTH) {
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b98      	cmp	r3, #152	@ 0x98
 8000f26:	d904      	bls.n	8000f32 <LCD_DrawString+0x4e>
                x = orig_x;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	71fb      	strb	r3, [r7, #7]
                y += 8;
 8000f2c:	79bb      	ldrb	r3, [r7, #6]
 8000f2e:	3308      	adds	r3, #8
 8000f30:	71bb      	strb	r3, [r7, #6]
            }
            if(y + 8 > LCD_HEIGHT) {
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	2b70      	cmp	r3, #112	@ 0x70
 8000f36:	d814      	bhi.n	8000f62 <LCD_DrawString+0x7e>
                break;
            }

            LCD_DrawChar(x, y, *str, color, bg_color);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	88bc      	ldrh	r4, [r7, #4]
 8000f3e:	79b9      	ldrb	r1, [r7, #6]
 8000f40:	79f8      	ldrb	r0, [r7, #7]
 8000f42:	8c3b      	ldrh	r3, [r7, #32]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4623      	mov	r3, r4
 8000f48:	f7ff ff70 	bl	8000e2c <LCD_DrawChar>
            x += 8;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	3308      	adds	r3, #8
 8000f50:	71fb      	strb	r3, [r7, #7]
        }
        str++;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	3301      	adds	r3, #1
 8000f56:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1cf      	bne.n	8000f00 <LCD_DrawString+0x1c>
    }
}
 8000f60:	e000      	b.n	8000f64 <LCD_DrawString+0x80>
                break;
 8000f62:	bf00      	nop
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f000 fbcd 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f76:	f000 f883 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f000 f953 	bl	8001224 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f7e:	f000 f927 	bl	80011d0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f82:	f000 f8ed 	bl	8001160 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000f86:	f000 f8bd 	bl	8001104 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\n");
 8000f8a:	4831      	ldr	r0, [pc, #196]	@ (8001050 <main+0xe4>)
 8000f8c:	f003 fdc8 	bl	8004b20 <puts>
  printf("========================================\n");
 8000f90:	4830      	ldr	r0, [pc, #192]	@ (8001054 <main+0xe8>)
 8000f92:	f003 fdc5 	bl	8004b20 <puts>
  printf("  STM32F103 I2C EEPROM K24C256 Test    \n");
 8000f96:	4830      	ldr	r0, [pc, #192]	@ (8001058 <main+0xec>)
 8000f98:	f003 fdc2 	bl	8004b20 <puts>
  printf("  System Clock: 64MHz                  \n");
 8000f9c:	482f      	ldr	r0, [pc, #188]	@ (800105c <main+0xf0>)
 8000f9e:	f003 fdbf 	bl	8004b20 <puts>
  printf("  I2C Speed: 100kHz                    \n");
 8000fa2:	482f      	ldr	r0, [pc, #188]	@ (8001060 <main+0xf4>)
 8000fa4:	f003 fdbc 	bl	8004b20 <puts>
  printf("========================================\n");
 8000fa8:	482a      	ldr	r0, [pc, #168]	@ (8001054 <main+0xe8>)
 8000faa:	f003 fdb9 	bl	8004b20 <puts>

  // I2C 주소 스캔
  I2C_Scan();
 8000fae:	f7ff f8f3 	bl	8000198 <I2C_Scan>

  // EEPROM 테스트
  EEPROM_Test();
 8000fb2:	f7ff f9d5 	bl	8000360 <EEPROM_Test>
  Test_0xB0_Device();
 8000fb6:	f7ff fb07 	bl	80005c8 <Test_0xB0_Device>

  printf("Test completed. Entering main loop...\n\n");
 8000fba:	482a      	ldr	r0, [pc, #168]	@ (8001064 <main+0xf8>)
 8000fbc:	f003 fdb0 	bl	8004b20 <puts>

  // Initialize LCD
  LCD_Init();
 8000fc0:	f7ff fd66 	bl	8000a90 <LCD_Init>

  // Clear screen with black background
  LCD_Fill(BLACK);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fef1 	bl	8000dac <LCD_Fill>

  LCD_DrawString(10, 30, "Hello World!", WHITE, BLACK);
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fd2:	4a25      	ldr	r2, [pc, #148]	@ (8001068 <main+0xfc>)
 8000fd4:	211e      	movs	r1, #30
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f7ff ff84 	bl	8000ee4 <LCD_DrawString>
  LCD_DrawString(10, 45, "STM32F103", GREEN, BLACK);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000fe4:	4a21      	ldr	r2, [pc, #132]	@ (800106c <main+0x100>)
 8000fe6:	212d      	movs	r1, #45	@ 0x2d
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f7ff ff7b 	bl	8000ee4 <LCD_DrawString>
  LCD_DrawString(10, 60, "ST7735S LCD", CYAN, BLACK);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <main+0x104>)
 8000ff8:	213c      	movs	r1, #60	@ 0x3c
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f7ff ff72 	bl	8000ee4 <LCD_DrawString>
  LCD_DrawString(10, 75, "160x80", YELLOW, BLACK);
 8001000:	2300      	movs	r3, #0
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001008:	4a1a      	ldr	r2, [pc, #104]	@ (8001074 <main+0x108>)
 800100a:	214b      	movs	r1, #75	@ 0x4b
 800100c:	200a      	movs	r0, #10
 800100e:	f7ff ff69 	bl	8000ee4 <LCD_DrawString>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t loop_count = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // 10초마다 상태 출력
	  	    if(loop_count % 1000 == 0)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <main+0x10c>)
 800101a:	fba3 1302 	umull	r1, r3, r3, r2
 800101e:	099b      	lsrs	r3, r3, #6
 8001020:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d108      	bne.n	8001040 <main+0xd4>
	  	    {
	  	      printf("System running... Loop count: %lu\n", loop_count/1000);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a11      	ldr	r2, [pc, #68]	@ (8001078 <main+0x10c>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	099b      	lsrs	r3, r3, #6
 8001038:	4619      	mov	r1, r3
 800103a:	4810      	ldr	r0, [pc, #64]	@ (800107c <main+0x110>)
 800103c:	f003 fd00 	bl	8004a40 <iprintf>

	  	      }

	  	    loop_count++;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
	  	    HAL_Delay(10);
 8001046:	200a      	movs	r0, #10
 8001048:	f000 fbc4 	bl	80017d4 <HAL_Delay>
	  	    if(loop_count % 1000 == 0)
 800104c:	e7e3      	b.n	8001016 <main+0xaa>
 800104e:	bf00      	nop
 8001050:	08006194 	.word	0x08006194
 8001054:	08006198 	.word	0x08006198
 8001058:	080061c4 	.word	0x080061c4
 800105c:	080061ec 	.word	0x080061ec
 8001060:	08006214 	.word	0x08006214
 8001064:	0800623c 	.word	0x0800623c
 8001068:	08006264 	.word	0x08006264
 800106c:	08006274 	.word	0x08006274
 8001070:	08006280 	.word	0x08006280
 8001074:	0800628c 	.word	0x0800628c
 8001078:	10624dd3 	.word	0x10624dd3
 800107c:	08006294 	.word	0x08006294

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b090      	sub	sp, #64	@ 0x40
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	2228      	movs	r2, #40	@ 0x28
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fe36 	bl	8004d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a6:	2301      	movs	r3, #1
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010aa:	2310      	movs	r3, #16
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80010b2:	2300      	movs	r3, #0
 80010b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80010b6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f002 fb45 	bl	8003750 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80010cc:	f000 f92e 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2102      	movs	r1, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fdb2 	bl	8003c54 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010f6:	f000 f919 	bl	800132c <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3740      	adds	r7, #64	@ 0x40
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <MX_I2C1_Init+0x50>)
 800110a:	4a13      	ldr	r2, [pc, #76]	@ (8001158 <MX_I2C1_Init+0x54>)
 800110c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001110:	4a12      	ldr	r2, [pc, #72]	@ (800115c <MX_I2C1_Init+0x58>)
 8001112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001122:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001134:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <MX_I2C1_Init+0x50>)
 8001142:	f000 fe37 	bl	8001db4 <HAL_I2C_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800114c:	f000 f8ee 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000084 	.word	0x20000084
 8001158:	40005400 	.word	0x40005400
 800115c:	000186a0 	.word	0x000186a0

08001160 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <MX_SPI1_Init+0x68>)
 8001166:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <MX_SPI1_Init+0x6c>)
 8001168:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <MX_SPI1_Init+0x68>)
 800116c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001170:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001172:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <MX_SPI1_Init+0x68>)
 8001174:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001178:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <MX_SPI1_Init+0x68>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <MX_SPI1_Init+0x68>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <MX_SPI1_Init+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <MX_SPI1_Init+0x68>)
 800118e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001192:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001194:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_SPI1_Init+0x68>)
 8001196:	2208      	movs	r2, #8
 8001198:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <MX_SPI1_Init+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_SPI1_Init+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <MX_SPI1_Init+0x68>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <MX_SPI1_Init+0x68>)
 80011ae:	220a      	movs	r2, #10
 80011b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <MX_SPI1_Init+0x68>)
 80011b4:	f002 fedc 	bl	8003f70 <HAL_SPI_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80011be:	f000 f8b5 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000d8 	.word	0x200000d8
 80011cc:	40013000 	.word	0x40013000

080011d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <MX_USART2_UART_Init+0x50>)
 80011d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f4:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011f6:	220c      	movs	r2, #12
 80011f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_USART2_UART_Init+0x4c>)
 8001208:	f003 f933 	bl	8004472 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001212:	f000 f88b 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000130 	.word	0x20000130
 8001220:	40004400 	.word	0x40004400

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	4b38      	ldr	r3, [pc, #224]	@ (800131c <MX_GPIO_Init+0xf8>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a37      	ldr	r2, [pc, #220]	@ (800131c <MX_GPIO_Init+0xf8>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b35      	ldr	r3, [pc, #212]	@ (800131c <MX_GPIO_Init+0xf8>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001250:	4b32      	ldr	r3, [pc, #200]	@ (800131c <MX_GPIO_Init+0xf8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a31      	ldr	r2, [pc, #196]	@ (800131c <MX_GPIO_Init+0xf8>)
 8001256:	f043 0320 	orr.w	r3, r3, #32
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b2f      	ldr	r3, [pc, #188]	@ (800131c <MX_GPIO_Init+0xf8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <MX_GPIO_Init+0xf8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a2b      	ldr	r2, [pc, #172]	@ (800131c <MX_GPIO_Init+0xf8>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b29      	ldr	r3, [pc, #164]	@ (800131c <MX_GPIO_Init+0xf8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001280:	4b26      	ldr	r3, [pc, #152]	@ (800131c <MX_GPIO_Init+0xf8>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a25      	ldr	r2, [pc, #148]	@ (800131c <MX_GPIO_Init+0xf8>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b23      	ldr	r3, [pc, #140]	@ (800131c <MX_GPIO_Init+0xf8>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RES_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2142      	movs	r1, #66	@ 0x42
 800129c:	4820      	ldr	r0, [pc, #128]	@ (8001320 <MX_GPIO_Init+0xfc>)
 800129e:	f000 fd4f 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a8:	481e      	ldr	r0, [pc, #120]	@ (8001324 <MX_GPIO_Init+0x100>)
 80012aa:	f000 fd49 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <MX_GPIO_Init+0x104>)
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4818      	ldr	r0, [pc, #96]	@ (8001324 <MX_GPIO_Init+0x100>)
 80012c4:	f000 fbb8 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RES_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin;
 80012c8:	2342      	movs	r3, #66	@ 0x42
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	4810      	ldr	r0, [pc, #64]	@ (8001320 <MX_GPIO_Init+0xfc>)
 80012e0:	f000 fbaa 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80012e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <MX_GPIO_Init+0x100>)
 80012fe:	f000 fb9b 	bl	8001a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2028      	movs	r0, #40	@ 0x28
 8001308:	f000 fb5f 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800130c:	2028      	movs	r0, #40	@ 0x28
 800130e:	f000 fb78 	bl	8001a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	40010800 	.word	0x40010800
 8001324:	40011000 	.word	0x40011000
 8001328:	10110000 	.word	0x10110000

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <Error_Handler+0x8>

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <HAL_MspInit+0x5c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6193      	str	r3, [r2, #24]
 800134a:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <HAL_MspInit+0x5c>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <HAL_MspInit+0x5c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <HAL_MspInit+0x5c>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_MspInit+0x60>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <HAL_MspInit+0x60>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000

0800139c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a15      	ldr	r2, [pc, #84]	@ (800140c <HAL_I2C_MspInit+0x70>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d123      	bne.n	8001404 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <HAL_I2C_MspInit+0x74>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a13      	ldr	r2, [pc, #76]	@ (8001410 <HAL_I2C_MspInit+0x74>)
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_I2C_MspInit+0x74>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013d4:	23c0      	movs	r3, #192	@ 0xc0
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d8:	2312      	movs	r3, #18
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	480b      	ldr	r0, [pc, #44]	@ (8001414 <HAL_I2C_MspInit+0x78>)
 80013e8:	f000 fb26 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_I2C_MspInit+0x74>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_I2C_MspInit+0x74>)
 80013f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013f6:	61d3      	str	r3, [r2, #28]
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_I2C_MspInit+0x74>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40005400 	.word	0x40005400
 8001410:	40021000 	.word	0x40021000
 8001414:	40010c00 	.word	0x40010c00

08001418 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <HAL_SPI_MspInit+0x70>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d123      	bne.n	8001480 <HAL_SPI_MspInit+0x68>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_SPI_MspInit+0x74>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a13      	ldr	r2, [pc, #76]	@ (800148c <HAL_SPI_MspInit+0x74>)
 800143e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_SPI_MspInit+0x74>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <HAL_SPI_MspInit+0x74>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a0d      	ldr	r2, [pc, #52]	@ (800148c <HAL_SPI_MspInit+0x74>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_SPI_MspInit+0x74>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|SPI_MISO_Pin;
 8001468:	23a0      	movs	r3, #160	@ 0xa0
 800146a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_SPI_MspInit+0x78>)
 800147c:	f000 fadc 	bl	8001a38 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40013000 	.word	0x40013000
 800148c:	40021000 	.word	0x40021000
 8001490:	40010800 	.word	0x40010800

08001494 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a15      	ldr	r2, [pc, #84]	@ (8001504 <HAL_UART_MspInit+0x70>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d123      	bne.n	80014fc <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <HAL_UART_MspInit+0x74>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <HAL_UART_MspInit+0x74>)
 80014ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014be:	61d3      	str	r3, [r2, #28]
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_UART_MspInit+0x74>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_UART_MspInit+0x74>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <HAL_UART_MspInit+0x74>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <HAL_UART_MspInit+0x74>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e4:	230c      	movs	r3, #12
 80014e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	4619      	mov	r1, r3
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <HAL_UART_MspInit+0x78>)
 80014f8:	f000 fa9e 	bl	8001a38 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40004400 	.word	0x40004400
 8001508:	40021000 	.word	0x40021000
 800150c:	40010800 	.word	0x40010800

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <NMI_Handler+0x4>

08001518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <UsageFault_Handler+0x4>

08001538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f91c 	bl	800179c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800156c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001570:	f000 fbfe 	bl	8001d70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e00a      	b.n	80015a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158a:	f3af 8000 	nop.w
 800158e:	4601      	mov	r1, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf0      	blt.n	800158a <_read+0x12>
  }

  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e009      	b.n	80015d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe fdc5 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf1      	blt.n	80015c4 <_write+0x12>
  }
  return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_close>:

int _close(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001610:	605a      	str	r2, [r3, #4]
  return 0;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <_isatty>:

int _isatty(int file)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f003 fb8e 	bl	8004d9c <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20005000 	.word	0x20005000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	2000017c 	.word	0x2000017c
 80016b4:	200002d0 	.word	0x200002d0

080016b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c4:	f7ff fff8 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c8:	480b      	ldr	r0, [pc, #44]	@ (80016f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016ca:	490c      	ldr	r1, [pc, #48]	@ (80016fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016e0:	4c09      	ldr	r4, [pc, #36]	@ (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ee:	f003 fb5b 	bl	8004da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016f2:	f7ff fc3b 	bl	8000f6c <main>
  bx lr
 80016f6:	4770      	bx	lr
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001700:	08006620 	.word	0x08006620
  ldr r2, =_sbss
 8001704:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001708:	200002d0 	.word	0x200002d0

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>
	...

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <HAL_Init+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a07      	ldr	r2, [pc, #28]	@ (8001738 <HAL_Init+0x28>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001720:	2003      	movs	r0, #3
 8001722:	f000 f947 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001726:	2000      	movs	r0, #0
 8001728:	f000 f808 	bl	800173c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800172c:	f7ff fe04 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000

0800173c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_InitTick+0x54>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_InitTick+0x58>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4619      	mov	r1, r3
 800174e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001752:	fbb3 f3f1 	udiv	r3, r3, r1
 8001756:	fbb2 f3f3 	udiv	r3, r2, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f95f 	bl	8001a1e <HAL_SYSTICK_Config>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e00e      	b.n	8001788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b0f      	cmp	r3, #15
 800176e:	d80a      	bhi.n	8001786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001770:	2200      	movs	r2, #0
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f000 f927 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800177c:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <HAL_InitTick+0x5c>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000000 	.word	0x20000000
 8001794:	20000008 	.word	0x20000008
 8001798:	20000004 	.word	0x20000004

0800179c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_IncTick+0x1c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_IncTick+0x20>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_IncTick+0x20>)
 80017ae:	6013      	str	r3, [r2, #0]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	20000008 	.word	0x20000008
 80017bc:	20000180 	.word	0x20000180

080017c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b02      	ldr	r3, [pc, #8]	@ (80017d0 <HAL_GetTick+0x10>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	20000180 	.word	0x20000180

080017d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff fff0 	bl	80017c0 <HAL_GetTick>
 80017e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d005      	beq.n	80017fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_Delay+0x44>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fa:	bf00      	nop
 80017fc:	f7ff ffe0 	bl	80017c0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8f7      	bhi.n	80017fc <HAL_Delay+0x28>
  {
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008

0800181c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001838:	4013      	ands	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184e:	4a04      	ldr	r2, [pc, #16]	@ (8001860 <__NVIC_SetPriorityGrouping+0x44>)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60d3      	str	r3, [r2, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <__NVIC_GetPriorityGrouping+0x18>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0a1b      	lsrs	r3, r3, #8
 800186e:	f003 0307 	and.w	r3, r3, #7
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b00      	cmp	r3, #0
 8001890:	db0b      	blt.n	80018aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	4906      	ldr	r1, [pc, #24]	@ (80018b4 <__NVIC_EnableIRQ+0x34>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	095b      	lsrs	r3, r3, #5
 80018a0:	2001      	movs	r0, #1
 80018a2:	fa00 f202 	lsl.w	r2, r0, r2
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	@ (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	@ (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff90 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff2d 	bl	800181c <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff42 	bl	8001864 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff90 	bl	800190c <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5f 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff35 	bl	8001880 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b08b      	sub	sp, #44	@ 0x2c
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4a:	e169      	b.n	8001d20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f040 8158 	bne.w	8001d1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4a9a      	ldr	r2, [pc, #616]	@ (8001cd8 <HAL_GPIO_Init+0x2a0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d05e      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001a74:	4a98      	ldr	r2, [pc, #608]	@ (8001cd8 <HAL_GPIO_Init+0x2a0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d875      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001a7a:	4a98      	ldr	r2, [pc, #608]	@ (8001cdc <HAL_GPIO_Init+0x2a4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d058      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001a80:	4a96      	ldr	r2, [pc, #600]	@ (8001cdc <HAL_GPIO_Init+0x2a4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d86f      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001a86:	4a96      	ldr	r2, [pc, #600]	@ (8001ce0 <HAL_GPIO_Init+0x2a8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d052      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001a8c:	4a94      	ldr	r2, [pc, #592]	@ (8001ce0 <HAL_GPIO_Init+0x2a8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d869      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001a92:	4a94      	ldr	r2, [pc, #592]	@ (8001ce4 <HAL_GPIO_Init+0x2ac>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d04c      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001a98:	4a92      	ldr	r2, [pc, #584]	@ (8001ce4 <HAL_GPIO_Init+0x2ac>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d863      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001a9e:	4a92      	ldr	r2, [pc, #584]	@ (8001ce8 <HAL_GPIO_Init+0x2b0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d046      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
 8001aa4:	4a90      	ldr	r2, [pc, #576]	@ (8001ce8 <HAL_GPIO_Init+0x2b0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d85d      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d82a      	bhi.n	8001b04 <HAL_GPIO_Init+0xcc>
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d859      	bhi.n	8001b66 <HAL_GPIO_Init+0x12e>
 8001ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab8 <HAL_GPIO_Init+0x80>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001b33 	.word	0x08001b33
 8001abc:	08001b0d 	.word	0x08001b0d
 8001ac0:	08001b1f 	.word	0x08001b1f
 8001ac4:	08001b61 	.word	0x08001b61
 8001ac8:	08001b67 	.word	0x08001b67
 8001acc:	08001b67 	.word	0x08001b67
 8001ad0:	08001b67 	.word	0x08001b67
 8001ad4:	08001b67 	.word	0x08001b67
 8001ad8:	08001b67 	.word	0x08001b67
 8001adc:	08001b67 	.word	0x08001b67
 8001ae0:	08001b67 	.word	0x08001b67
 8001ae4:	08001b67 	.word	0x08001b67
 8001ae8:	08001b67 	.word	0x08001b67
 8001aec:	08001b67 	.word	0x08001b67
 8001af0:	08001b67 	.word	0x08001b67
 8001af4:	08001b67 	.word	0x08001b67
 8001af8:	08001b67 	.word	0x08001b67
 8001afc:	08001b15 	.word	0x08001b15
 8001b00:	08001b29 	.word	0x08001b29
 8001b04:	4a79      	ldr	r2, [pc, #484]	@ (8001cec <HAL_GPIO_Init+0x2b4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b0a:	e02c      	b.n	8001b66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	623b      	str	r3, [r7, #32]
          break;
 8001b12:	e029      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e024      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	3308      	adds	r3, #8
 8001b24:	623b      	str	r3, [r7, #32]
          break;
 8001b26:	e01f      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	330c      	adds	r3, #12
 8001b2e:	623b      	str	r3, [r7, #32]
          break;
 8001b30:	e01a      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e013      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b48:	2308      	movs	r3, #8
 8001b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	611a      	str	r2, [r3, #16]
          break;
 8001b52:	e009      	b.n	8001b68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b54:	2308      	movs	r3, #8
 8001b56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	615a      	str	r2, [r3, #20]
          break;
 8001b5e:	e003      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e000      	b.n	8001b68 <HAL_GPIO_Init+0x130>
          break;
 8001b66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2bff      	cmp	r3, #255	@ 0xff
 8001b6c:	d801      	bhi.n	8001b72 <HAL_GPIO_Init+0x13a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	e001      	b.n	8001b76 <HAL_GPIO_Init+0x13e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3304      	adds	r3, #4
 8001b76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2bff      	cmp	r3, #255	@ 0xff
 8001b7c:	d802      	bhi.n	8001b84 <HAL_GPIO_Init+0x14c>
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	e002      	b.n	8001b8a <HAL_GPIO_Init+0x152>
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	3b08      	subs	r3, #8
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	210f      	movs	r1, #15
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	6a39      	ldr	r1, [r7, #32]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80b1 	beq.w	8001d1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf0 <HAL_GPIO_Init+0x2b8>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf0 <HAL_GPIO_Init+0x2b8>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf0 <HAL_GPIO_Init+0x2b8>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd0:	4a48      	ldr	r2, [pc, #288]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a40      	ldr	r2, [pc, #256]	@ (8001cf8 <HAL_GPIO_Init+0x2c0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d013      	beq.n	8001c24 <HAL_GPIO_Init+0x1ec>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8001cfc <HAL_GPIO_Init+0x2c4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d00d      	beq.n	8001c20 <HAL_GPIO_Init+0x1e8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3e      	ldr	r2, [pc, #248]	@ (8001d00 <HAL_GPIO_Init+0x2c8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d007      	beq.n	8001c1c <HAL_GPIO_Init+0x1e4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d04 <HAL_GPIO_Init+0x2cc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_GPIO_Init+0x1e0>
 8001c14:	2303      	movs	r3, #3
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e004      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c24:	2300      	movs	r3, #0
 8001c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c36:	492f      	ldr	r1, [pc, #188]	@ (8001cf4 <HAL_GPIO_Init+0x2bc>)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d006      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c50:	4b2d      	ldr	r3, [pc, #180]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	492c      	ldr	r1, [pc, #176]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4928      	ldr	r1, [pc, #160]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	4922      	ldr	r1, [pc, #136]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
 8001c84:	e006      	b.n	8001c94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	491e      	ldr	r1, [pc, #120]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4918      	ldr	r1, [pc, #96]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e006      	b.n	8001cbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	4914      	ldr	r1, [pc, #80]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d021      	beq.n	8001d0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	490e      	ldr	r1, [pc, #56]	@ (8001d08 <HAL_GPIO_Init+0x2d0>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e021      	b.n	8001d1a <HAL_GPIO_Init+0x2e2>
 8001cd6:	bf00      	nop
 8001cd8:	10320000 	.word	0x10320000
 8001cdc:	10310000 	.word	0x10310000
 8001ce0:	10220000 	.word	0x10220000
 8001ce4:	10210000 	.word	0x10210000
 8001ce8:	10120000 	.word	0x10120000
 8001cec:	10110000 	.word	0x10110000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000
 8001cf8:	40010800 	.word	0x40010800
 8001cfc:	40010c00 	.word	0x40010c00
 8001d00:	40011000 	.word	0x40011000
 8001d04:	40011400 	.word	0x40011400
 8001d08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_GPIO_Init+0x304>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	4909      	ldr	r1, [pc, #36]	@ (8001d3c <HAL_GPIO_Init+0x304>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f47f ae8e 	bne.w	8001a4c <HAL_GPIO_Init+0x14>
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	372c      	adds	r7, #44	@ 0x2c
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d5c:	e003      	b.n	8001d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	611a      	str	r2, [r3, #16]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f806 	bl	8001da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e12b      	b.n	800201e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fade 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	@ 0x24
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e18:	f002 f864 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8001e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4a81      	ldr	r2, [pc, #516]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d807      	bhi.n	8001e38 <HAL_I2C_Init+0x84>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4a80      	ldr	r2, [pc, #512]	@ (800202c <HAL_I2C_Init+0x278>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	bf94      	ite	ls
 8001e30:	2301      	movls	r3, #1
 8001e32:	2300      	movhi	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e006      	b.n	8001e46 <HAL_I2C_Init+0x92>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8002030 <HAL_I2C_Init+0x27c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	bf94      	ite	ls
 8001e40:	2301      	movls	r3, #1
 8001e42:	2300      	movhi	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0e7      	b.n	800201e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a78      	ldr	r2, [pc, #480]	@ (8002034 <HAL_I2C_Init+0x280>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d802      	bhi.n	8001e88 <HAL_I2C_Init+0xd4>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	3301      	adds	r3, #1
 8001e86:	e009      	b.n	8001e9c <HAL_I2C_Init+0xe8>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	4a69      	ldr	r2, [pc, #420]	@ (8002038 <HAL_I2C_Init+0x284>)
 8001e94:	fba2 2303 	umull	r2, r3, r2, r3
 8001e98:	099b      	lsrs	r3, r3, #6
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	430b      	orrs	r3, r1
 8001ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001eae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	495c      	ldr	r1, [pc, #368]	@ (8002028 <HAL_I2C_Init+0x274>)
 8001eb8:	428b      	cmp	r3, r1
 8001eba:	d819      	bhi.n	8001ef0 <HAL_I2C_Init+0x13c>
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1e59      	subs	r1, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eca:	1c59      	adds	r1, r3, #1
 8001ecc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ed0:	400b      	ands	r3, r1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_I2C_Init+0x138>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e59      	subs	r1, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eea:	e051      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e04f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d111      	bne.n	8001f1c <HAL_I2C_Init+0x168>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	bf0c      	ite	eq
 8001f14:	2301      	moveq	r3, #1
 8001f16:	2300      	movne	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	e012      	b.n	8001f42 <HAL_I2C_Init+0x18e>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	1e58      	subs	r0, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	0099      	lsls	r1, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Init+0x196>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e022      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <HAL_I2C_Init+0x1bc>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e58      	subs	r0, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	440b      	add	r3, r1
 8001f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f64:	3301      	adds	r3, #1
 8001f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f6e:	e00f      	b.n	8001f90 <HAL_I2C_Init+0x1dc>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	6809      	ldr	r1, [r1, #0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6911      	ldr	r1, [r2, #16]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68d2      	ldr	r2, [r2, #12]
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	000186a0 	.word	0x000186a0
 800202c:	001e847f 	.word	0x001e847f
 8002030:	003d08ff 	.word	0x003d08ff
 8002034:	431bde83 	.word	0x431bde83
 8002038:	10624dd3 	.word	0x10624dd3

0800203c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	@ 0x30
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	461a      	mov	r2, r3
 8002048:	460b      	mov	r3, r1
 800204a:	817b      	strh	r3, [r7, #10]
 800204c:	4613      	mov	r3, r2
 800204e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fbb4 	bl	80017c0 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 824b 	bne.w	80024fe <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2319      	movs	r3, #25
 800206e:	2201      	movs	r2, #1
 8002070:	497f      	ldr	r1, [pc, #508]	@ (8002270 <HAL_I2C_Master_Receive+0x234>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f001 f936 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800207e:	2302      	movs	r3, #2
 8002080:	e23e      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_I2C_Master_Receive+0x54>
 800208c:	2302      	movs	r3, #2
 800208e:	e237      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d007      	beq.n	80020b6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f042 0201 	orr.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2222      	movs	r2, #34	@ 0x22
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2210      	movs	r2, #16
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	893a      	ldrh	r2, [r7, #8]
 80020e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002274 <HAL_I2C_Master_Receive+0x238>)
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 fea4 	bl	8002e4c <I2C_MasterRequestRead>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1f8      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	2b00      	cmp	r3, #0
 8002114:	d113      	bne.n	800213e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e1cc      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002142:	2b01      	cmp	r3, #1
 8002144:	d11e      	bne.n	8002184 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002156:	b672      	cpsid	i
}
 8002158:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800217e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002180:	b662      	cpsie	i
}
 8002182:	e035      	b.n	80021f0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002188:	2b02      	cmp	r3, #2
 800218a:	d11e      	bne.n	80021ca <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800219a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
}
 800219e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c6:	b662      	cpsie	i
}
 80021c8:	e012      	b.n	80021f0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021f0:	e172      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	f200 811f 	bhi.w	800243a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b01      	cmp	r3, #1
 8002202:	d123      	bne.n	800224c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f001 fa15 	bl	8003638 <I2C_WaitOnRXNEFlagUntilTimeout>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e173      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	1c5a      	adds	r2, r3, #1
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002240:	b29b      	uxth	r3, r3
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800224a:	e145      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002250:	2b02      	cmp	r3, #2
 8002252:	d152      	bne.n	80022fa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	2200      	movs	r2, #0
 800225c:	4906      	ldr	r1, [pc, #24]	@ (8002278 <HAL_I2C_Master_Receive+0x23c>)
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f001 f840 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d008      	beq.n	800227c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e148      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
 800226e:	bf00      	nop
 8002270:	00100002 	.word	0x00100002
 8002274:	ffff0000 	.word	0xffff0000
 8002278:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022c2:	b662      	cpsie	i
}
 80022c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	3b01      	subs	r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022f8:	e0ee      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002300:	2200      	movs	r2, #0
 8002302:	4981      	ldr	r1, [pc, #516]	@ (8002508 <HAL_I2C_Master_Receive+0x4cc>)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 ffed 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0f5      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002322:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800235a:	4b6c      	ldr	r3, [pc, #432]	@ (800250c <HAL_I2C_Master_Receive+0x4d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	08db      	lsrs	r3, r3, #3
 8002360:	4a6b      	ldr	r2, [pc, #428]	@ (8002510 <HAL_I2C_Master_Receive+0x4d4>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0a1a      	lsrs	r2, r3, #8
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	00da      	lsls	r2, r3, #3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	3b01      	subs	r3, #1
 8002378:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d118      	bne.n	80023b2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	f043 0220 	orr.w	r2, r3, #32
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023a2:	b662      	cpsie	i
}
 80023a4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0a6      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d1d9      	bne.n	8002374 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002402:	b662      	cpsie	i
}
 8002404:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002438:	e04e      	b.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f001 f8fa 	bl	8003638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e058      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	1c5a      	adds	r2, r3, #1
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b04      	cmp	r3, #4
 800248c:	d124      	bne.n	80024d8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f ae88 	bne.w	80021f2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3728      	adds	r7, #40	@ 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	00010004 	.word	0x00010004
 800250c:	20000000 	.word	0x20000000
 8002510:	14f8b589 	.word	0x14f8b589

08002514 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4603      	mov	r3, r0
 8002524:	817b      	strh	r3, [r7, #10]
 8002526:	460b      	mov	r3, r1
 8002528:	813b      	strh	r3, [r7, #8]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800252e:	f7ff f947 	bl	80017c0 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b20      	cmp	r3, #32
 800253e:	f040 80d9 	bne.w	80026f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2319      	movs	r3, #25
 8002548:	2201      	movs	r2, #1
 800254a:	496d      	ldr	r1, [pc, #436]	@ (8002700 <HAL_I2C_Mem_Write+0x1ec>)
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 fec9 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
 800255a:	e0cc      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_I2C_Mem_Write+0x56>
 8002566:	2302      	movs	r3, #2
 8002568:	e0c5      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d007      	beq.n	8002590 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800259e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2221      	movs	r2, #33	@ 0x21
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2240      	movs	r2, #64	@ 0x40
 80025ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002704 <HAL_I2C_Mem_Write+0x1f0>)
 80025d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025d2:	88f8      	ldrh	r0, [r7, #6]
 80025d4:	893a      	ldrh	r2, [r7, #8]
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4603      	mov	r3, r0
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fd00 	bl	8002fe8 <I2C_RequestMemoryWrite>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d052      	beq.n	8002694 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e081      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 ff8e 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00d      	beq.n	800261e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2b04      	cmp	r3, #4
 8002608:	d107      	bne.n	800261a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002618:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e06b      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b04      	cmp	r3, #4
 800265a:	d11b      	bne.n	8002694 <HAL_I2C_Mem_Write+0x180>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800267e:	3b01      	subs	r3, #1
 8002680:	b29a      	uxth	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1aa      	bne.n	80025f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 ff81 	bl	80035a8 <I2C_WaitOnBTFFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00d      	beq.n	80026c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d107      	bne.n	80026c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e016      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e000      	b.n	80026f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
  }
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	00100002 	.word	0x00100002
 8002704:	ffff0000 	.word	0xffff0000

08002708 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08c      	sub	sp, #48	@ 0x30
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4603      	mov	r3, r0
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	460b      	mov	r3, r1
 800271c:	813b      	strh	r3, [r7, #8]
 800271e:	4613      	mov	r3, r2
 8002720:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002726:	f7ff f84b 	bl	80017c0 <HAL_GetTick>
 800272a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b20      	cmp	r3, #32
 8002736:	f040 8250 	bne.w	8002bda <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2319      	movs	r3, #25
 8002740:	2201      	movs	r2, #1
 8002742:	4982      	ldr	r1, [pc, #520]	@ (800294c <HAL_I2C_Mem_Read+0x244>)
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 fdcd 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002750:	2302      	movs	r3, #2
 8002752:	e243      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_I2C_Mem_Read+0x5a>
 800275e:	2302      	movs	r3, #2
 8002760:	e23c      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d007      	beq.n	8002788 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2222      	movs	r2, #34	@ 0x22
 800279c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2240      	movs	r2, #64	@ 0x40
 80027a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80027b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a62      	ldr	r2, [pc, #392]	@ (8002950 <HAL_I2C_Mem_Read+0x248>)
 80027c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ca:	88f8      	ldrh	r0, [r7, #6]
 80027cc:	893a      	ldrh	r2, [r7, #8]
 80027ce:	8979      	ldrh	r1, [r7, #10]
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4603      	mov	r3, r0
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fc9a 	bl	8003114 <I2C_RequestMemoryRead>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e1f8      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d113      	bne.n	800281a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e1cc      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281e:	2b01      	cmp	r3, #1
 8002820:	d11e      	bne.n	8002860 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002830:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002832:	b672      	cpsid	i
}
 8002834:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800285a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800285c:	b662      	cpsie	i
}
 800285e:	e035      	b.n	80028cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	2b02      	cmp	r3, #2
 8002866:	d11e      	bne.n	80028a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028a2:	b662      	cpsie	i
}
 80028a4:	e012      	b.n	80028cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80028cc:	e172      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	f200 811f 	bhi.w	8002b16 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d123      	bne.n	8002928 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fea7 	bl	8003638 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e173      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002926:	e145      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	2b02      	cmp	r3, #2
 800292e:	d152      	bne.n	80029d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002936:	2200      	movs	r2, #0
 8002938:	4906      	ldr	r1, [pc, #24]	@ (8002954 <HAL_I2C_Mem_Read+0x24c>)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fcd2 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e148      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
 800294a:	bf00      	nop
 800294c:	00100002 	.word	0x00100002
 8002950:	ffff0000 	.word	0xffff0000
 8002954:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800299e:	b662      	cpsie	i
}
 80029a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029d4:	e0ee      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029dc:	2200      	movs	r2, #0
 80029de:	4981      	ldr	r1, [pc, #516]	@ (8002be4 <HAL_I2C_Mem_Read+0x4dc>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fc7f 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0f5      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a00:	b672      	cpsid	i
}
 8002a02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a36:	4b6c      	ldr	r3, [pc, #432]	@ (8002be8 <HAL_I2C_Mem_Read+0x4e0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	08db      	lsrs	r3, r3, #3
 8002a3c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bec <HAL_I2C_Mem_Read+0x4e4>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0a1a      	lsrs	r2, r3, #8
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00da      	lsls	r2, r3, #3
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d118      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a7e:	b662      	cpsie	i
}
 8002a80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0a6      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d1d9      	bne.n	8002a50 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ade:	b662      	cpsie	i
}
 8002ae0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b14:	e04e      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fd8c 	bl	8003638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e058      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d124      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d107      	bne.n	8002b82 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b80:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f ae88 	bne.w	80028ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3728      	adds	r7, #40	@ 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	00010004 	.word	0x00010004
 8002be8:	20000000 	.word	0x20000000
 8002bec:	14f8b589 	.word	0x14f8b589

08002bf0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7fe fdde 	bl	80017c0 <HAL_GetTick>
 8002c04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f040 8111 	bne.w	8002e3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2319      	movs	r3, #25
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4988      	ldr	r1, [pc, #544]	@ (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fb5e 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e104      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d101      	bne.n	8002c40 <HAL_I2C_IsDeviceReady+0x50>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e0fd      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d007      	beq.n	8002c66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2224      	movs	r2, #36	@ 0x24
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a70      	ldr	r2, [pc, #448]	@ (8002e48 <HAL_I2C_IsDeviceReady+0x258>)
 8002c88:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fb1c 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cc0:	d103      	bne.n	8002cca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0b6      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cce:	897b      	ldrh	r3, [r7, #10]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cdc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fd6f 	bl	80017c0 <HAL_GetTick>
 8002ce2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	bf0c      	ite	eq
 8002cf2:	2301      	moveq	r3, #1
 8002cf4:	2300      	movne	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d08:	bf0c      	ite	eq
 8002d0a:	2301      	moveq	r3, #1
 8002d0c:	2300      	movne	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d12:	e025      	b.n	8002d60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d14:	f7fe fd54 	bl	80017c0 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d302      	bcc.n	8002d2a <HAL_I2C_IsDeviceReady+0x13a>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	22a0      	movs	r2, #160	@ 0xa0
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d6a:	d005      	beq.n	8002d78 <HAL_I2C_IsDeviceReady+0x188>
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_I2C_IsDeviceReady+0x188>
 8002d72:	7dbb      	ldrb	r3, [r7, #22]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0cd      	beq.n	8002d14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d129      	bne.n	8002de2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2319      	movs	r3, #25
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4921      	ldr	r1, [pc, #132]	@ (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fa90 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e036      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e02c      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dfa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	2319      	movs	r3, #25
 8002e02:	2201      	movs	r2, #1
 8002e04:	490f      	ldr	r1, [pc, #60]	@ (8002e44 <HAL_I2C_IsDeviceReady+0x254>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fa6c 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e012      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	f4ff af32 	bcc.w	8002c8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3720      	adds	r7, #32
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	00100002 	.word	0x00100002
 8002e48:	ffff0000 	.word	0xffff0000

08002e4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d006      	beq.n	8002e86 <I2C_MasterRequestRead+0x3a>
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d003      	beq.n	8002e86 <I2C_MasterRequestRead+0x3a>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e84:	d108      	bne.n	8002e98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e00b      	b.n	8002eb0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9c:	2b11      	cmp	r3, #17
 8002e9e:	d107      	bne.n	8002eb0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fa11 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ed6:	d103      	bne.n	8002ee0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ede:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e079      	b.n	8002fd8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eec:	d108      	bne.n	8002f00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eee:	897b      	ldrh	r3, [r7, #10]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	611a      	str	r2, [r3, #16]
 8002efe:	e05f      	b.n	8002fc0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	11db      	asrs	r3, r3, #7
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f003 0306 	and.w	r3, r3, #6
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f063 030f 	orn	r3, r3, #15
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4930      	ldr	r1, [pc, #192]	@ (8002fe0 <I2C_MasterRequestRead+0x194>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fa5a 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e054      	b.n	8002fd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4929      	ldr	r1, [pc, #164]	@ (8002fe4 <I2C_MasterRequestRead+0x198>)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fa4a 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e044      	b.n	8002fd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f9af 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00d      	beq.n	8002fa8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f9a:	d103      	bne.n	8002fa4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e017      	b.n	8002fd8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002fa8:	897b      	ldrh	r3, [r7, #10]
 8002faa:	11db      	asrs	r3, r3, #7
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f003 0306 	and.w	r3, r3, #6
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f063 030e 	orn	r3, r3, #14
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4907      	ldr	r1, [pc, #28]	@ (8002fe4 <I2C_MasterRequestRead+0x198>)
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fa06 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	00010008 	.word	0x00010008
 8002fe4:	00010002 	.word	0x00010002

08002fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	817b      	strh	r3, [r7, #10]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	813b      	strh	r3, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	2200      	movs	r2, #0
 800301a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f960 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003038:	d103      	bne.n	8003042 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e05f      	b.n	8003106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	492d      	ldr	r1, [pc, #180]	@ (8003110 <I2C_RequestMemoryWrite+0x128>)
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f9bb 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e04c      	b.n	8003106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003084:	6a39      	ldr	r1, [r7, #32]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa46 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	2b04      	cmp	r3, #4
 8003098:	d107      	bne.n	80030aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e02b      	b.n	8003106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030b4:	893b      	ldrh	r3, [r7, #8]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	611a      	str	r2, [r3, #16]
 80030be:	e021      	b.n	8003104 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fa20 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d107      	bne.n	80030f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e005      	b.n	8003106 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030fa:	893b      	ldrh	r3, [r7, #8]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	00010002 	.word	0x00010002

08003114 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	4608      	mov	r0, r1
 800311e:	4611      	mov	r1, r2
 8003120:	461a      	mov	r2, r3
 8003122:	4603      	mov	r3, r0
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	460b      	mov	r3, r1
 8003128:	813b      	strh	r3, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800313c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800314c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800314e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	2200      	movs	r2, #0
 8003156:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f8c2 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003174:	d103      	bne.n	800317e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800317c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0aa      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003182:	897b      	ldrh	r3, [r7, #10]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	4952      	ldr	r1, [pc, #328]	@ (80032e0 <I2C_RequestMemoryRead+0x1cc>)
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f91d 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e097      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c0:	6a39      	ldr	r1, [r7, #32]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f9a8 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d107      	bne.n	80031e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e076      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d105      	bne.n	80031fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031f0:	893b      	ldrh	r3, [r7, #8]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	611a      	str	r2, [r3, #16]
 80031fa:	e021      	b.n	8003240 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031fc:	893b      	ldrh	r3, [r7, #8]
 80031fe:	0a1b      	lsrs	r3, r3, #8
 8003200:	b29b      	uxth	r3, r3
 8003202:	b2da      	uxtb	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800320a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320c:	6a39      	ldr	r1, [r7, #32]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f982 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00d      	beq.n	8003236 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	2b04      	cmp	r3, #4
 8003220:	d107      	bne.n	8003232 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e050      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003236:	893b      	ldrh	r3, [r7, #8]
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003242:	6a39      	ldr	r1, [r7, #32]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f967 	bl	8003518 <I2C_WaitOnTXEFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00d      	beq.n	800326c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	2b04      	cmp	r3, #4
 8003256:	d107      	bne.n	8003268 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003266:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e035      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	2200      	movs	r2, #0
 8003284:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f82b 	bl	80032e4 <I2C_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a2:	d103      	bne.n	80032ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e013      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	6a3a      	ldr	r2, [r7, #32]
 80032c4:	4906      	ldr	r1, [pc, #24]	@ (80032e0 <I2C_RequestMemoryRead+0x1cc>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f886 	bl	80033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	00010002 	.word	0x00010002

080032e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f4:	e048      	b.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d044      	beq.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fe:	f7fe fa5f 	bl	80017c0 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d302      	bcc.n	8003314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d139      	bne.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	0c1b      	lsrs	r3, r3, #16
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d10d      	bne.n	800333a <I2C_WaitOnFlagUntilTimeout+0x56>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	43da      	mvns	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	bf0c      	ite	eq
 8003330:	2301      	moveq	r3, #1
 8003332:	2300      	movne	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	e00c      	b.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x70>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	43da      	mvns	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4013      	ands	r3, r2
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	429a      	cmp	r2, r3
 8003358:	d116      	bne.n	8003388 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e023      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	0c1b      	lsrs	r3, r3, #16
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10d      	bne.n	80033ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	e00c      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	43da      	mvns	r2, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d093      	beq.n	80032f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033e6:	e071      	b.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f6:	d123      	bne.n	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003406:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	f043 0204 	orr.w	r2, r3, #4
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e067      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d041      	beq.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003448:	f7fe f9ba 	bl	80017c0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d302      	bcc.n	800345e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d136      	bne.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	0c1b      	lsrs	r3, r3, #16
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d10c      	bne.n	8003482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4013      	ands	r3, r2
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	bf14      	ite	ne
 800347a:	2301      	movne	r3, #1
 800347c:	2300      	moveq	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	e00b      	b.n	800349a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	43da      	mvns	r2, r3
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4013      	ands	r3, r2
 800348e:	b29b      	uxth	r3, r3
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e021      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10c      	bne.n	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	43da      	mvns	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e00b      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	4013      	ands	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	f47f af6d 	bne.w	80033e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003524:	e034      	b.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f8e3 	bl	80036f2 <I2C_IsAcknowledgeFailed>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e034      	b.n	80035a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353c:	d028      	beq.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353e:	f7fe f93f 	bl	80017c0 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	429a      	cmp	r2, r3
 800354c:	d302      	bcc.n	8003554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11d      	bne.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355e:	2b80      	cmp	r3, #128	@ 0x80
 8003560:	d016      	beq.n	8003590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e007      	b.n	80035a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359a:	2b80      	cmp	r3, #128	@ 0x80
 800359c:	d1c3      	bne.n	8003526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3710      	adds	r7, #16
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035b4:	e034      	b.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f89b 	bl	80036f2 <I2C_IsAcknowledgeFailed>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e034      	b.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d028      	beq.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fe f8f7 	bl	80017c0 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d11d      	bne.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d016      	beq.n	8003620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d1c3      	bne.n	80035b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003644:	e049      	b.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	d119      	bne.n	8003688 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0210 	mvn.w	r2, #16
 800365c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e030      	b.n	80036ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003688:	f7fe f89a 	bl	80017c0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d302      	bcc.n	800369e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d11d      	bne.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a8:	2b40      	cmp	r3, #64	@ 0x40
 80036aa:	d016      	beq.n	80036da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e007      	b.n	80036ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e4:	2b40      	cmp	r3, #64	@ 0x40
 80036e6:	d1ae      	bne.n	8003646 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003704:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003708:	d11b      	bne.n	8003742 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003712:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
	...

08003750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e272      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8087 	beq.w	800387e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003770:	4b92      	ldr	r3, [pc, #584]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b04      	cmp	r3, #4
 800377a:	d00c      	beq.n	8003796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800377c:	4b8f      	ldr	r3, [pc, #572]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b08      	cmp	r3, #8
 8003786:	d112      	bne.n	80037ae <HAL_RCC_OscConfig+0x5e>
 8003788:	4b8c      	ldr	r3, [pc, #560]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003794:	d10b      	bne.n	80037ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003796:	4b89      	ldr	r3, [pc, #548]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d06c      	beq.n	800387c <HAL_RCC_OscConfig+0x12c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d168      	bne.n	800387c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e24c      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x76>
 80037b8:	4b80      	ldr	r3, [pc, #512]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7f      	ldr	r2, [pc, #508]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e02e      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x98>
 80037ce:	4b7b      	ldr	r3, [pc, #492]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7a      	ldr	r2, [pc, #488]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b78      	ldr	r3, [pc, #480]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a77      	ldr	r2, [pc, #476]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e01d      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0xbc>
 80037f2:	4b72      	ldr	r3, [pc, #456]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a71      	ldr	r2, [pc, #452]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80037f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b6f      	ldr	r3, [pc, #444]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6e      	ldr	r2, [pc, #440]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0xd4>
 800380c:	4b6b      	ldr	r3, [pc, #428]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a6a      	ldr	r2, [pc, #424]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b68      	ldr	r3, [pc, #416]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a67      	ldr	r2, [pc, #412]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fd ffc8 	bl	80017c0 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fd ffc4 	bl	80017c0 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e200      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b5d      	ldr	r3, [pc, #372]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0xe4>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fd ffb4 	bl	80017c0 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7fd ffb0 	bl	80017c0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	@ 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e1ec      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	4b53      	ldr	r3, [pc, #332]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x10c>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d063      	beq.n	8003952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800388a:	4b4c      	ldr	r3, [pc, #304]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003896:	4b49      	ldr	r3, [pc, #292]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d11c      	bne.n	80038dc <HAL_RCC_OscConfig+0x18c>
 80038a2:	4b46      	ldr	r3, [pc, #280]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	4b43      	ldr	r3, [pc, #268]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x176>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e1c0      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b3d      	ldr	r3, [pc, #244]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4939      	ldr	r1, [pc, #228]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	e03a      	b.n	8003952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e4:	4b36      	ldr	r3, [pc, #216]	@ (80039c0 <HAL_RCC_OscConfig+0x270>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fd ff69 	bl	80017c0 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f2:	f7fd ff65 	bl	80017c0 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e1a1      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b2a      	ldr	r3, [pc, #168]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4927      	ldr	r1, [pc, #156]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]
 8003924:	e015      	b.n	8003952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003926:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <HAL_RCC_OscConfig+0x270>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd ff48 	bl	80017c0 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003934:	f7fd ff44 	bl	80017c0 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e180      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d03a      	beq.n	80039d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d019      	beq.n	800399a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003966:	4b17      	ldr	r3, [pc, #92]	@ (80039c4 <HAL_RCC_OscConfig+0x274>)
 8003968:	2201      	movs	r2, #1
 800396a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396c:	f7fd ff28 	bl	80017c0 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7fd ff24 	bl	80017c0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e160      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_RCC_OscConfig+0x26c>)
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003992:	2001      	movs	r0, #1
 8003994:	f000 face 	bl	8003f34 <RCC_Delay>
 8003998:	e01c      	b.n	80039d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399a:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <HAL_RCC_OscConfig+0x274>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a0:	f7fd ff0e 	bl	80017c0 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a6:	e00f      	b.n	80039c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fd ff0a 	bl	80017c0 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d908      	bls.n	80039c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e146      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	42420000 	.word	0x42420000
 80039c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	4b92      	ldr	r3, [pc, #584]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e9      	bne.n	80039a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80a6 	beq.w	8003b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10d      	bne.n	8003a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	4b88      	ldr	r3, [pc, #544]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4a87      	ldr	r2, [pc, #540]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	61d3      	str	r3, [r2, #28]
 80039fe:	4b85      	ldr	r3, [pc, #532]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b82      	ldr	r3, [pc, #520]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d118      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fd fecb 	bl	80017c0 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fd fec7 	bl	80017c0 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	@ 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e103      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4b75      	ldr	r3, [pc, #468]	@ (8003c18 <HAL_RCC_OscConfig+0x4c8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x312>
 8003a54:	4b6f      	ldr	r3, [pc, #444]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4a6e      	ldr	r2, [pc, #440]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6213      	str	r3, [r2, #32]
 8003a60:	e02d      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x334>
 8003a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a69      	ldr	r2, [pc, #420]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	6213      	str	r3, [r2, #32]
 8003a76:	4b67      	ldr	r3, [pc, #412]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4a66      	ldr	r2, [pc, #408]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	6213      	str	r3, [r2, #32]
 8003a82:	e01c      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x356>
 8003a8c:	4b61      	ldr	r3, [pc, #388]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a60      	ldr	r2, [pc, #384]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	4b5e      	ldr	r3, [pc, #376]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6213      	str	r3, [r2, #32]
 8003aa4:	e00b      	b.n	8003abe <HAL_RCC_OscConfig+0x36e>
 8003aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	4a5a      	ldr	r2, [pc, #360]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6213      	str	r3, [r2, #32]
 8003ab2:	4b58      	ldr	r3, [pc, #352]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	4a57      	ldr	r2, [pc, #348]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d015      	beq.n	8003af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac6:	f7fd fe7b 	bl	80017c0 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fd fe77 	bl	80017c0 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0b1      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ee      	beq.n	8003ace <HAL_RCC_OscConfig+0x37e>
 8003af0:	e014      	b.n	8003b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fd fe65 	bl	80017c0 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fd fe61 	bl	80017c0 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e09b      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	4b40      	ldr	r3, [pc, #256]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b3c      	ldr	r3, [pc, #240]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4a3b      	ldr	r2, [pc, #236]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8087 	beq.w	8003c46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b38:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d061      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d146      	bne.n	8003bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b33      	ldr	r3, [pc, #204]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fd fe35 	bl	80017c0 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fd fe31 	bl	80017c0 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e06d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6c:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b80:	d108      	bne.n	8003b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b82:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	4921      	ldr	r1, [pc, #132]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b94:	4b1f      	ldr	r3, [pc, #124]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a19      	ldr	r1, [r3, #32]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	491b      	ldr	r1, [pc, #108]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bac:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fe05 	bl	80017c0 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bba:	f7fd fe01 	bl	80017c0 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e03d      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bcc:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCC_OscConfig+0x46a>
 8003bd8:	e035      	b.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b10      	ldr	r3, [pc, #64]	@ (8003c1c <HAL_RCC_OscConfig+0x4cc>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7fd fdee 	bl	80017c0 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd fdea 	bl	80017c0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e026      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x498>
 8003c06:	e01e      	b.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d107      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e019      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40007000 	.word	0x40007000
 8003c1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c20:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <HAL_RCC_OscConfig+0x500>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d001      	beq.n	8003c46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40021000 	.word	0x40021000

08003c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0d0      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c68:	4b6a      	ldr	r3, [pc, #424]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d910      	bls.n	8003c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b67      	ldr	r3, [pc, #412]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 0207 	bic.w	r2, r3, #7
 8003c7e:	4965      	ldr	r1, [pc, #404]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b63      	ldr	r3, [pc, #396]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0b8      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d020      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb0:	4b59      	ldr	r3, [pc, #356]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a58      	ldr	r2, [pc, #352]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cc8:	4b53      	ldr	r3, [pc, #332]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd4:	4b50      	ldr	r3, [pc, #320]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	494d      	ldr	r1, [pc, #308]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d040      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cfa:	4b47      	ldr	r3, [pc, #284]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d115      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07f      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e073      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b3d      	ldr	r3, [pc, #244]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06b      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d32:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4936      	ldr	r1, [pc, #216]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d44:	f7fd fd3c 	bl	80017c0 <HAL_GetTick>
 8003d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d4c:	f7fd fd38 	bl	80017c0 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e053      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	4b2d      	ldr	r3, [pc, #180]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 020c 	and.w	r2, r3, #12
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d1eb      	bne.n	8003d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d74:	4b27      	ldr	r3, [pc, #156]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d210      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d82:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 0207 	bic.w	r2, r3, #7
 8003d8a:	4922      	ldr	r1, [pc, #136]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b20      	ldr	r3, [pc, #128]	@ (8003e14 <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e032      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4916      	ldr	r1, [pc, #88]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dce:	4b12      	ldr	r3, [pc, #72]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	490e      	ldr	r1, [pc, #56]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003de2:	f000 f821 	bl	8003e28 <HAL_RCC_GetSysClockFreq>
 8003de6:	4602      	mov	r2, r0
 8003de8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <HAL_RCC_ClockConfig+0x1c4>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	490a      	ldr	r1, [pc, #40]	@ (8003e1c <HAL_RCC_ClockConfig+0x1c8>)
 8003df4:	5ccb      	ldrb	r3, [r1, r3]
 8003df6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfa:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <HAL_RCC_ClockConfig+0x1cc>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dfe:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <HAL_RCC_ClockConfig+0x1d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd fc9a 	bl	800173c <HAL_InitTick>

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	080065b0 	.word	0x080065b0
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000004 	.word	0x20000004

08003e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e42:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x30>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d003      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x36>
 8003e56:	e027      	b.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e5a:	613b      	str	r3, [r7, #16]
      break;
 8003e5c:	e027      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	0c9b      	lsrs	r3, r3, #18
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	4a17      	ldr	r2, [pc, #92]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e68:	5cd3      	ldrb	r3, [r2, r3]
 8003e6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d010      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e76:	4b11      	ldr	r3, [pc, #68]	@ (8003ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	0c5b      	lsrs	r3, r3, #17
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	4a11      	ldr	r2, [pc, #68]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e82:	5cd3      	ldrb	r3, [r2, r3]
 8003e84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e8a:	fb03 f202 	mul.w	r2, r3, r2
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e004      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ecc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	613b      	str	r3, [r7, #16]
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eaa:	613b      	str	r3, [r7, #16]
      break;
 8003eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eae:	693b      	ldr	r3, [r7, #16]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	007a1200 	.word	0x007a1200
 8003ec4:	080065c8 	.word	0x080065c8
 8003ec8:	080065d8 	.word	0x080065d8
 8003ecc:	003d0900 	.word	0x003d0900

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b02      	ldr	r3, [pc, #8]	@ (8003ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ee8:	f7ff fff2 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	0a1b      	lsrs	r3, r3, #8
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000
 8003f08:	080065c0 	.word	0x080065c0

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff ffde 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	0adb      	lsrs	r3, r3, #11
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	@ (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	080065c0 	.word	0x080065c0

08003f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <RCC_Delay+0x34>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0a      	ldr	r2, [pc, #40]	@ (8003f6c <RCC_Delay+0x38>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	0a5b      	lsrs	r3, r3, #9
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f50:	bf00      	nop
  }
  while (Delay --);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1e5a      	subs	r2, r3, #1
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f9      	bne.n	8003f50 <RCC_Delay+0x1c>
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	20000000 	.word	0x20000000
 8003f6c:	10624dd3 	.word	0x10624dd3

08003f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e076      	b.n	8004070 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f92:	d009      	beq.n	8003fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	61da      	str	r2, [r3, #28]
 8003f9a:	e005      	b.n	8003fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd fa28 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402c:	ea42 0103 	orr.w	r1, r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	0c1a      	lsrs	r2, r3, #16
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f002 0204 	and.w	r2, r2, #4
 800404e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800405e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004088:	f7fd fb9a 	bl	80017c0 <HAL_GetTick>
 800408c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d001      	beq.n	80040a2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
 80040a0:	e12a      	b.n	80042f8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d002      	beq.n	80040ae <HAL_SPI_Transmit+0x36>
 80040a8:	88fb      	ldrh	r3, [r7, #6]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e122      	b.n	80042f8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <HAL_SPI_Transmit+0x48>
 80040bc:	2302      	movs	r3, #2
 80040be:	e11b      	b.n	80042f8 <HAL_SPI_Transmit+0x280>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2203      	movs	r2, #3
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	88fa      	ldrh	r2, [r7, #6]
 80040e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800410e:	d10f      	bne.n	8004130 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800411e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800412e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	d007      	beq.n	800414e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004156:	d152      	bne.n	80041fe <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_SPI_Transmit+0xee>
 8004160:	8b7b      	ldrh	r3, [r7, #26]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d145      	bne.n	80041f2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	1c9a      	adds	r2, r3, #2
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800418a:	e032      	b.n	80041f2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b02      	cmp	r3, #2
 8004198:	d112      	bne.n	80041c0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	881a      	ldrh	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041be:	e018      	b.n	80041f2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c0:	f7fd fafe 	bl	80017c0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d803      	bhi.n	80041d8 <HAL_SPI_Transmit+0x160>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d102      	bne.n	80041de <HAL_SPI_Transmit+0x166>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d109      	bne.n	80041f2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e082      	b.n	80042f8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1c7      	bne.n	800418c <HAL_SPI_Transmit+0x114>
 80041fc:	e053      	b.n	80042a6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_SPI_Transmit+0x194>
 8004206:	8b7b      	ldrh	r3, [r7, #26]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d147      	bne.n	800429c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	7812      	ldrb	r2, [r2, #0]
 8004218:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004232:	e033      	b.n	800429c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b02      	cmp	r3, #2
 8004240:	d113      	bne.n	800426a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	330c      	adds	r3, #12
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004268:	e018      	b.n	800429c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800426a:	f7fd faa9 	bl	80017c0 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d803      	bhi.n	8004282 <HAL_SPI_Transmit+0x20a>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d102      	bne.n	8004288 <HAL_SPI_Transmit+0x210>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e02d      	b.n	80042f8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1c6      	bne.n	8004234 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f8b0 	bl	8004410 <SPI_EndRxTxTransaction>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80042f6:	2300      	movs	r3, #0
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	4613      	mov	r3, r2
 800430e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004310:	f7fd fa56 	bl	80017c0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	4413      	add	r3, r2
 800431e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004320:	f7fd fa4e 	bl	80017c0 <HAL_GetTick>
 8004324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004326:	4b39      	ldr	r3, [pc, #228]	@ (800440c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	015b      	lsls	r3, r3, #5
 800432c:	0d1b      	lsrs	r3, r3, #20
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004336:	e054      	b.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d050      	beq.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004340:	f7fd fa3e 	bl	80017c0 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	429a      	cmp	r2, r3
 800434e:	d902      	bls.n	8004356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d13d      	bne.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800436e:	d111      	bne.n	8004394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004378:	d004      	beq.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004382:	d107      	bne.n	8004394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439c:	d10f      	bne.n	80043be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e017      	b.n	8004402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	3b01      	subs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4013      	ands	r3, r2
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	bf0c      	ite	eq
 80043f2:	2301      	moveq	r3, #1
 80043f4:	2300      	movne	r3, #0
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	461a      	mov	r2, r3
 80043fa:	79fb      	ldrb	r3, [r7, #7]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d19b      	bne.n	8004338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000000 	.word	0x20000000

08004410 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af02      	add	r7, sp, #8
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2201      	movs	r2, #1
 8004424:	2102      	movs	r1, #2
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7ff ff6a 	bl	8004300 <SPI_WaitFlagStateUntilTimeout>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004436:	f043 0220 	orr.w	r2, r3, #32
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e013      	b.n	800446a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2200      	movs	r2, #0
 800444a:	2180      	movs	r1, #128	@ 0x80
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff ff57 	bl	8004300 <SPI_WaitFlagStateUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e000      	b.n	800446a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e042      	b.n	800450a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc fffb 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2224      	movs	r2, #36	@ 0x24
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f972 	bl	80047a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b08a      	sub	sp, #40	@ 0x28
 8004516:	af02      	add	r7, sp, #8
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b20      	cmp	r3, #32
 8004530:	d175      	bne.n	800461e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_UART_Transmit+0x2c>
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e06e      	b.n	8004620 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2221      	movs	r2, #33	@ 0x21
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004550:	f7fd f936 	bl	80017c0 <HAL_GetTick>
 8004554:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456a:	d108      	bne.n	800457e <HAL_UART_Transmit+0x6c>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d104      	bne.n	800457e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	e003      	b.n	8004586 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004586:	e02e      	b.n	80045e6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	2180      	movs	r1, #128	@ 0x80
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f848 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e03a      	b.n	8004620 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10b      	bne.n	80045c8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045be:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	3302      	adds	r3, #2
 80045c4:	61bb      	str	r3, [r7, #24]
 80045c6:	e007      	b.n	80045d8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3301      	adds	r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1cb      	bne.n	8004588 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2200      	movs	r2, #0
 80045f8:	2140      	movs	r1, #64	@ 0x40
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f814 	bl	8004628 <UART_WaitOnFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e006      	b.n	8004620 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	e03b      	b.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d037      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fd f8bd 	bl	80017c0 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	6a3a      	ldr	r2, [r7, #32]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <UART_WaitOnFlagUntilTimeout+0x30>
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e03a      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d023      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b80      	cmp	r3, #128	@ 0x80
 800466e:	d020      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d01d      	beq.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d116      	bne.n	80046b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f81d 	bl	80046da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2208      	movs	r2, #8
 80046a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00f      	b.n	80046d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d0b4      	beq.n	800463a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b095      	sub	sp, #84	@ 0x54
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004702:	643a      	str	r2, [r7, #64]	@ 0x40
 8004704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004708:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	61fb      	str	r3, [r7, #28]
   return(result);
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004736:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004738:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800473c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	2b01      	cmp	r3, #1
 8004750:	d119      	bne.n	8004786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	60bb      	str	r3, [r7, #8]
   return(result);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	647b      	str	r3, [r7, #68]	@ 0x44
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004772:	61ba      	str	r2, [r7, #24]
 8004774:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	613b      	str	r3, [r7, #16]
   return(result);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004794:	bf00      	nop
 8004796:	3754      	adds	r7, #84	@ 0x54
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr
	...

080047a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80047da:	f023 030c 	bic.w	r3, r3, #12
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a2c      	ldr	r2, [pc, #176]	@ (80048b4 <UART_SetConfig+0x114>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d103      	bne.n	8004810 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7ff fb80 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 800480c:	60f8      	str	r0, [r7, #12]
 800480e:	e002      	b.n	8004816 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7ff fb68 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8004814:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009a      	lsls	r2, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	fbb2 f3f3 	udiv	r3, r2, r3
 800482c:	4a22      	ldr	r2, [pc, #136]	@ (80048b8 <UART_SetConfig+0x118>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	0119      	lsls	r1, r3, #4
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009a      	lsls	r2, r3, #2
 8004840:	441a      	add	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	fbb2 f2f3 	udiv	r2, r2, r3
 800484c:	4b1a      	ldr	r3, [pc, #104]	@ (80048b8 <UART_SetConfig+0x118>)
 800484e:	fba3 0302 	umull	r0, r3, r3, r2
 8004852:	095b      	lsrs	r3, r3, #5
 8004854:	2064      	movs	r0, #100	@ 0x64
 8004856:	fb00 f303 	mul.w	r3, r0, r3
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	3332      	adds	r3, #50	@ 0x32
 8004860:	4a15      	ldr	r2, [pc, #84]	@ (80048b8 <UART_SetConfig+0x118>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800486c:	4419      	add	r1, r3
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	fbb2 f2f3 	udiv	r2, r2, r3
 8004884:	4b0c      	ldr	r3, [pc, #48]	@ (80048b8 <UART_SetConfig+0x118>)
 8004886:	fba3 0302 	umull	r0, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2064      	movs	r0, #100	@ 0x64
 800488e:	fb00 f303 	mul.w	r3, r0, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	@ 0x32
 8004898:	4a07      	ldr	r2, [pc, #28]	@ (80048b8 <UART_SetConfig+0x118>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	440a      	add	r2, r1
 80048aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40013800 	.word	0x40013800
 80048b8:	51eb851f 	.word	0x51eb851f

080048bc <std>:
 80048bc:	2300      	movs	r3, #0
 80048be:	b510      	push	{r4, lr}
 80048c0:	4604      	mov	r4, r0
 80048c2:	e9c0 3300 	strd	r3, r3, [r0]
 80048c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048ca:	6083      	str	r3, [r0, #8]
 80048cc:	8181      	strh	r1, [r0, #12]
 80048ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80048d0:	81c2      	strh	r2, [r0, #14]
 80048d2:	6183      	str	r3, [r0, #24]
 80048d4:	4619      	mov	r1, r3
 80048d6:	2208      	movs	r2, #8
 80048d8:	305c      	adds	r0, #92	@ 0x5c
 80048da:	f000 fa11 	bl	8004d00 <memset>
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <std+0x58>)
 80048e0:	6224      	str	r4, [r4, #32]
 80048e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80048e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004918 <std+0x5c>)
 80048e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048e8:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <std+0x60>)
 80048ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004920 <std+0x64>)
 80048ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80048f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004924 <std+0x68>)
 80048f2:	429c      	cmp	r4, r3
 80048f4:	d006      	beq.n	8004904 <std+0x48>
 80048f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048fa:	4294      	cmp	r4, r2
 80048fc:	d002      	beq.n	8004904 <std+0x48>
 80048fe:	33d0      	adds	r3, #208	@ 0xd0
 8004900:	429c      	cmp	r4, r3
 8004902:	d105      	bne.n	8004910 <std+0x54>
 8004904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800490c:	f000 ba70 	b.w	8004df0 <__retarget_lock_init_recursive>
 8004910:	bd10      	pop	{r4, pc}
 8004912:	bf00      	nop
 8004914:	08004b31 	.word	0x08004b31
 8004918:	08004b53 	.word	0x08004b53
 800491c:	08004b8b 	.word	0x08004b8b
 8004920:	08004baf 	.word	0x08004baf
 8004924:	20000184 	.word	0x20000184

08004928 <stdio_exit_handler>:
 8004928:	4a02      	ldr	r2, [pc, #8]	@ (8004934 <stdio_exit_handler+0xc>)
 800492a:	4903      	ldr	r1, [pc, #12]	@ (8004938 <stdio_exit_handler+0x10>)
 800492c:	4803      	ldr	r0, [pc, #12]	@ (800493c <stdio_exit_handler+0x14>)
 800492e:	f000 b869 	b.w	8004a04 <_fwalk_sglue>
 8004932:	bf00      	nop
 8004934:	2000000c 	.word	0x2000000c
 8004938:	08005685 	.word	0x08005685
 800493c:	2000001c 	.word	0x2000001c

08004940 <cleanup_stdio>:
 8004940:	6841      	ldr	r1, [r0, #4]
 8004942:	4b0c      	ldr	r3, [pc, #48]	@ (8004974 <cleanup_stdio+0x34>)
 8004944:	b510      	push	{r4, lr}
 8004946:	4299      	cmp	r1, r3
 8004948:	4604      	mov	r4, r0
 800494a:	d001      	beq.n	8004950 <cleanup_stdio+0x10>
 800494c:	f000 fe9a 	bl	8005684 <_fflush_r>
 8004950:	68a1      	ldr	r1, [r4, #8]
 8004952:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <cleanup_stdio+0x38>)
 8004954:	4299      	cmp	r1, r3
 8004956:	d002      	beq.n	800495e <cleanup_stdio+0x1e>
 8004958:	4620      	mov	r0, r4
 800495a:	f000 fe93 	bl	8005684 <_fflush_r>
 800495e:	68e1      	ldr	r1, [r4, #12]
 8004960:	4b06      	ldr	r3, [pc, #24]	@ (800497c <cleanup_stdio+0x3c>)
 8004962:	4299      	cmp	r1, r3
 8004964:	d004      	beq.n	8004970 <cleanup_stdio+0x30>
 8004966:	4620      	mov	r0, r4
 8004968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800496c:	f000 be8a 	b.w	8005684 <_fflush_r>
 8004970:	bd10      	pop	{r4, pc}
 8004972:	bf00      	nop
 8004974:	20000184 	.word	0x20000184
 8004978:	200001ec 	.word	0x200001ec
 800497c:	20000254 	.word	0x20000254

08004980 <global_stdio_init.part.0>:
 8004980:	b510      	push	{r4, lr}
 8004982:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <global_stdio_init.part.0+0x30>)
 8004984:	4c0b      	ldr	r4, [pc, #44]	@ (80049b4 <global_stdio_init.part.0+0x34>)
 8004986:	4a0c      	ldr	r2, [pc, #48]	@ (80049b8 <global_stdio_init.part.0+0x38>)
 8004988:	4620      	mov	r0, r4
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	2104      	movs	r1, #4
 800498e:	2200      	movs	r2, #0
 8004990:	f7ff ff94 	bl	80048bc <std>
 8004994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004998:	2201      	movs	r2, #1
 800499a:	2109      	movs	r1, #9
 800499c:	f7ff ff8e 	bl	80048bc <std>
 80049a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049a4:	2202      	movs	r2, #2
 80049a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049aa:	2112      	movs	r1, #18
 80049ac:	f7ff bf86 	b.w	80048bc <std>
 80049b0:	200002bc 	.word	0x200002bc
 80049b4:	20000184 	.word	0x20000184
 80049b8:	08004929 	.word	0x08004929

080049bc <__sfp_lock_acquire>:
 80049bc:	4801      	ldr	r0, [pc, #4]	@ (80049c4 <__sfp_lock_acquire+0x8>)
 80049be:	f000 ba18 	b.w	8004df2 <__retarget_lock_acquire_recursive>
 80049c2:	bf00      	nop
 80049c4:	200002c5 	.word	0x200002c5

080049c8 <__sfp_lock_release>:
 80049c8:	4801      	ldr	r0, [pc, #4]	@ (80049d0 <__sfp_lock_release+0x8>)
 80049ca:	f000 ba13 	b.w	8004df4 <__retarget_lock_release_recursive>
 80049ce:	bf00      	nop
 80049d0:	200002c5 	.word	0x200002c5

080049d4 <__sinit>:
 80049d4:	b510      	push	{r4, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	f7ff fff0 	bl	80049bc <__sfp_lock_acquire>
 80049dc:	6a23      	ldr	r3, [r4, #32]
 80049de:	b11b      	cbz	r3, 80049e8 <__sinit+0x14>
 80049e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049e4:	f7ff bff0 	b.w	80049c8 <__sfp_lock_release>
 80049e8:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <__sinit+0x28>)
 80049ea:	6223      	str	r3, [r4, #32]
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <__sinit+0x2c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f5      	bne.n	80049e0 <__sinit+0xc>
 80049f4:	f7ff ffc4 	bl	8004980 <global_stdio_init.part.0>
 80049f8:	e7f2      	b.n	80049e0 <__sinit+0xc>
 80049fa:	bf00      	nop
 80049fc:	08004941 	.word	0x08004941
 8004a00:	200002bc 	.word	0x200002bc

08004a04 <_fwalk_sglue>:
 8004a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a08:	4607      	mov	r7, r0
 8004a0a:	4688      	mov	r8, r1
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	2600      	movs	r6, #0
 8004a10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a14:	f1b9 0901 	subs.w	r9, r9, #1
 8004a18:	d505      	bpl.n	8004a26 <_fwalk_sglue+0x22>
 8004a1a:	6824      	ldr	r4, [r4, #0]
 8004a1c:	2c00      	cmp	r4, #0
 8004a1e:	d1f7      	bne.n	8004a10 <_fwalk_sglue+0xc>
 8004a20:	4630      	mov	r0, r6
 8004a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a26:	89ab      	ldrh	r3, [r5, #12]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d907      	bls.n	8004a3c <_fwalk_sglue+0x38>
 8004a2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a30:	3301      	adds	r3, #1
 8004a32:	d003      	beq.n	8004a3c <_fwalk_sglue+0x38>
 8004a34:	4629      	mov	r1, r5
 8004a36:	4638      	mov	r0, r7
 8004a38:	47c0      	blx	r8
 8004a3a:	4306      	orrs	r6, r0
 8004a3c:	3568      	adds	r5, #104	@ 0x68
 8004a3e:	e7e9      	b.n	8004a14 <_fwalk_sglue+0x10>

08004a40 <iprintf>:
 8004a40:	b40f      	push	{r0, r1, r2, r3}
 8004a42:	b507      	push	{r0, r1, r2, lr}
 8004a44:	4906      	ldr	r1, [pc, #24]	@ (8004a60 <iprintf+0x20>)
 8004a46:	ab04      	add	r3, sp, #16
 8004a48:	6808      	ldr	r0, [r1, #0]
 8004a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a4e:	6881      	ldr	r1, [r0, #8]
 8004a50:	9301      	str	r3, [sp, #4]
 8004a52:	f000 faef 	bl	8005034 <_vfiprintf_r>
 8004a56:	b003      	add	sp, #12
 8004a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a5c:	b004      	add	sp, #16
 8004a5e:	4770      	bx	lr
 8004a60:	20000018 	.word	0x20000018

08004a64 <putchar>:
 8004a64:	4b02      	ldr	r3, [pc, #8]	@ (8004a70 <putchar+0xc>)
 8004a66:	4601      	mov	r1, r0
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	6882      	ldr	r2, [r0, #8]
 8004a6c:	f000 be93 	b.w	8005796 <_putc_r>
 8004a70:	20000018 	.word	0x20000018

08004a74 <_puts_r>:
 8004a74:	6a03      	ldr	r3, [r0, #32]
 8004a76:	b570      	push	{r4, r5, r6, lr}
 8004a78:	4605      	mov	r5, r0
 8004a7a:	460e      	mov	r6, r1
 8004a7c:	6884      	ldr	r4, [r0, #8]
 8004a7e:	b90b      	cbnz	r3, 8004a84 <_puts_r+0x10>
 8004a80:	f7ff ffa8 	bl	80049d4 <__sinit>
 8004a84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a86:	07db      	lsls	r3, r3, #31
 8004a88:	d405      	bmi.n	8004a96 <_puts_r+0x22>
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	0598      	lsls	r0, r3, #22
 8004a8e:	d402      	bmi.n	8004a96 <_puts_r+0x22>
 8004a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a92:	f000 f9ae 	bl	8004df2 <__retarget_lock_acquire_recursive>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	0719      	lsls	r1, r3, #28
 8004a9a:	d502      	bpl.n	8004aa2 <_puts_r+0x2e>
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d135      	bne.n	8004b0e <_puts_r+0x9a>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 f8c5 	bl	8004c34 <__swsetup_r>
 8004aaa:	b380      	cbz	r0, 8004b0e <_puts_r+0x9a>
 8004aac:	f04f 35ff 	mov.w	r5, #4294967295
 8004ab0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ab2:	07da      	lsls	r2, r3, #31
 8004ab4:	d405      	bmi.n	8004ac2 <_puts_r+0x4e>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	059b      	lsls	r3, r3, #22
 8004aba:	d402      	bmi.n	8004ac2 <_puts_r+0x4e>
 8004abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004abe:	f000 f999 	bl	8004df4 <__retarget_lock_release_recursive>
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da04      	bge.n	8004ad4 <_puts_r+0x60>
 8004aca:	69a2      	ldr	r2, [r4, #24]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	dc17      	bgt.n	8004b00 <_puts_r+0x8c>
 8004ad0:	290a      	cmp	r1, #10
 8004ad2:	d015      	beq.n	8004b00 <_puts_r+0x8c>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	6022      	str	r2, [r4, #0]
 8004ada:	7019      	strb	r1, [r3, #0]
 8004adc:	68a3      	ldr	r3, [r4, #8]
 8004ade:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	60a3      	str	r3, [r4, #8]
 8004ae6:	2900      	cmp	r1, #0
 8004ae8:	d1ed      	bne.n	8004ac6 <_puts_r+0x52>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da11      	bge.n	8004b12 <_puts_r+0x9e>
 8004aee:	4622      	mov	r2, r4
 8004af0:	210a      	movs	r1, #10
 8004af2:	4628      	mov	r0, r5
 8004af4:	f000 f85f 	bl	8004bb6 <__swbuf_r>
 8004af8:	3001      	adds	r0, #1
 8004afa:	d0d7      	beq.n	8004aac <_puts_r+0x38>
 8004afc:	250a      	movs	r5, #10
 8004afe:	e7d7      	b.n	8004ab0 <_puts_r+0x3c>
 8004b00:	4622      	mov	r2, r4
 8004b02:	4628      	mov	r0, r5
 8004b04:	f000 f857 	bl	8004bb6 <__swbuf_r>
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d1e7      	bne.n	8004adc <_puts_r+0x68>
 8004b0c:	e7ce      	b.n	8004aac <_puts_r+0x38>
 8004b0e:	3e01      	subs	r6, #1
 8004b10:	e7e4      	b.n	8004adc <_puts_r+0x68>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	220a      	movs	r2, #10
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e7ee      	b.n	8004afc <_puts_r+0x88>
	...

08004b20 <puts>:
 8004b20:	4b02      	ldr	r3, [pc, #8]	@ (8004b2c <puts+0xc>)
 8004b22:	4601      	mov	r1, r0
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	f7ff bfa5 	b.w	8004a74 <_puts_r>
 8004b2a:	bf00      	nop
 8004b2c:	20000018 	.word	0x20000018

08004b30 <__sread>:
 8004b30:	b510      	push	{r4, lr}
 8004b32:	460c      	mov	r4, r1
 8004b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b38:	f000 f90c 	bl	8004d54 <_read_r>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	bfab      	itete	ge
 8004b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b42:	89a3      	ldrhlt	r3, [r4, #12]
 8004b44:	181b      	addge	r3, r3, r0
 8004b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b4a:	bfac      	ite	ge
 8004b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b4e:	81a3      	strhlt	r3, [r4, #12]
 8004b50:	bd10      	pop	{r4, pc}

08004b52 <__swrite>:
 8004b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b56:	461f      	mov	r7, r3
 8004b58:	898b      	ldrh	r3, [r1, #12]
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	05db      	lsls	r3, r3, #23
 8004b5e:	460c      	mov	r4, r1
 8004b60:	4616      	mov	r6, r2
 8004b62:	d505      	bpl.n	8004b70 <__swrite+0x1e>
 8004b64:	2302      	movs	r3, #2
 8004b66:	2200      	movs	r2, #0
 8004b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6c:	f000 f8e0 	bl	8004d30 <_lseek_r>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	4632      	mov	r2, r6
 8004b74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	463b      	mov	r3, r7
 8004b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b86:	f000 b8f7 	b.w	8004d78 <_write_r>

08004b8a <__sseek>:
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b92:	f000 f8cd 	bl	8004d30 <_lseek_r>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	bf15      	itete	ne
 8004b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ba6:	81a3      	strheq	r3, [r4, #12]
 8004ba8:	bf18      	it	ne
 8004baa:	81a3      	strhne	r3, [r4, #12]
 8004bac:	bd10      	pop	{r4, pc}

08004bae <__sclose>:
 8004bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb2:	f000 b8ad 	b.w	8004d10 <_close_r>

08004bb6 <__swbuf_r>:
 8004bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb8:	460e      	mov	r6, r1
 8004bba:	4614      	mov	r4, r2
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	b118      	cbz	r0, 8004bc8 <__swbuf_r+0x12>
 8004bc0:	6a03      	ldr	r3, [r0, #32]
 8004bc2:	b90b      	cbnz	r3, 8004bc8 <__swbuf_r+0x12>
 8004bc4:	f7ff ff06 	bl	80049d4 <__sinit>
 8004bc8:	69a3      	ldr	r3, [r4, #24]
 8004bca:	60a3      	str	r3, [r4, #8]
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	071a      	lsls	r2, r3, #28
 8004bd0:	d501      	bpl.n	8004bd6 <__swbuf_r+0x20>
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	b943      	cbnz	r3, 8004be8 <__swbuf_r+0x32>
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f000 f82b 	bl	8004c34 <__swsetup_r>
 8004bde:	b118      	cbz	r0, 8004be8 <__swbuf_r+0x32>
 8004be0:	f04f 37ff 	mov.w	r7, #4294967295
 8004be4:	4638      	mov	r0, r7
 8004be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	6922      	ldr	r2, [r4, #16]
 8004bec:	b2f6      	uxtb	r6, r6
 8004bee:	1a98      	subs	r0, r3, r2
 8004bf0:	6963      	ldr	r3, [r4, #20]
 8004bf2:	4637      	mov	r7, r6
 8004bf4:	4283      	cmp	r3, r0
 8004bf6:	dc05      	bgt.n	8004c04 <__swbuf_r+0x4e>
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 fd42 	bl	8005684 <_fflush_r>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d1ed      	bne.n	8004be0 <__swbuf_r+0x2a>
 8004c04:	68a3      	ldr	r3, [r4, #8]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60a3      	str	r3, [r4, #8]
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	6022      	str	r2, [r4, #0]
 8004c10:	701e      	strb	r6, [r3, #0]
 8004c12:	6962      	ldr	r2, [r4, #20]
 8004c14:	1c43      	adds	r3, r0, #1
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d004      	beq.n	8004c24 <__swbuf_r+0x6e>
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	07db      	lsls	r3, r3, #31
 8004c1e:	d5e1      	bpl.n	8004be4 <__swbuf_r+0x2e>
 8004c20:	2e0a      	cmp	r6, #10
 8004c22:	d1df      	bne.n	8004be4 <__swbuf_r+0x2e>
 8004c24:	4621      	mov	r1, r4
 8004c26:	4628      	mov	r0, r5
 8004c28:	f000 fd2c 	bl	8005684 <_fflush_r>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d0d9      	beq.n	8004be4 <__swbuf_r+0x2e>
 8004c30:	e7d6      	b.n	8004be0 <__swbuf_r+0x2a>
	...

08004c34 <__swsetup_r>:
 8004c34:	b538      	push	{r3, r4, r5, lr}
 8004c36:	4b29      	ldr	r3, [pc, #164]	@ (8004cdc <__swsetup_r+0xa8>)
 8004c38:	4605      	mov	r5, r0
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	b118      	cbz	r0, 8004c48 <__swsetup_r+0x14>
 8004c40:	6a03      	ldr	r3, [r0, #32]
 8004c42:	b90b      	cbnz	r3, 8004c48 <__swsetup_r+0x14>
 8004c44:	f7ff fec6 	bl	80049d4 <__sinit>
 8004c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4c:	0719      	lsls	r1, r3, #28
 8004c4e:	d422      	bmi.n	8004c96 <__swsetup_r+0x62>
 8004c50:	06da      	lsls	r2, r3, #27
 8004c52:	d407      	bmi.n	8004c64 <__swsetup_r+0x30>
 8004c54:	2209      	movs	r2, #9
 8004c56:	602a      	str	r2, [r5, #0]
 8004c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	81a3      	strh	r3, [r4, #12]
 8004c62:	e033      	b.n	8004ccc <__swsetup_r+0x98>
 8004c64:	0758      	lsls	r0, r3, #29
 8004c66:	d512      	bpl.n	8004c8e <__swsetup_r+0x5a>
 8004c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c6a:	b141      	cbz	r1, 8004c7e <__swsetup_r+0x4a>
 8004c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c70:	4299      	cmp	r1, r3
 8004c72:	d002      	beq.n	8004c7a <__swsetup_r+0x46>
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f8bf 	bl	8004df8 <_free_r>
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	2300      	movs	r3, #0
 8004c88:	6063      	str	r3, [r4, #4]
 8004c8a:	6923      	ldr	r3, [r4, #16]
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	f043 0308 	orr.w	r3, r3, #8
 8004c94:	81a3      	strh	r3, [r4, #12]
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	b94b      	cbnz	r3, 8004cae <__swsetup_r+0x7a>
 8004c9a:	89a3      	ldrh	r3, [r4, #12]
 8004c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca4:	d003      	beq.n	8004cae <__swsetup_r+0x7a>
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 fd38 	bl	800571e <__smakebuf_r>
 8004cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb2:	f013 0201 	ands.w	r2, r3, #1
 8004cb6:	d00a      	beq.n	8004cce <__swsetup_r+0x9a>
 8004cb8:	2200      	movs	r2, #0
 8004cba:	60a2      	str	r2, [r4, #8]
 8004cbc:	6962      	ldr	r2, [r4, #20]
 8004cbe:	4252      	negs	r2, r2
 8004cc0:	61a2      	str	r2, [r4, #24]
 8004cc2:	6922      	ldr	r2, [r4, #16]
 8004cc4:	b942      	cbnz	r2, 8004cd8 <__swsetup_r+0xa4>
 8004cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004cca:	d1c5      	bne.n	8004c58 <__swsetup_r+0x24>
 8004ccc:	bd38      	pop	{r3, r4, r5, pc}
 8004cce:	0799      	lsls	r1, r3, #30
 8004cd0:	bf58      	it	pl
 8004cd2:	6962      	ldrpl	r2, [r4, #20]
 8004cd4:	60a2      	str	r2, [r4, #8]
 8004cd6:	e7f4      	b.n	8004cc2 <__swsetup_r+0x8e>
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e7f7      	b.n	8004ccc <__swsetup_r+0x98>
 8004cdc:	20000018 	.word	0x20000018

08004ce0 <memcmp>:
 8004ce0:	b510      	push	{r4, lr}
 8004ce2:	3901      	subs	r1, #1
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4290      	cmp	r0, r2
 8004ce8:	d101      	bne.n	8004cee <memcmp+0xe>
 8004cea:	2000      	movs	r0, #0
 8004cec:	e005      	b.n	8004cfa <memcmp+0x1a>
 8004cee:	7803      	ldrb	r3, [r0, #0]
 8004cf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d001      	beq.n	8004cfc <memcmp+0x1c>
 8004cf8:	1b18      	subs	r0, r3, r4
 8004cfa:	bd10      	pop	{r4, pc}
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	e7f2      	b.n	8004ce6 <memcmp+0x6>

08004d00 <memset>:
 8004d00:	4603      	mov	r3, r0
 8004d02:	4402      	add	r2, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <_close_r>:
 8004d10:	b538      	push	{r3, r4, r5, lr}
 8004d12:	2300      	movs	r3, #0
 8004d14:	4d05      	ldr	r5, [pc, #20]	@ (8004d2c <_close_r+0x1c>)
 8004d16:	4604      	mov	r4, r0
 8004d18:	4608      	mov	r0, r1
 8004d1a:	602b      	str	r3, [r5, #0]
 8004d1c:	f7fc fc65 	bl	80015ea <_close>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d102      	bne.n	8004d2a <_close_r+0x1a>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	b103      	cbz	r3, 8004d2a <_close_r+0x1a>
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	200002c0 	.word	0x200002c0

08004d30 <_lseek_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4d05      	ldr	r5, [pc, #20]	@ (8004d50 <_lseek_r+0x20>)
 8004d3c:	602a      	str	r2, [r5, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7fc fc77 	bl	8001632 <_lseek>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_lseek_r+0x1e>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_lseek_r+0x1e>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	200002c0 	.word	0x200002c0

08004d54 <_read_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4d05      	ldr	r5, [pc, #20]	@ (8004d74 <_read_r+0x20>)
 8004d60:	602a      	str	r2, [r5, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f7fc fc08 	bl	8001578 <_read>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d102      	bne.n	8004d72 <_read_r+0x1e>
 8004d6c:	682b      	ldr	r3, [r5, #0]
 8004d6e:	b103      	cbz	r3, 8004d72 <_read_r+0x1e>
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	200002c0 	.word	0x200002c0

08004d78 <_write_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	2200      	movs	r2, #0
 8004d82:	4d05      	ldr	r5, [pc, #20]	@ (8004d98 <_write_r+0x20>)
 8004d84:	602a      	str	r2, [r5, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	f7fc fc13 	bl	80015b2 <_write>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d102      	bne.n	8004d96 <_write_r+0x1e>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	b103      	cbz	r3, 8004d96 <_write_r+0x1e>
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	bd38      	pop	{r3, r4, r5, pc}
 8004d98:	200002c0 	.word	0x200002c0

08004d9c <__errno>:
 8004d9c:	4b01      	ldr	r3, [pc, #4]	@ (8004da4 <__errno+0x8>)
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000018 	.word	0x20000018

08004da8 <__libc_init_array>:
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	2600      	movs	r6, #0
 8004dac:	4d0c      	ldr	r5, [pc, #48]	@ (8004de0 <__libc_init_array+0x38>)
 8004dae:	4c0d      	ldr	r4, [pc, #52]	@ (8004de4 <__libc_init_array+0x3c>)
 8004db0:	1b64      	subs	r4, r4, r5
 8004db2:	10a4      	asrs	r4, r4, #2
 8004db4:	42a6      	cmp	r6, r4
 8004db6:	d109      	bne.n	8004dcc <__libc_init_array+0x24>
 8004db8:	f000 fd62 	bl	8005880 <_init>
 8004dbc:	2600      	movs	r6, #0
 8004dbe:	4d0a      	ldr	r5, [pc, #40]	@ (8004de8 <__libc_init_array+0x40>)
 8004dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8004dec <__libc_init_array+0x44>)
 8004dc2:	1b64      	subs	r4, r4, r5
 8004dc4:	10a4      	asrs	r4, r4, #2
 8004dc6:	42a6      	cmp	r6, r4
 8004dc8:	d105      	bne.n	8004dd6 <__libc_init_array+0x2e>
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd0:	4798      	blx	r3
 8004dd2:	3601      	adds	r6, #1
 8004dd4:	e7ee      	b.n	8004db4 <__libc_init_array+0xc>
 8004dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dda:	4798      	blx	r3
 8004ddc:	3601      	adds	r6, #1
 8004dde:	e7f2      	b.n	8004dc6 <__libc_init_array+0x1e>
 8004de0:	08006618 	.word	0x08006618
 8004de4:	08006618 	.word	0x08006618
 8004de8:	08006618 	.word	0x08006618
 8004dec:	0800661c 	.word	0x0800661c

08004df0 <__retarget_lock_init_recursive>:
 8004df0:	4770      	bx	lr

08004df2 <__retarget_lock_acquire_recursive>:
 8004df2:	4770      	bx	lr

08004df4 <__retarget_lock_release_recursive>:
 8004df4:	4770      	bx	lr
	...

08004df8 <_free_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d040      	beq.n	8004e82 <_free_r+0x8a>
 8004e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e04:	1f0c      	subs	r4, r1, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfb8      	it	lt
 8004e0a:	18e4      	addlt	r4, r4, r3
 8004e0c:	f000 f8de 	bl	8004fcc <__malloc_lock>
 8004e10:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <_free_r+0x8c>)
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	b933      	cbnz	r3, 8004e24 <_free_r+0x2c>
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	6014      	str	r4, [r2, #0]
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e20:	f000 b8da 	b.w	8004fd8 <__malloc_unlock>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d908      	bls.n	8004e3a <_free_r+0x42>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	1821      	adds	r1, r4, r0
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf01      	itttt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	1809      	addeq	r1, r1, r0
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	e7ed      	b.n	8004e16 <_free_r+0x1e>
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b10b      	cbz	r3, 8004e44 <_free_r+0x4c>
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d9fa      	bls.n	8004e3a <_free_r+0x42>
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	1850      	adds	r0, r2, r1
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d10b      	bne.n	8004e64 <_free_r+0x6c>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	4401      	add	r1, r0
 8004e50:	1850      	adds	r0, r2, r1
 8004e52:	4283      	cmp	r3, r0
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	d1e0      	bne.n	8004e1a <_free_r+0x22>
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4408      	add	r0, r1
 8004e5e:	6010      	str	r0, [r2, #0]
 8004e60:	6053      	str	r3, [r2, #4]
 8004e62:	e7da      	b.n	8004e1a <_free_r+0x22>
 8004e64:	d902      	bls.n	8004e6c <_free_r+0x74>
 8004e66:	230c      	movs	r3, #12
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	e7d6      	b.n	8004e1a <_free_r+0x22>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf01      	itttt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	1809      	addeq	r1, r1, r0
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	6063      	str	r3, [r4, #4]
 8004e7e:	6054      	str	r4, [r2, #4]
 8004e80:	e7cb      	b.n	8004e1a <_free_r+0x22>
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	200002cc 	.word	0x200002cc

08004e88 <sbrk_aligned>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	4e0f      	ldr	r6, [pc, #60]	@ (8004ec8 <sbrk_aligned+0x40>)
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	6831      	ldr	r1, [r6, #0]
 8004e90:	4605      	mov	r5, r0
 8004e92:	b911      	cbnz	r1, 8004e9a <sbrk_aligned+0x12>
 8004e94:	f000 fcd6 	bl	8005844 <_sbrk_r>
 8004e98:	6030      	str	r0, [r6, #0]
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 fcd1 	bl	8005844 <_sbrk_r>
 8004ea2:	1c43      	adds	r3, r0, #1
 8004ea4:	d103      	bne.n	8004eae <sbrk_aligned+0x26>
 8004ea6:	f04f 34ff 	mov.w	r4, #4294967295
 8004eaa:	4620      	mov	r0, r4
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
 8004eae:	1cc4      	adds	r4, r0, #3
 8004eb0:	f024 0403 	bic.w	r4, r4, #3
 8004eb4:	42a0      	cmp	r0, r4
 8004eb6:	d0f8      	beq.n	8004eaa <sbrk_aligned+0x22>
 8004eb8:	1a21      	subs	r1, r4, r0
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 fcc2 	bl	8005844 <_sbrk_r>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1f2      	bne.n	8004eaa <sbrk_aligned+0x22>
 8004ec4:	e7ef      	b.n	8004ea6 <sbrk_aligned+0x1e>
 8004ec6:	bf00      	nop
 8004ec8:	200002c8 	.word	0x200002c8

08004ecc <_malloc_r>:
 8004ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	1ccd      	adds	r5, r1, #3
 8004ed2:	f025 0503 	bic.w	r5, r5, #3
 8004ed6:	3508      	adds	r5, #8
 8004ed8:	2d0c      	cmp	r5, #12
 8004eda:	bf38      	it	cc
 8004edc:	250c      	movcc	r5, #12
 8004ede:	2d00      	cmp	r5, #0
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	db01      	blt.n	8004ee8 <_malloc_r+0x1c>
 8004ee4:	42a9      	cmp	r1, r5
 8004ee6:	d904      	bls.n	8004ef2 <_malloc_r+0x26>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	2000      	movs	r0, #0
 8004eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004fc8 <_malloc_r+0xfc>
 8004ef6:	f000 f869 	bl	8004fcc <__malloc_lock>
 8004efa:	f8d8 3000 	ldr.w	r3, [r8]
 8004efe:	461c      	mov	r4, r3
 8004f00:	bb44      	cbnz	r4, 8004f54 <_malloc_r+0x88>
 8004f02:	4629      	mov	r1, r5
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff ffbf 	bl	8004e88 <sbrk_aligned>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	d158      	bne.n	8004fc2 <_malloc_r+0xf6>
 8004f10:	f8d8 4000 	ldr.w	r4, [r8]
 8004f14:	4627      	mov	r7, r4
 8004f16:	2f00      	cmp	r7, #0
 8004f18:	d143      	bne.n	8004fa2 <_malloc_r+0xd6>
 8004f1a:	2c00      	cmp	r4, #0
 8004f1c:	d04b      	beq.n	8004fb6 <_malloc_r+0xea>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	4639      	mov	r1, r7
 8004f22:	4630      	mov	r0, r6
 8004f24:	eb04 0903 	add.w	r9, r4, r3
 8004f28:	f000 fc8c 	bl	8005844 <_sbrk_r>
 8004f2c:	4581      	cmp	r9, r0
 8004f2e:	d142      	bne.n	8004fb6 <_malloc_r+0xea>
 8004f30:	6821      	ldr	r1, [r4, #0]
 8004f32:	4630      	mov	r0, r6
 8004f34:	1a6d      	subs	r5, r5, r1
 8004f36:	4629      	mov	r1, r5
 8004f38:	f7ff ffa6 	bl	8004e88 <sbrk_aligned>
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d03a      	beq.n	8004fb6 <_malloc_r+0xea>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	442b      	add	r3, r5
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	f8d8 3000 	ldr.w	r3, [r8]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	bb62      	cbnz	r2, 8004fa8 <_malloc_r+0xdc>
 8004f4e:	f8c8 7000 	str.w	r7, [r8]
 8004f52:	e00f      	b.n	8004f74 <_malloc_r+0xa8>
 8004f54:	6822      	ldr	r2, [r4, #0]
 8004f56:	1b52      	subs	r2, r2, r5
 8004f58:	d420      	bmi.n	8004f9c <_malloc_r+0xd0>
 8004f5a:	2a0b      	cmp	r2, #11
 8004f5c:	d917      	bls.n	8004f8e <_malloc_r+0xc2>
 8004f5e:	1961      	adds	r1, r4, r5
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	6025      	str	r5, [r4, #0]
 8004f64:	bf18      	it	ne
 8004f66:	6059      	strne	r1, [r3, #4]
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	bf08      	it	eq
 8004f6c:	f8c8 1000 	streq.w	r1, [r8]
 8004f70:	5162      	str	r2, [r4, r5]
 8004f72:	604b      	str	r3, [r1, #4]
 8004f74:	4630      	mov	r0, r6
 8004f76:	f000 f82f 	bl	8004fd8 <__malloc_unlock>
 8004f7a:	f104 000b 	add.w	r0, r4, #11
 8004f7e:	1d23      	adds	r3, r4, #4
 8004f80:	f020 0007 	bic.w	r0, r0, #7
 8004f84:	1ac2      	subs	r2, r0, r3
 8004f86:	bf1c      	itt	ne
 8004f88:	1a1b      	subne	r3, r3, r0
 8004f8a:	50a3      	strne	r3, [r4, r2]
 8004f8c:	e7af      	b.n	8004eee <_malloc_r+0x22>
 8004f8e:	6862      	ldr	r2, [r4, #4]
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	bf0c      	ite	eq
 8004f94:	f8c8 2000 	streq.w	r2, [r8]
 8004f98:	605a      	strne	r2, [r3, #4]
 8004f9a:	e7eb      	b.n	8004f74 <_malloc_r+0xa8>
 8004f9c:	4623      	mov	r3, r4
 8004f9e:	6864      	ldr	r4, [r4, #4]
 8004fa0:	e7ae      	b.n	8004f00 <_malloc_r+0x34>
 8004fa2:	463c      	mov	r4, r7
 8004fa4:	687f      	ldr	r7, [r7, #4]
 8004fa6:	e7b6      	b.n	8004f16 <_malloc_r+0x4a>
 8004fa8:	461a      	mov	r2, r3
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	d1fb      	bne.n	8004fa8 <_malloc_r+0xdc>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6053      	str	r3, [r2, #4]
 8004fb4:	e7de      	b.n	8004f74 <_malloc_r+0xa8>
 8004fb6:	230c      	movs	r3, #12
 8004fb8:	4630      	mov	r0, r6
 8004fba:	6033      	str	r3, [r6, #0]
 8004fbc:	f000 f80c 	bl	8004fd8 <__malloc_unlock>
 8004fc0:	e794      	b.n	8004eec <_malloc_r+0x20>
 8004fc2:	6005      	str	r5, [r0, #0]
 8004fc4:	e7d6      	b.n	8004f74 <_malloc_r+0xa8>
 8004fc6:	bf00      	nop
 8004fc8:	200002cc 	.word	0x200002cc

08004fcc <__malloc_lock>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	@ (8004fd4 <__malloc_lock+0x8>)
 8004fce:	f7ff bf10 	b.w	8004df2 <__retarget_lock_acquire_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	200002c4 	.word	0x200002c4

08004fd8 <__malloc_unlock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	@ (8004fe0 <__malloc_unlock+0x8>)
 8004fda:	f7ff bf0b 	b.w	8004df4 <__retarget_lock_release_recursive>
 8004fde:	bf00      	nop
 8004fe0:	200002c4 	.word	0x200002c4

08004fe4 <__sfputc_r>:
 8004fe4:	6893      	ldr	r3, [r2, #8]
 8004fe6:	b410      	push	{r4}
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	6093      	str	r3, [r2, #8]
 8004fee:	da07      	bge.n	8005000 <__sfputc_r+0x1c>
 8004ff0:	6994      	ldr	r4, [r2, #24]
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	db01      	blt.n	8004ffa <__sfputc_r+0x16>
 8004ff6:	290a      	cmp	r1, #10
 8004ff8:	d102      	bne.n	8005000 <__sfputc_r+0x1c>
 8004ffa:	bc10      	pop	{r4}
 8004ffc:	f7ff bddb 	b.w	8004bb6 <__swbuf_r>
 8005000:	6813      	ldr	r3, [r2, #0]
 8005002:	1c58      	adds	r0, r3, #1
 8005004:	6010      	str	r0, [r2, #0]
 8005006:	7019      	strb	r1, [r3, #0]
 8005008:	4608      	mov	r0, r1
 800500a:	bc10      	pop	{r4}
 800500c:	4770      	bx	lr

0800500e <__sfputs_r>:
 800500e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005010:	4606      	mov	r6, r0
 8005012:	460f      	mov	r7, r1
 8005014:	4614      	mov	r4, r2
 8005016:	18d5      	adds	r5, r2, r3
 8005018:	42ac      	cmp	r4, r5
 800501a:	d101      	bne.n	8005020 <__sfputs_r+0x12>
 800501c:	2000      	movs	r0, #0
 800501e:	e007      	b.n	8005030 <__sfputs_r+0x22>
 8005020:	463a      	mov	r2, r7
 8005022:	4630      	mov	r0, r6
 8005024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005028:	f7ff ffdc 	bl	8004fe4 <__sfputc_r>
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d1f3      	bne.n	8005018 <__sfputs_r+0xa>
 8005030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005034 <_vfiprintf_r>:
 8005034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005038:	460d      	mov	r5, r1
 800503a:	4614      	mov	r4, r2
 800503c:	4698      	mov	r8, r3
 800503e:	4606      	mov	r6, r0
 8005040:	b09d      	sub	sp, #116	@ 0x74
 8005042:	b118      	cbz	r0, 800504c <_vfiprintf_r+0x18>
 8005044:	6a03      	ldr	r3, [r0, #32]
 8005046:	b90b      	cbnz	r3, 800504c <_vfiprintf_r+0x18>
 8005048:	f7ff fcc4 	bl	80049d4 <__sinit>
 800504c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800504e:	07d9      	lsls	r1, r3, #31
 8005050:	d405      	bmi.n	800505e <_vfiprintf_r+0x2a>
 8005052:	89ab      	ldrh	r3, [r5, #12]
 8005054:	059a      	lsls	r2, r3, #22
 8005056:	d402      	bmi.n	800505e <_vfiprintf_r+0x2a>
 8005058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800505a:	f7ff feca 	bl	8004df2 <__retarget_lock_acquire_recursive>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	071b      	lsls	r3, r3, #28
 8005062:	d501      	bpl.n	8005068 <_vfiprintf_r+0x34>
 8005064:	692b      	ldr	r3, [r5, #16]
 8005066:	b99b      	cbnz	r3, 8005090 <_vfiprintf_r+0x5c>
 8005068:	4629      	mov	r1, r5
 800506a:	4630      	mov	r0, r6
 800506c:	f7ff fde2 	bl	8004c34 <__swsetup_r>
 8005070:	b170      	cbz	r0, 8005090 <_vfiprintf_r+0x5c>
 8005072:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005074:	07dc      	lsls	r4, r3, #31
 8005076:	d504      	bpl.n	8005082 <_vfiprintf_r+0x4e>
 8005078:	f04f 30ff 	mov.w	r0, #4294967295
 800507c:	b01d      	add	sp, #116	@ 0x74
 800507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	0598      	lsls	r0, r3, #22
 8005086:	d4f7      	bmi.n	8005078 <_vfiprintf_r+0x44>
 8005088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800508a:	f7ff feb3 	bl	8004df4 <__retarget_lock_release_recursive>
 800508e:	e7f3      	b.n	8005078 <_vfiprintf_r+0x44>
 8005090:	2300      	movs	r3, #0
 8005092:	9309      	str	r3, [sp, #36]	@ 0x24
 8005094:	2320      	movs	r3, #32
 8005096:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800509a:	2330      	movs	r3, #48	@ 0x30
 800509c:	f04f 0901 	mov.w	r9, #1
 80050a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80050a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005250 <_vfiprintf_r+0x21c>
 80050a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050ac:	4623      	mov	r3, r4
 80050ae:	469a      	mov	sl, r3
 80050b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050b4:	b10a      	cbz	r2, 80050ba <_vfiprintf_r+0x86>
 80050b6:	2a25      	cmp	r2, #37	@ 0x25
 80050b8:	d1f9      	bne.n	80050ae <_vfiprintf_r+0x7a>
 80050ba:	ebba 0b04 	subs.w	fp, sl, r4
 80050be:	d00b      	beq.n	80050d8 <_vfiprintf_r+0xa4>
 80050c0:	465b      	mov	r3, fp
 80050c2:	4622      	mov	r2, r4
 80050c4:	4629      	mov	r1, r5
 80050c6:	4630      	mov	r0, r6
 80050c8:	f7ff ffa1 	bl	800500e <__sfputs_r>
 80050cc:	3001      	adds	r0, #1
 80050ce:	f000 80a7 	beq.w	8005220 <_vfiprintf_r+0x1ec>
 80050d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050d4:	445a      	add	r2, fp
 80050d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80050d8:	f89a 3000 	ldrb.w	r3, [sl]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 809f 	beq.w	8005220 <_vfiprintf_r+0x1ec>
 80050e2:	2300      	movs	r3, #0
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295
 80050e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ec:	f10a 0a01 	add.w	sl, sl, #1
 80050f0:	9304      	str	r3, [sp, #16]
 80050f2:	9307      	str	r3, [sp, #28]
 80050f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80050fa:	4654      	mov	r4, sl
 80050fc:	2205      	movs	r2, #5
 80050fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005102:	4853      	ldr	r0, [pc, #332]	@ (8005250 <_vfiprintf_r+0x21c>)
 8005104:	f000 fbae 	bl	8005864 <memchr>
 8005108:	9a04      	ldr	r2, [sp, #16]
 800510a:	b9d8      	cbnz	r0, 8005144 <_vfiprintf_r+0x110>
 800510c:	06d1      	lsls	r1, r2, #27
 800510e:	bf44      	itt	mi
 8005110:	2320      	movmi	r3, #32
 8005112:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005116:	0713      	lsls	r3, r2, #28
 8005118:	bf44      	itt	mi
 800511a:	232b      	movmi	r3, #43	@ 0x2b
 800511c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005120:	f89a 3000 	ldrb.w	r3, [sl]
 8005124:	2b2a      	cmp	r3, #42	@ 0x2a
 8005126:	d015      	beq.n	8005154 <_vfiprintf_r+0x120>
 8005128:	4654      	mov	r4, sl
 800512a:	2000      	movs	r0, #0
 800512c:	f04f 0c0a 	mov.w	ip, #10
 8005130:	9a07      	ldr	r2, [sp, #28]
 8005132:	4621      	mov	r1, r4
 8005134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005138:	3b30      	subs	r3, #48	@ 0x30
 800513a:	2b09      	cmp	r3, #9
 800513c:	d94b      	bls.n	80051d6 <_vfiprintf_r+0x1a2>
 800513e:	b1b0      	cbz	r0, 800516e <_vfiprintf_r+0x13a>
 8005140:	9207      	str	r2, [sp, #28]
 8005142:	e014      	b.n	800516e <_vfiprintf_r+0x13a>
 8005144:	eba0 0308 	sub.w	r3, r0, r8
 8005148:	fa09 f303 	lsl.w	r3, r9, r3
 800514c:	4313      	orrs	r3, r2
 800514e:	46a2      	mov	sl, r4
 8005150:	9304      	str	r3, [sp, #16]
 8005152:	e7d2      	b.n	80050fa <_vfiprintf_r+0xc6>
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	1d19      	adds	r1, r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	9103      	str	r1, [sp, #12]
 800515c:	2b00      	cmp	r3, #0
 800515e:	bfbb      	ittet	lt
 8005160:	425b      	neglt	r3, r3
 8005162:	f042 0202 	orrlt.w	r2, r2, #2
 8005166:	9307      	strge	r3, [sp, #28]
 8005168:	9307      	strlt	r3, [sp, #28]
 800516a:	bfb8      	it	lt
 800516c:	9204      	strlt	r2, [sp, #16]
 800516e:	7823      	ldrb	r3, [r4, #0]
 8005170:	2b2e      	cmp	r3, #46	@ 0x2e
 8005172:	d10a      	bne.n	800518a <_vfiprintf_r+0x156>
 8005174:	7863      	ldrb	r3, [r4, #1]
 8005176:	2b2a      	cmp	r3, #42	@ 0x2a
 8005178:	d132      	bne.n	80051e0 <_vfiprintf_r+0x1ac>
 800517a:	9b03      	ldr	r3, [sp, #12]
 800517c:	3402      	adds	r4, #2
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	9203      	str	r2, [sp, #12]
 8005184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005188:	9305      	str	r3, [sp, #20]
 800518a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005254 <_vfiprintf_r+0x220>
 800518e:	2203      	movs	r2, #3
 8005190:	4650      	mov	r0, sl
 8005192:	7821      	ldrb	r1, [r4, #0]
 8005194:	f000 fb66 	bl	8005864 <memchr>
 8005198:	b138      	cbz	r0, 80051aa <_vfiprintf_r+0x176>
 800519a:	2240      	movs	r2, #64	@ 0x40
 800519c:	9b04      	ldr	r3, [sp, #16]
 800519e:	eba0 000a 	sub.w	r0, r0, sl
 80051a2:	4082      	lsls	r2, r0
 80051a4:	4313      	orrs	r3, r2
 80051a6:	3401      	adds	r4, #1
 80051a8:	9304      	str	r3, [sp, #16]
 80051aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ae:	2206      	movs	r2, #6
 80051b0:	4829      	ldr	r0, [pc, #164]	@ (8005258 <_vfiprintf_r+0x224>)
 80051b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051b6:	f000 fb55 	bl	8005864 <memchr>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d03f      	beq.n	800523e <_vfiprintf_r+0x20a>
 80051be:	4b27      	ldr	r3, [pc, #156]	@ (800525c <_vfiprintf_r+0x228>)
 80051c0:	bb1b      	cbnz	r3, 800520a <_vfiprintf_r+0x1d6>
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	3307      	adds	r3, #7
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	3308      	adds	r3, #8
 80051cc:	9303      	str	r3, [sp, #12]
 80051ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051d0:	443b      	add	r3, r7
 80051d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051d4:	e76a      	b.n	80050ac <_vfiprintf_r+0x78>
 80051d6:	460c      	mov	r4, r1
 80051d8:	2001      	movs	r0, #1
 80051da:	fb0c 3202 	mla	r2, ip, r2, r3
 80051de:	e7a8      	b.n	8005132 <_vfiprintf_r+0xfe>
 80051e0:	2300      	movs	r3, #0
 80051e2:	f04f 0c0a 	mov.w	ip, #10
 80051e6:	4619      	mov	r1, r3
 80051e8:	3401      	adds	r4, #1
 80051ea:	9305      	str	r3, [sp, #20]
 80051ec:	4620      	mov	r0, r4
 80051ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051f2:	3a30      	subs	r2, #48	@ 0x30
 80051f4:	2a09      	cmp	r2, #9
 80051f6:	d903      	bls.n	8005200 <_vfiprintf_r+0x1cc>
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0c6      	beq.n	800518a <_vfiprintf_r+0x156>
 80051fc:	9105      	str	r1, [sp, #20]
 80051fe:	e7c4      	b.n	800518a <_vfiprintf_r+0x156>
 8005200:	4604      	mov	r4, r0
 8005202:	2301      	movs	r3, #1
 8005204:	fb0c 2101 	mla	r1, ip, r1, r2
 8005208:	e7f0      	b.n	80051ec <_vfiprintf_r+0x1b8>
 800520a:	ab03      	add	r3, sp, #12
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	462a      	mov	r2, r5
 8005210:	4630      	mov	r0, r6
 8005212:	4b13      	ldr	r3, [pc, #76]	@ (8005260 <_vfiprintf_r+0x22c>)
 8005214:	a904      	add	r1, sp, #16
 8005216:	f3af 8000 	nop.w
 800521a:	4607      	mov	r7, r0
 800521c:	1c78      	adds	r0, r7, #1
 800521e:	d1d6      	bne.n	80051ce <_vfiprintf_r+0x19a>
 8005220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005222:	07d9      	lsls	r1, r3, #31
 8005224:	d405      	bmi.n	8005232 <_vfiprintf_r+0x1fe>
 8005226:	89ab      	ldrh	r3, [r5, #12]
 8005228:	059a      	lsls	r2, r3, #22
 800522a:	d402      	bmi.n	8005232 <_vfiprintf_r+0x1fe>
 800522c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800522e:	f7ff fde1 	bl	8004df4 <__retarget_lock_release_recursive>
 8005232:	89ab      	ldrh	r3, [r5, #12]
 8005234:	065b      	lsls	r3, r3, #25
 8005236:	f53f af1f 	bmi.w	8005078 <_vfiprintf_r+0x44>
 800523a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800523c:	e71e      	b.n	800507c <_vfiprintf_r+0x48>
 800523e:	ab03      	add	r3, sp, #12
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	462a      	mov	r2, r5
 8005244:	4630      	mov	r0, r6
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <_vfiprintf_r+0x22c>)
 8005248:	a904      	add	r1, sp, #16
 800524a:	f000 f87d 	bl	8005348 <_printf_i>
 800524e:	e7e4      	b.n	800521a <_vfiprintf_r+0x1e6>
 8005250:	080065da 	.word	0x080065da
 8005254:	080065e0 	.word	0x080065e0
 8005258:	080065e4 	.word	0x080065e4
 800525c:	00000000 	.word	0x00000000
 8005260:	0800500f 	.word	0x0800500f

08005264 <_printf_common>:
 8005264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	4616      	mov	r6, r2
 800526a:	4698      	mov	r8, r3
 800526c:	688a      	ldr	r2, [r1, #8]
 800526e:	690b      	ldr	r3, [r1, #16]
 8005270:	4607      	mov	r7, r0
 8005272:	4293      	cmp	r3, r2
 8005274:	bfb8      	it	lt
 8005276:	4613      	movlt	r3, r2
 8005278:	6033      	str	r3, [r6, #0]
 800527a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800527e:	460c      	mov	r4, r1
 8005280:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005284:	b10a      	cbz	r2, 800528a <_printf_common+0x26>
 8005286:	3301      	adds	r3, #1
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	0699      	lsls	r1, r3, #26
 800528e:	bf42      	ittt	mi
 8005290:	6833      	ldrmi	r3, [r6, #0]
 8005292:	3302      	addmi	r3, #2
 8005294:	6033      	strmi	r3, [r6, #0]
 8005296:	6825      	ldr	r5, [r4, #0]
 8005298:	f015 0506 	ands.w	r5, r5, #6
 800529c:	d106      	bne.n	80052ac <_printf_common+0x48>
 800529e:	f104 0a19 	add.w	sl, r4, #25
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	6832      	ldr	r2, [r6, #0]
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	42ab      	cmp	r3, r5
 80052aa:	dc2b      	bgt.n	8005304 <_printf_common+0xa0>
 80052ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052b0:	6822      	ldr	r2, [r4, #0]
 80052b2:	3b00      	subs	r3, #0
 80052b4:	bf18      	it	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	0692      	lsls	r2, r2, #26
 80052ba:	d430      	bmi.n	800531e <_printf_common+0xba>
 80052bc:	4641      	mov	r1, r8
 80052be:	4638      	mov	r0, r7
 80052c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052c4:	47c8      	blx	r9
 80052c6:	3001      	adds	r0, #1
 80052c8:	d023      	beq.n	8005312 <_printf_common+0xae>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	f003 0306 	and.w	r3, r3, #6
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	bf14      	ite	ne
 80052d6:	2500      	movne	r5, #0
 80052d8:	6833      	ldreq	r3, [r6, #0]
 80052da:	f04f 0600 	mov.w	r6, #0
 80052de:	bf08      	it	eq
 80052e0:	68e5      	ldreq	r5, [r4, #12]
 80052e2:	f104 041a 	add.w	r4, r4, #26
 80052e6:	bf08      	it	eq
 80052e8:	1aed      	subeq	r5, r5, r3
 80052ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80052ee:	bf08      	it	eq
 80052f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bfc4      	itt	gt
 80052f8:	1a9b      	subgt	r3, r3, r2
 80052fa:	18ed      	addgt	r5, r5, r3
 80052fc:	42b5      	cmp	r5, r6
 80052fe:	d11a      	bne.n	8005336 <_printf_common+0xd2>
 8005300:	2000      	movs	r0, #0
 8005302:	e008      	b.n	8005316 <_printf_common+0xb2>
 8005304:	2301      	movs	r3, #1
 8005306:	4652      	mov	r2, sl
 8005308:	4641      	mov	r1, r8
 800530a:	4638      	mov	r0, r7
 800530c:	47c8      	blx	r9
 800530e:	3001      	adds	r0, #1
 8005310:	d103      	bne.n	800531a <_printf_common+0xb6>
 8005312:	f04f 30ff 	mov.w	r0, #4294967295
 8005316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800531a:	3501      	adds	r5, #1
 800531c:	e7c1      	b.n	80052a2 <_printf_common+0x3e>
 800531e:	2030      	movs	r0, #48	@ 0x30
 8005320:	18e1      	adds	r1, r4, r3
 8005322:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800532c:	4422      	add	r2, r4
 800532e:	3302      	adds	r3, #2
 8005330:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005334:	e7c2      	b.n	80052bc <_printf_common+0x58>
 8005336:	2301      	movs	r3, #1
 8005338:	4622      	mov	r2, r4
 800533a:	4641      	mov	r1, r8
 800533c:	4638      	mov	r0, r7
 800533e:	47c8      	blx	r9
 8005340:	3001      	adds	r0, #1
 8005342:	d0e6      	beq.n	8005312 <_printf_common+0xae>
 8005344:	3601      	adds	r6, #1
 8005346:	e7d9      	b.n	80052fc <_printf_common+0x98>

08005348 <_printf_i>:
 8005348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800534c:	7e0f      	ldrb	r7, [r1, #24]
 800534e:	4691      	mov	r9, r2
 8005350:	2f78      	cmp	r7, #120	@ 0x78
 8005352:	4680      	mov	r8, r0
 8005354:	460c      	mov	r4, r1
 8005356:	469a      	mov	sl, r3
 8005358:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800535a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800535e:	d807      	bhi.n	8005370 <_printf_i+0x28>
 8005360:	2f62      	cmp	r7, #98	@ 0x62
 8005362:	d80a      	bhi.n	800537a <_printf_i+0x32>
 8005364:	2f00      	cmp	r7, #0
 8005366:	f000 80d1 	beq.w	800550c <_printf_i+0x1c4>
 800536a:	2f58      	cmp	r7, #88	@ 0x58
 800536c:	f000 80b8 	beq.w	80054e0 <_printf_i+0x198>
 8005370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005374:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005378:	e03a      	b.n	80053f0 <_printf_i+0xa8>
 800537a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800537e:	2b15      	cmp	r3, #21
 8005380:	d8f6      	bhi.n	8005370 <_printf_i+0x28>
 8005382:	a101      	add	r1, pc, #4	@ (adr r1, 8005388 <_printf_i+0x40>)
 8005384:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005388:	080053e1 	.word	0x080053e1
 800538c:	080053f5 	.word	0x080053f5
 8005390:	08005371 	.word	0x08005371
 8005394:	08005371 	.word	0x08005371
 8005398:	08005371 	.word	0x08005371
 800539c:	08005371 	.word	0x08005371
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	08005371 	.word	0x08005371
 80053a8:	08005371 	.word	0x08005371
 80053ac:	08005371 	.word	0x08005371
 80053b0:	08005371 	.word	0x08005371
 80053b4:	080054f3 	.word	0x080054f3
 80053b8:	0800541f 	.word	0x0800541f
 80053bc:	080054ad 	.word	0x080054ad
 80053c0:	08005371 	.word	0x08005371
 80053c4:	08005371 	.word	0x08005371
 80053c8:	08005515 	.word	0x08005515
 80053cc:	08005371 	.word	0x08005371
 80053d0:	0800541f 	.word	0x0800541f
 80053d4:	08005371 	.word	0x08005371
 80053d8:	08005371 	.word	0x08005371
 80053dc:	080054b5 	.word	0x080054b5
 80053e0:	6833      	ldr	r3, [r6, #0]
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6032      	str	r2, [r6, #0]
 80053e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053f0:	2301      	movs	r3, #1
 80053f2:	e09c      	b.n	800552e <_printf_i+0x1e6>
 80053f4:	6833      	ldr	r3, [r6, #0]
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	1d19      	adds	r1, r3, #4
 80053fa:	6031      	str	r1, [r6, #0]
 80053fc:	0606      	lsls	r6, r0, #24
 80053fe:	d501      	bpl.n	8005404 <_printf_i+0xbc>
 8005400:	681d      	ldr	r5, [r3, #0]
 8005402:	e003      	b.n	800540c <_printf_i+0xc4>
 8005404:	0645      	lsls	r5, r0, #25
 8005406:	d5fb      	bpl.n	8005400 <_printf_i+0xb8>
 8005408:	f9b3 5000 	ldrsh.w	r5, [r3]
 800540c:	2d00      	cmp	r5, #0
 800540e:	da03      	bge.n	8005418 <_printf_i+0xd0>
 8005410:	232d      	movs	r3, #45	@ 0x2d
 8005412:	426d      	negs	r5, r5
 8005414:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005418:	230a      	movs	r3, #10
 800541a:	4858      	ldr	r0, [pc, #352]	@ (800557c <_printf_i+0x234>)
 800541c:	e011      	b.n	8005442 <_printf_i+0xfa>
 800541e:	6821      	ldr	r1, [r4, #0]
 8005420:	6833      	ldr	r3, [r6, #0]
 8005422:	0608      	lsls	r0, r1, #24
 8005424:	f853 5b04 	ldr.w	r5, [r3], #4
 8005428:	d402      	bmi.n	8005430 <_printf_i+0xe8>
 800542a:	0649      	lsls	r1, r1, #25
 800542c:	bf48      	it	mi
 800542e:	b2ad      	uxthmi	r5, r5
 8005430:	2f6f      	cmp	r7, #111	@ 0x6f
 8005432:	6033      	str	r3, [r6, #0]
 8005434:	bf14      	ite	ne
 8005436:	230a      	movne	r3, #10
 8005438:	2308      	moveq	r3, #8
 800543a:	4850      	ldr	r0, [pc, #320]	@ (800557c <_printf_i+0x234>)
 800543c:	2100      	movs	r1, #0
 800543e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005442:	6866      	ldr	r6, [r4, #4]
 8005444:	2e00      	cmp	r6, #0
 8005446:	60a6      	str	r6, [r4, #8]
 8005448:	db05      	blt.n	8005456 <_printf_i+0x10e>
 800544a:	6821      	ldr	r1, [r4, #0]
 800544c:	432e      	orrs	r6, r5
 800544e:	f021 0104 	bic.w	r1, r1, #4
 8005452:	6021      	str	r1, [r4, #0]
 8005454:	d04b      	beq.n	80054ee <_printf_i+0x1a6>
 8005456:	4616      	mov	r6, r2
 8005458:	fbb5 f1f3 	udiv	r1, r5, r3
 800545c:	fb03 5711 	mls	r7, r3, r1, r5
 8005460:	5dc7      	ldrb	r7, [r0, r7]
 8005462:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005466:	462f      	mov	r7, r5
 8005468:	42bb      	cmp	r3, r7
 800546a:	460d      	mov	r5, r1
 800546c:	d9f4      	bls.n	8005458 <_printf_i+0x110>
 800546e:	2b08      	cmp	r3, #8
 8005470:	d10b      	bne.n	800548a <_printf_i+0x142>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	07df      	lsls	r7, r3, #31
 8005476:	d508      	bpl.n	800548a <_printf_i+0x142>
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	6861      	ldr	r1, [r4, #4]
 800547c:	4299      	cmp	r1, r3
 800547e:	bfde      	ittt	le
 8005480:	2330      	movle	r3, #48	@ 0x30
 8005482:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005486:	f106 36ff 	addle.w	r6, r6, #4294967295
 800548a:	1b92      	subs	r2, r2, r6
 800548c:	6122      	str	r2, [r4, #16]
 800548e:	464b      	mov	r3, r9
 8005490:	4621      	mov	r1, r4
 8005492:	4640      	mov	r0, r8
 8005494:	f8cd a000 	str.w	sl, [sp]
 8005498:	aa03      	add	r2, sp, #12
 800549a:	f7ff fee3 	bl	8005264 <_printf_common>
 800549e:	3001      	adds	r0, #1
 80054a0:	d14a      	bne.n	8005538 <_printf_i+0x1f0>
 80054a2:	f04f 30ff 	mov.w	r0, #4294967295
 80054a6:	b004      	add	sp, #16
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	f043 0320 	orr.w	r3, r3, #32
 80054b2:	6023      	str	r3, [r4, #0]
 80054b4:	2778      	movs	r7, #120	@ 0x78
 80054b6:	4832      	ldr	r0, [pc, #200]	@ (8005580 <_printf_i+0x238>)
 80054b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	6831      	ldr	r1, [r6, #0]
 80054c0:	061f      	lsls	r7, r3, #24
 80054c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80054c6:	d402      	bmi.n	80054ce <_printf_i+0x186>
 80054c8:	065f      	lsls	r7, r3, #25
 80054ca:	bf48      	it	mi
 80054cc:	b2ad      	uxthmi	r5, r5
 80054ce:	6031      	str	r1, [r6, #0]
 80054d0:	07d9      	lsls	r1, r3, #31
 80054d2:	bf44      	itt	mi
 80054d4:	f043 0320 	orrmi.w	r3, r3, #32
 80054d8:	6023      	strmi	r3, [r4, #0]
 80054da:	b11d      	cbz	r5, 80054e4 <_printf_i+0x19c>
 80054dc:	2310      	movs	r3, #16
 80054de:	e7ad      	b.n	800543c <_printf_i+0xf4>
 80054e0:	4826      	ldr	r0, [pc, #152]	@ (800557c <_printf_i+0x234>)
 80054e2:	e7e9      	b.n	80054b8 <_printf_i+0x170>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f023 0320 	bic.w	r3, r3, #32
 80054ea:	6023      	str	r3, [r4, #0]
 80054ec:	e7f6      	b.n	80054dc <_printf_i+0x194>
 80054ee:	4616      	mov	r6, r2
 80054f0:	e7bd      	b.n	800546e <_printf_i+0x126>
 80054f2:	6833      	ldr	r3, [r6, #0]
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	1d18      	adds	r0, r3, #4
 80054f8:	6961      	ldr	r1, [r4, #20]
 80054fa:	6030      	str	r0, [r6, #0]
 80054fc:	062e      	lsls	r6, r5, #24
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	d501      	bpl.n	8005506 <_printf_i+0x1be>
 8005502:	6019      	str	r1, [r3, #0]
 8005504:	e002      	b.n	800550c <_printf_i+0x1c4>
 8005506:	0668      	lsls	r0, r5, #25
 8005508:	d5fb      	bpl.n	8005502 <_printf_i+0x1ba>
 800550a:	8019      	strh	r1, [r3, #0]
 800550c:	2300      	movs	r3, #0
 800550e:	4616      	mov	r6, r2
 8005510:	6123      	str	r3, [r4, #16]
 8005512:	e7bc      	b.n	800548e <_printf_i+0x146>
 8005514:	6833      	ldr	r3, [r6, #0]
 8005516:	2100      	movs	r1, #0
 8005518:	1d1a      	adds	r2, r3, #4
 800551a:	6032      	str	r2, [r6, #0]
 800551c:	681e      	ldr	r6, [r3, #0]
 800551e:	6862      	ldr	r2, [r4, #4]
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f99f 	bl	8005864 <memchr>
 8005526:	b108      	cbz	r0, 800552c <_printf_i+0x1e4>
 8005528:	1b80      	subs	r0, r0, r6
 800552a:	6060      	str	r0, [r4, #4]
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	2300      	movs	r3, #0
 8005532:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005536:	e7aa      	b.n	800548e <_printf_i+0x146>
 8005538:	4632      	mov	r2, r6
 800553a:	4649      	mov	r1, r9
 800553c:	4640      	mov	r0, r8
 800553e:	6923      	ldr	r3, [r4, #16]
 8005540:	47d0      	blx	sl
 8005542:	3001      	adds	r0, #1
 8005544:	d0ad      	beq.n	80054a2 <_printf_i+0x15a>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	079b      	lsls	r3, r3, #30
 800554a:	d413      	bmi.n	8005574 <_printf_i+0x22c>
 800554c:	68e0      	ldr	r0, [r4, #12]
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	4298      	cmp	r0, r3
 8005552:	bfb8      	it	lt
 8005554:	4618      	movlt	r0, r3
 8005556:	e7a6      	b.n	80054a6 <_printf_i+0x15e>
 8005558:	2301      	movs	r3, #1
 800555a:	4632      	mov	r2, r6
 800555c:	4649      	mov	r1, r9
 800555e:	4640      	mov	r0, r8
 8005560:	47d0      	blx	sl
 8005562:	3001      	adds	r0, #1
 8005564:	d09d      	beq.n	80054a2 <_printf_i+0x15a>
 8005566:	3501      	adds	r5, #1
 8005568:	68e3      	ldr	r3, [r4, #12]
 800556a:	9903      	ldr	r1, [sp, #12]
 800556c:	1a5b      	subs	r3, r3, r1
 800556e:	42ab      	cmp	r3, r5
 8005570:	dcf2      	bgt.n	8005558 <_printf_i+0x210>
 8005572:	e7eb      	b.n	800554c <_printf_i+0x204>
 8005574:	2500      	movs	r5, #0
 8005576:	f104 0619 	add.w	r6, r4, #25
 800557a:	e7f5      	b.n	8005568 <_printf_i+0x220>
 800557c:	080065eb 	.word	0x080065eb
 8005580:	080065fc 	.word	0x080065fc

08005584 <__sflush_r>:
 8005584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	0716      	lsls	r6, r2, #28
 800558c:	4605      	mov	r5, r0
 800558e:	460c      	mov	r4, r1
 8005590:	d454      	bmi.n	800563c <__sflush_r+0xb8>
 8005592:	684b      	ldr	r3, [r1, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	dc02      	bgt.n	800559e <__sflush_r+0x1a>
 8005598:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	dd48      	ble.n	8005630 <__sflush_r+0xac>
 800559e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055a0:	2e00      	cmp	r6, #0
 80055a2:	d045      	beq.n	8005630 <__sflush_r+0xac>
 80055a4:	2300      	movs	r3, #0
 80055a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80055aa:	682f      	ldr	r7, [r5, #0]
 80055ac:	6a21      	ldr	r1, [r4, #32]
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	d030      	beq.n	8005614 <__sflush_r+0x90>
 80055b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	0759      	lsls	r1, r3, #29
 80055b8:	d505      	bpl.n	80055c6 <__sflush_r+0x42>
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	1ad2      	subs	r2, r2, r3
 80055be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055c0:	b10b      	cbz	r3, 80055c6 <__sflush_r+0x42>
 80055c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055c4:	1ad2      	subs	r2, r2, r3
 80055c6:	2300      	movs	r3, #0
 80055c8:	4628      	mov	r0, r5
 80055ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055cc:	6a21      	ldr	r1, [r4, #32]
 80055ce:	47b0      	blx	r6
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	d106      	bne.n	80055e4 <__sflush_r+0x60>
 80055d6:	6829      	ldr	r1, [r5, #0]
 80055d8:	291d      	cmp	r1, #29
 80055da:	d82b      	bhi.n	8005634 <__sflush_r+0xb0>
 80055dc:	4a28      	ldr	r2, [pc, #160]	@ (8005680 <__sflush_r+0xfc>)
 80055de:	40ca      	lsrs	r2, r1
 80055e0:	07d6      	lsls	r6, r2, #31
 80055e2:	d527      	bpl.n	8005634 <__sflush_r+0xb0>
 80055e4:	2200      	movs	r2, #0
 80055e6:	6062      	str	r2, [r4, #4]
 80055e8:	6922      	ldr	r2, [r4, #16]
 80055ea:	04d9      	lsls	r1, r3, #19
 80055ec:	6022      	str	r2, [r4, #0]
 80055ee:	d504      	bpl.n	80055fa <__sflush_r+0x76>
 80055f0:	1c42      	adds	r2, r0, #1
 80055f2:	d101      	bne.n	80055f8 <__sflush_r+0x74>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	b903      	cbnz	r3, 80055fa <__sflush_r+0x76>
 80055f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80055fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055fc:	602f      	str	r7, [r5, #0]
 80055fe:	b1b9      	cbz	r1, 8005630 <__sflush_r+0xac>
 8005600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005604:	4299      	cmp	r1, r3
 8005606:	d002      	beq.n	800560e <__sflush_r+0x8a>
 8005608:	4628      	mov	r0, r5
 800560a:	f7ff fbf5 	bl	8004df8 <_free_r>
 800560e:	2300      	movs	r3, #0
 8005610:	6363      	str	r3, [r4, #52]	@ 0x34
 8005612:	e00d      	b.n	8005630 <__sflush_r+0xac>
 8005614:	2301      	movs	r3, #1
 8005616:	4628      	mov	r0, r5
 8005618:	47b0      	blx	r6
 800561a:	4602      	mov	r2, r0
 800561c:	1c50      	adds	r0, r2, #1
 800561e:	d1c9      	bne.n	80055b4 <__sflush_r+0x30>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0c6      	beq.n	80055b4 <__sflush_r+0x30>
 8005626:	2b1d      	cmp	r3, #29
 8005628:	d001      	beq.n	800562e <__sflush_r+0xaa>
 800562a:	2b16      	cmp	r3, #22
 800562c:	d11d      	bne.n	800566a <__sflush_r+0xe6>
 800562e:	602f      	str	r7, [r5, #0]
 8005630:	2000      	movs	r0, #0
 8005632:	e021      	b.n	8005678 <__sflush_r+0xf4>
 8005634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005638:	b21b      	sxth	r3, r3
 800563a:	e01a      	b.n	8005672 <__sflush_r+0xee>
 800563c:	690f      	ldr	r7, [r1, #16]
 800563e:	2f00      	cmp	r7, #0
 8005640:	d0f6      	beq.n	8005630 <__sflush_r+0xac>
 8005642:	0793      	lsls	r3, r2, #30
 8005644:	bf18      	it	ne
 8005646:	2300      	movne	r3, #0
 8005648:	680e      	ldr	r6, [r1, #0]
 800564a:	bf08      	it	eq
 800564c:	694b      	ldreq	r3, [r1, #20]
 800564e:	1bf6      	subs	r6, r6, r7
 8005650:	600f      	str	r7, [r1, #0]
 8005652:	608b      	str	r3, [r1, #8]
 8005654:	2e00      	cmp	r6, #0
 8005656:	ddeb      	ble.n	8005630 <__sflush_r+0xac>
 8005658:	4633      	mov	r3, r6
 800565a:	463a      	mov	r2, r7
 800565c:	4628      	mov	r0, r5
 800565e:	6a21      	ldr	r1, [r4, #32]
 8005660:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005664:	47e0      	blx	ip
 8005666:	2800      	cmp	r0, #0
 8005668:	dc07      	bgt.n	800567a <__sflush_r+0xf6>
 800566a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005672:	f04f 30ff 	mov.w	r0, #4294967295
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800567a:	4407      	add	r7, r0
 800567c:	1a36      	subs	r6, r6, r0
 800567e:	e7e9      	b.n	8005654 <__sflush_r+0xd0>
 8005680:	20400001 	.word	0x20400001

08005684 <_fflush_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	690b      	ldr	r3, [r1, #16]
 8005688:	4605      	mov	r5, r0
 800568a:	460c      	mov	r4, r1
 800568c:	b913      	cbnz	r3, 8005694 <_fflush_r+0x10>
 800568e:	2500      	movs	r5, #0
 8005690:	4628      	mov	r0, r5
 8005692:	bd38      	pop	{r3, r4, r5, pc}
 8005694:	b118      	cbz	r0, 800569e <_fflush_r+0x1a>
 8005696:	6a03      	ldr	r3, [r0, #32]
 8005698:	b90b      	cbnz	r3, 800569e <_fflush_r+0x1a>
 800569a:	f7ff f99b 	bl	80049d4 <__sinit>
 800569e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0f3      	beq.n	800568e <_fflush_r+0xa>
 80056a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056a8:	07d0      	lsls	r0, r2, #31
 80056aa:	d404      	bmi.n	80056b6 <_fflush_r+0x32>
 80056ac:	0599      	lsls	r1, r3, #22
 80056ae:	d402      	bmi.n	80056b6 <_fflush_r+0x32>
 80056b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056b2:	f7ff fb9e 	bl	8004df2 <__retarget_lock_acquire_recursive>
 80056b6:	4628      	mov	r0, r5
 80056b8:	4621      	mov	r1, r4
 80056ba:	f7ff ff63 	bl	8005584 <__sflush_r>
 80056be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056c0:	4605      	mov	r5, r0
 80056c2:	07da      	lsls	r2, r3, #31
 80056c4:	d4e4      	bmi.n	8005690 <_fflush_r+0xc>
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	059b      	lsls	r3, r3, #22
 80056ca:	d4e1      	bmi.n	8005690 <_fflush_r+0xc>
 80056cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056ce:	f7ff fb91 	bl	8004df4 <__retarget_lock_release_recursive>
 80056d2:	e7dd      	b.n	8005690 <_fflush_r+0xc>

080056d4 <__swhatbuf_r>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	460c      	mov	r4, r1
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	4615      	mov	r5, r2
 80056de:	2900      	cmp	r1, #0
 80056e0:	461e      	mov	r6, r3
 80056e2:	b096      	sub	sp, #88	@ 0x58
 80056e4:	da0c      	bge.n	8005700 <__swhatbuf_r+0x2c>
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	2100      	movs	r1, #0
 80056ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056ee:	bf14      	ite	ne
 80056f0:	2340      	movne	r3, #64	@ 0x40
 80056f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056f6:	2000      	movs	r0, #0
 80056f8:	6031      	str	r1, [r6, #0]
 80056fa:	602b      	str	r3, [r5, #0]
 80056fc:	b016      	add	sp, #88	@ 0x58
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	466a      	mov	r2, sp
 8005702:	f000 f87d 	bl	8005800 <_fstat_r>
 8005706:	2800      	cmp	r0, #0
 8005708:	dbed      	blt.n	80056e6 <__swhatbuf_r+0x12>
 800570a:	9901      	ldr	r1, [sp, #4]
 800570c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005710:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005714:	4259      	negs	r1, r3
 8005716:	4159      	adcs	r1, r3
 8005718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800571c:	e7eb      	b.n	80056f6 <__swhatbuf_r+0x22>

0800571e <__smakebuf_r>:
 800571e:	898b      	ldrh	r3, [r1, #12]
 8005720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005722:	079d      	lsls	r5, r3, #30
 8005724:	4606      	mov	r6, r0
 8005726:	460c      	mov	r4, r1
 8005728:	d507      	bpl.n	800573a <__smakebuf_r+0x1c>
 800572a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	6123      	str	r3, [r4, #16]
 8005732:	2301      	movs	r3, #1
 8005734:	6163      	str	r3, [r4, #20]
 8005736:	b003      	add	sp, #12
 8005738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573a:	466a      	mov	r2, sp
 800573c:	ab01      	add	r3, sp, #4
 800573e:	f7ff ffc9 	bl	80056d4 <__swhatbuf_r>
 8005742:	9f00      	ldr	r7, [sp, #0]
 8005744:	4605      	mov	r5, r0
 8005746:	4639      	mov	r1, r7
 8005748:	4630      	mov	r0, r6
 800574a:	f7ff fbbf 	bl	8004ecc <_malloc_r>
 800574e:	b948      	cbnz	r0, 8005764 <__smakebuf_r+0x46>
 8005750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005754:	059a      	lsls	r2, r3, #22
 8005756:	d4ee      	bmi.n	8005736 <__smakebuf_r+0x18>
 8005758:	f023 0303 	bic.w	r3, r3, #3
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	e7e2      	b.n	800572a <__smakebuf_r+0xc>
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800576a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800576e:	81a3      	strh	r3, [r4, #12]
 8005770:	9b01      	ldr	r3, [sp, #4]
 8005772:	6020      	str	r0, [r4, #0]
 8005774:	b15b      	cbz	r3, 800578e <__smakebuf_r+0x70>
 8005776:	4630      	mov	r0, r6
 8005778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800577c:	f000 f852 	bl	8005824 <_isatty_r>
 8005780:	b128      	cbz	r0, 800578e <__smakebuf_r+0x70>
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	f023 0303 	bic.w	r3, r3, #3
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	81a3      	strh	r3, [r4, #12]
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	431d      	orrs	r5, r3
 8005792:	81a5      	strh	r5, [r4, #12]
 8005794:	e7cf      	b.n	8005736 <__smakebuf_r+0x18>

08005796 <_putc_r>:
 8005796:	b570      	push	{r4, r5, r6, lr}
 8005798:	460d      	mov	r5, r1
 800579a:	4614      	mov	r4, r2
 800579c:	4606      	mov	r6, r0
 800579e:	b118      	cbz	r0, 80057a8 <_putc_r+0x12>
 80057a0:	6a03      	ldr	r3, [r0, #32]
 80057a2:	b90b      	cbnz	r3, 80057a8 <_putc_r+0x12>
 80057a4:	f7ff f916 	bl	80049d4 <__sinit>
 80057a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057aa:	07d8      	lsls	r0, r3, #31
 80057ac:	d405      	bmi.n	80057ba <_putc_r+0x24>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	0599      	lsls	r1, r3, #22
 80057b2:	d402      	bmi.n	80057ba <_putc_r+0x24>
 80057b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057b6:	f7ff fb1c 	bl	8004df2 <__retarget_lock_acquire_recursive>
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	3b01      	subs	r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	da05      	bge.n	80057d0 <_putc_r+0x3a>
 80057c4:	69a2      	ldr	r2, [r4, #24]
 80057c6:	4293      	cmp	r3, r2
 80057c8:	db12      	blt.n	80057f0 <_putc_r+0x5a>
 80057ca:	b2eb      	uxtb	r3, r5
 80057cc:	2b0a      	cmp	r3, #10
 80057ce:	d00f      	beq.n	80057f0 <_putc_r+0x5a>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	6022      	str	r2, [r4, #0]
 80057d6:	701d      	strb	r5, [r3, #0]
 80057d8:	b2ed      	uxtb	r5, r5
 80057da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057dc:	07da      	lsls	r2, r3, #31
 80057de:	d405      	bmi.n	80057ec <_putc_r+0x56>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	059b      	lsls	r3, r3, #22
 80057e4:	d402      	bmi.n	80057ec <_putc_r+0x56>
 80057e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057e8:	f7ff fb04 	bl	8004df4 <__retarget_lock_release_recursive>
 80057ec:	4628      	mov	r0, r5
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	4629      	mov	r1, r5
 80057f2:	4622      	mov	r2, r4
 80057f4:	4630      	mov	r0, r6
 80057f6:	f7ff f9de 	bl	8004bb6 <__swbuf_r>
 80057fa:	4605      	mov	r5, r0
 80057fc:	e7ed      	b.n	80057da <_putc_r+0x44>
	...

08005800 <_fstat_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	2300      	movs	r3, #0
 8005804:	4d06      	ldr	r5, [pc, #24]	@ (8005820 <_fstat_r+0x20>)
 8005806:	4604      	mov	r4, r0
 8005808:	4608      	mov	r0, r1
 800580a:	4611      	mov	r1, r2
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	f7fb fef7 	bl	8001600 <_fstat>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	d102      	bne.n	800581c <_fstat_r+0x1c>
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	b103      	cbz	r3, 800581c <_fstat_r+0x1c>
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	bd38      	pop	{r3, r4, r5, pc}
 800581e:	bf00      	nop
 8005820:	200002c0 	.word	0x200002c0

08005824 <_isatty_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	2300      	movs	r3, #0
 8005828:	4d05      	ldr	r5, [pc, #20]	@ (8005840 <_isatty_r+0x1c>)
 800582a:	4604      	mov	r4, r0
 800582c:	4608      	mov	r0, r1
 800582e:	602b      	str	r3, [r5, #0]
 8005830:	f7fb fef5 	bl	800161e <_isatty>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_isatty_r+0x1a>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_isatty_r+0x1a>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	200002c0 	.word	0x200002c0

08005844 <_sbrk_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	2300      	movs	r3, #0
 8005848:	4d05      	ldr	r5, [pc, #20]	@ (8005860 <_sbrk_r+0x1c>)
 800584a:	4604      	mov	r4, r0
 800584c:	4608      	mov	r0, r1
 800584e:	602b      	str	r3, [r5, #0]
 8005850:	f7fb fefc 	bl	800164c <_sbrk>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_sbrk_r+0x1a>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_sbrk_r+0x1a>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	200002c0 	.word	0x200002c0

08005864 <memchr>:
 8005864:	4603      	mov	r3, r0
 8005866:	b510      	push	{r4, lr}
 8005868:	b2c9      	uxtb	r1, r1
 800586a:	4402      	add	r2, r0
 800586c:	4293      	cmp	r3, r2
 800586e:	4618      	mov	r0, r3
 8005870:	d101      	bne.n	8005876 <memchr+0x12>
 8005872:	2000      	movs	r0, #0
 8005874:	e003      	b.n	800587e <memchr+0x1a>
 8005876:	7804      	ldrb	r4, [r0, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	428c      	cmp	r4, r1
 800587c:	d1f6      	bne.n	800586c <memchr+0x8>
 800587e:	bd10      	pop	{r4, pc}

08005880 <_init>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr

0800588c <_fini>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	bf00      	nop
 8005890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005892:	bc08      	pop	{r3}
 8005894:	469e      	mov	lr, r3
 8005896:	4770      	bx	lr
