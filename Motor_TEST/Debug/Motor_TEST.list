
Motor_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000256c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002678  08002678  00003678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e0  080026e0  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080026e0  080026e0  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080026e0  080026e0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026e0  080026e0  000036e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026e4  080026e4  000036e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080026e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002750  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002750  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d8d  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001533  00000000  00000000  0000ae1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000c358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053e  00000000  00000000  0000ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d9  00000000  00000000  0000cf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008007  00000000  00000000  0002485f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e8d  00000000  00000000  0002c866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b06f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d4  00000000  00000000  000b0738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000b280c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002660 	.word	0x08002660

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002660 	.word	0x08002660

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch =='\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f001 fb6a 	bl	800183c <HAL_UART_Transmit>
	HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f001 fb63 	bl	800183c <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08002678 	.word	0x08002678
 8000184:	20000084 	.word	0x20000084

08000188 <smartcar_forward>:

void smartcar_forward(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000192:	4816      	ldr	r0, [pc, #88]	@ (80001ec <smartcar_forward+0x64>)
 8000194:	f000 feb8 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800019e:	4813      	ldr	r0, [pc, #76]	@ (80001ec <smartcar_forward+0x64>)
 80001a0:	f000 feb2 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80001a4:	2201      	movs	r2, #1
 80001a6:	2110      	movs	r1, #16
 80001a8:	4810      	ldr	r0, [pc, #64]	@ (80001ec <smartcar_forward+0x64>)
 80001aa:	f000 fead 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2120      	movs	r1, #32
 80001b2:	480e      	ldr	r0, [pc, #56]	@ (80001ec <smartcar_forward+0x64>)
 80001b4:	f000 fea8 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001be:	480c      	ldr	r0, [pc, #48]	@ (80001f0 <smartcar_forward+0x68>)
 80001c0:	f000 fea2 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80001c4:	2200      	movs	r2, #0
 80001c6:	2108      	movs	r1, #8
 80001c8:	4808      	ldr	r0, [pc, #32]	@ (80001ec <smartcar_forward+0x64>)
 80001ca:	f000 fe9d 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001d4:	4805      	ldr	r0, [pc, #20]	@ (80001ec <smartcar_forward+0x64>)
 80001d6:	f000 fe97 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80001da:	2200      	movs	r2, #0
 80001dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <smartcar_forward+0x68>)
 80001e2:	f000 fe91 	bl	8000f08 <HAL_GPIO_WritePin>
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010c00 	.word	0x40010c00
 80001f0:	40010800 	.word	0x40010800

080001f4 <smartcar_right>:

void smartcar_right(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001fe:	4816      	ldr	r0, [pc, #88]	@ (8000258 <smartcar_right+0x64>)
 8000200:	f000 fe82 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 8000204:	2201      	movs	r2, #1
 8000206:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800020a:	4813      	ldr	r0, [pc, #76]	@ (8000258 <smartcar_right+0x64>)
 800020c:	f000 fe7c 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000210:	2200      	movs	r2, #0
 8000212:	2110      	movs	r1, #16
 8000214:	4810      	ldr	r0, [pc, #64]	@ (8000258 <smartcar_right+0x64>)
 8000216:	f000 fe77 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 800021a:	2201      	movs	r2, #1
 800021c:	2120      	movs	r1, #32
 800021e:	480e      	ldr	r0, [pc, #56]	@ (8000258 <smartcar_right+0x64>)
 8000220:	f000 fe72 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800022a:	480c      	ldr	r0, [pc, #48]	@ (800025c <smartcar_right+0x68>)
 800022c:	f000 fe6c 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2108      	movs	r1, #8
 8000234:	4808      	ldr	r0, [pc, #32]	@ (8000258 <smartcar_right+0x64>)
 8000236:	f000 fe67 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000240:	4805      	ldr	r0, [pc, #20]	@ (8000258 <smartcar_right+0x64>)
 8000242:	f000 fe61 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800024c:	4803      	ldr	r0, [pc, #12]	@ (800025c <smartcar_right+0x68>)
 800024e:	f000 fe5b 	bl	8000f08 <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00
 800025c:	40010800 	.word	0x40010800

08000260 <smartcar_left>:
void smartcar_left(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800026a:	4816      	ldr	r0, [pc, #88]	@ (80002c4 <smartcar_left+0x64>)
 800026c:	f000 fe4c 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000276:	4813      	ldr	r0, [pc, #76]	@ (80002c4 <smartcar_left+0x64>)
 8000278:	f000 fe46 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	2110      	movs	r1, #16
 8000280:	4810      	ldr	r0, [pc, #64]	@ (80002c4 <smartcar_left+0x64>)
 8000282:	f000 fe41 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000286:	2200      	movs	r2, #0
 8000288:	2120      	movs	r1, #32
 800028a:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <smartcar_left+0x64>)
 800028c:	f000 fe3c 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000296:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <smartcar_left+0x68>)
 8000298:	f000 fe36 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 800029c:	2201      	movs	r2, #1
 800029e:	2108      	movs	r1, #8
 80002a0:	4808      	ldr	r0, [pc, #32]	@ (80002c4 <smartcar_left+0x64>)
 80002a2:	f000 fe31 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002ac:	4805      	ldr	r0, [pc, #20]	@ (80002c4 <smartcar_left+0x64>)
 80002ae:	f000 fe2b 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b8:	4803      	ldr	r0, [pc, #12]	@ (80002c8 <smartcar_left+0x68>)
 80002ba:	f000 fe25 	bl	8000f08 <HAL_GPIO_WritePin>
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	40010800 	.word	0x40010800

080002cc <smartcar_backward>:
void smartcar_backward(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002d6:	4816      	ldr	r0, [pc, #88]	@ (8000330 <smartcar_backward+0x64>)
 80002d8:	f000 fe16 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002e2:	4813      	ldr	r0, [pc, #76]	@ (8000330 <smartcar_backward+0x64>)
 80002e4:	f000 fe10 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2110      	movs	r1, #16
 80002ec:	4810      	ldr	r0, [pc, #64]	@ (8000330 <smartcar_backward+0x64>)
 80002ee:	f000 fe0b 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2120      	movs	r1, #32
 80002f6:	480e      	ldr	r0, [pc, #56]	@ (8000330 <smartcar_backward+0x64>)
 80002f8:	f000 fe06 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000302:	480c      	ldr	r0, [pc, #48]	@ (8000334 <smartcar_backward+0x68>)
 8000304:	f000 fe00 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 8000308:	2201      	movs	r2, #1
 800030a:	2108      	movs	r1, #8
 800030c:	4808      	ldr	r0, [pc, #32]	@ (8000330 <smartcar_backward+0x64>)
 800030e:	f000 fdfb 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000318:	4805      	ldr	r0, [pc, #20]	@ (8000330 <smartcar_backward+0x64>)
 800031a:	f000 fdf5 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 800031e:	2201      	movs	r2, #1
 8000320:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000324:	4803      	ldr	r0, [pc, #12]	@ (8000334 <smartcar_backward+0x68>)
 8000326:	f000 fdef 	bl	8000f08 <HAL_GPIO_WritePin>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010c00 	.word	0x40010c00
 8000334:	40010800 	.word	0x40010800

08000338 <smartcar_stop>:
void smartcar_stop(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000342:	4816      	ldr	r0, [pc, #88]	@ (800039c <smartcar_stop+0x64>)
 8000344:	f000 fde0 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800034e:	4813      	ldr	r0, [pc, #76]	@ (800039c <smartcar_stop+0x64>)
 8000350:	f000 fdda 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	2110      	movs	r1, #16
 8000358:	4810      	ldr	r0, [pc, #64]	@ (800039c <smartcar_stop+0x64>)
 800035a:	f000 fdd5 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2120      	movs	r1, #32
 8000362:	480e      	ldr	r0, [pc, #56]	@ (800039c <smartcar_stop+0x64>)
 8000364:	f000 fdd0 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800036e:	480c      	ldr	r0, [pc, #48]	@ (80003a0 <smartcar_stop+0x68>)
 8000370:	f000 fdca 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000374:	2200      	movs	r2, #0
 8000376:	2108      	movs	r1, #8
 8000378:	4808      	ldr	r0, [pc, #32]	@ (800039c <smartcar_stop+0x64>)
 800037a:	f000 fdc5 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <smartcar_stop+0x64>)
 8000386:	f000 fdbf 	bl	8000f08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000390:	4803      	ldr	r0, [pc, #12]	@ (80003a0 <smartcar_stop+0x68>)
 8000392:	f000 fdb9 	bl	8000f08 <HAL_GPIO_WritePin>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	40010800 	.word	0x40010800

080003a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003aa:	f000 fab9 	bl	8000920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ae:	f000 f84d 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b2:	f000 f8b7 	bl	8000524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003b6:	f000 f88b 	bl	80004d0 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 80003ba:	1df9      	adds	r1, r7, #7
 80003bc:	f04f 33ff 	mov.w	r3, #4294967295
 80003c0:	2201      	movs	r2, #1
 80003c2:	481b      	ldr	r0, [pc, #108]	@ (8000430 <main+0x8c>)
 80003c4:	f001 fac5 	bl	8001952 <HAL_UART_Receive>
	  if(ch == 'w')
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	2b77      	cmp	r3, #119	@ 0x77
 80003cc:	d105      	bne.n	80003da <main+0x36>
		  {
		  printf("forward\n");
 80003ce:	4819      	ldr	r0, [pc, #100]	@ (8000434 <main+0x90>)
 80003d0:	f001 fdb8 	bl	8001f44 <puts>
		  smartcar_forward();
 80003d4:	f7ff fed8 	bl	8000188 <smartcar_forward>
 80003d8:	e7ef      	b.n	80003ba <main+0x16>
		  }
	  else if(ch == 's')
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2b73      	cmp	r3, #115	@ 0x73
 80003de:	d105      	bne.n	80003ec <main+0x48>
		  {
		  printf("backward\n");
 80003e0:	4815      	ldr	r0, [pc, #84]	@ (8000438 <main+0x94>)
 80003e2:	f001 fdaf 	bl	8001f44 <puts>
		  smartcar_backward();
 80003e6:	f7ff ff71 	bl	80002cc <smartcar_backward>
 80003ea:	e7e6      	b.n	80003ba <main+0x16>
		  }
	  else if(ch == 'q')
 80003ec:	79fb      	ldrb	r3, [r7, #7]
 80003ee:	2b71      	cmp	r3, #113	@ 0x71
 80003f0:	d105      	bne.n	80003fe <main+0x5a>
		  {
		  printf("stop\n");
 80003f2:	4812      	ldr	r0, [pc, #72]	@ (800043c <main+0x98>)
 80003f4:	f001 fda6 	bl	8001f44 <puts>
		  smartcar_stop();
 80003f8:	f7ff ff9e 	bl	8000338 <smartcar_stop>
 80003fc:	e7dd      	b.n	80003ba <main+0x16>
		  }
	  else if(ch == 'd')
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2b64      	cmp	r3, #100	@ 0x64
 8000402:	d105      	bne.n	8000410 <main+0x6c>
	  {
		  printf("right\n");
 8000404:	480e      	ldr	r0, [pc, #56]	@ (8000440 <main+0x9c>)
 8000406:	f001 fd9d 	bl	8001f44 <puts>
		  smartcar_right();
 800040a:	f7ff fef3 	bl	80001f4 <smartcar_right>
 800040e:	e7d4      	b.n	80003ba <main+0x16>
	  }
	  else if(ch == 'a')
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	2b61      	cmp	r3, #97	@ 0x61
 8000414:	d105      	bne.n	8000422 <main+0x7e>
	  {
		  printf("left\n");
 8000416:	480b      	ldr	r0, [pc, #44]	@ (8000444 <main+0xa0>)
 8000418:	f001 fd94 	bl	8001f44 <puts>
		  smartcar_left();
 800041c:	f7ff ff20 	bl	8000260 <smartcar_left>
 8000420:	e7cb      	b.n	80003ba <main+0x16>
	  }
	  else
	  {
		  printf("key error\n");
 8000422:	4809      	ldr	r0, [pc, #36]	@ (8000448 <main+0xa4>)
 8000424:	f001 fd8e 	bl	8001f44 <puts>
		  smartcar_stop();
 8000428:	f7ff ff86 	bl	8000338 <smartcar_stop>
	  HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 800042c:	e7c5      	b.n	80003ba <main+0x16>
 800042e:	bf00      	nop
 8000430:	20000084 	.word	0x20000084
 8000434:	0800267c 	.word	0x0800267c
 8000438:	08002684 	.word	0x08002684
 800043c:	08002690 	.word	0x08002690
 8000440:	08002698 	.word	0x08002698
 8000444:	080026a0 	.word	0x080026a0
 8000448:	080026a8 	.word	0x080026a8

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b090      	sub	sp, #64	@ 0x40
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0318 	add.w	r3, r7, #24
 8000456:	2228      	movs	r2, #40	@ 0x28
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fe52 	bl	8002104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046e:	2302      	movs	r3, #2
 8000470:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000472:	2301      	movs	r3, #1
 8000474:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000476:	2310      	movs	r3, #16
 8000478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800047e:	2300      	movs	r3, #0
 8000480:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000482:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000488:	f107 0318 	add.w	r3, r7, #24
 800048c:	4618      	mov	r0, r3
 800048e:	f000 fd75 	bl	8000f7c <HAL_RCC_OscConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000498:	f000 f8cc 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049c:	230f      	movs	r3, #15
 800049e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a0:	2302      	movs	r3, #2
 80004a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2102      	movs	r1, #2
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 ffe2 	bl	8001480 <HAL_RCC_ClockConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004c2:	f000 f8b7 	bl	8000634 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3740      	adds	r7, #64	@ 0x40
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d4:	4b11      	ldr	r3, [pc, #68]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	@ (8000520 <MX_USART2_UART_Init+0x50>)
 80004d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004da:	4b10      	ldr	r3, [pc, #64]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 80004dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004e2:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f4:	4b09      	ldr	r3, [pc, #36]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 80004f6:	220c      	movs	r2, #12
 80004f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 8000502:	2200      	movs	r2, #0
 8000504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	@ (800051c <MX_USART2_UART_Init+0x4c>)
 8000508:	f001 f948 	bl	800179c <HAL_UART_Init>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000512:	f000 f88f 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000084 	.word	0x20000084
 8000520:	40004400 	.word	0x40004400

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000538:	4b39      	ldr	r3, [pc, #228]	@ (8000620 <MX_GPIO_Init+0xfc>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a38      	ldr	r2, [pc, #224]	@ (8000620 <MX_GPIO_Init+0xfc>)
 800053e:	f043 0310 	orr.w	r3, r3, #16
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b36      	ldr	r3, [pc, #216]	@ (8000620 <MX_GPIO_Init+0xfc>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0310 	and.w	r3, r3, #16
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000550:	4b33      	ldr	r3, [pc, #204]	@ (8000620 <MX_GPIO_Init+0xfc>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a32      	ldr	r2, [pc, #200]	@ (8000620 <MX_GPIO_Init+0xfc>)
 8000556:	f043 0320 	orr.w	r3, r3, #32
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b30      	ldr	r3, [pc, #192]	@ (8000620 <MX_GPIO_Init+0xfc>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0320 	and.w	r3, r3, #32
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b2d      	ldr	r3, [pc, #180]	@ (8000620 <MX_GPIO_Init+0xfc>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a2c      	ldr	r2, [pc, #176]	@ (8000620 <MX_GPIO_Init+0xfc>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b2a      	ldr	r3, [pc, #168]	@ (8000620 <MX_GPIO_Init+0xfc>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b27      	ldr	r3, [pc, #156]	@ (8000620 <MX_GPIO_Init+0xfc>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a26      	ldr	r2, [pc, #152]	@ (8000620 <MX_GPIO_Init+0xfc>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <MX_GPIO_Init+0xfc>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RBB_Pin|RFF_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800059e:	4821      	ldr	r0, [pc, #132]	@ (8000624 <MX_GPIO_Init+0x100>)
 80005a0:	f000 fcb2 	bl	8000f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RBF_Pin|RFB_Pin|LBF_Pin|LBB_Pin
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 80005aa:	481f      	ldr	r0, [pc, #124]	@ (8000628 <MX_GPIO_Init+0x104>)
 80005ac:	f000 fcac 	bl	8000f08 <HAL_GPIO_WritePin>
                          |LFF_Pin|LFB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	@ (800062c <MX_GPIO_Init+0x108>)
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	481a      	ldr	r0, [pc, #104]	@ (8000630 <MX_GPIO_Init+0x10c>)
 80005c6:	f000 fb1b 	bl	8000c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RBB_Pin RFF_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RBB_Pin|RFF_Pin;
 80005ca:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80005ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	4810      	ldr	r0, [pc, #64]	@ (8000624 <MX_GPIO_Init+0x100>)
 80005e4:	f000 fb0c 	bl	8000c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RBF_Pin RFB_Pin LBF_Pin LBB_Pin
                           LFF_Pin LFB_Pin */
  GPIO_InitStruct.Pin = RBF_Pin|RFB_Pin|LBF_Pin|LBB_Pin
 80005e8:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 80005ec:	613b      	str	r3, [r7, #16]
                          |LFF_Pin|LFB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <MX_GPIO_Init+0x104>)
 8000602:	f000 fafd 	bl	8000c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	2028      	movs	r0, #40	@ 0x28
 800060c:	f000 fac1 	bl	8000b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000610:	2028      	movs	r0, #40	@ 0x28
 8000612:	f000 fada 	bl	8000bca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000616:	bf00      	nop
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800
 8000628:	40010c00 	.word	0x40010c00
 800062c:	10110000 	.word	0x10110000
 8000630:	40011000 	.word	0x40011000

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <Error_Handler+0x8>

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <HAL_MspInit+0x5c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a14      	ldr	r2, [pc, #80]	@ (800069c <HAL_MspInit+0x5c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <HAL_MspInit+0x5c>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <HAL_MspInit+0x5c>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a0e      	ldr	r2, [pc, #56]	@ (800069c <HAL_MspInit+0x5c>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <HAL_MspInit+0x5c>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <HAL_MspInit+0x60>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	4a04      	ldr	r2, [pc, #16]	@ (80006a0 <HAL_MspInit+0x60>)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010000 	.word	0x40010000

080006a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a15      	ldr	r2, [pc, #84]	@ (8000714 <HAL_UART_MspInit+0x70>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d123      	bne.n	800070c <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006c4:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <HAL_UART_MspInit+0x74>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <HAL_UART_MspInit+0x74>)
 80006ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006ce:	61d3      	str	r3, [r2, #28]
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <HAL_UART_MspInit+0x74>)
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <HAL_UART_MspInit+0x74>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000718 <HAL_UART_MspInit+0x74>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <HAL_UART_MspInit+0x74>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006f4:	230c      	movs	r3, #12
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <HAL_UART_MspInit+0x78>)
 8000708:	f000 fa7a 	bl	8000c00 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40004400 	.word	0x40004400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800

08000720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <NMI_Handler+0x4>

08000728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <MemManage_Handler+0x4>

08000738 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <UsageFault_Handler+0x4>

08000748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f91c 	bl	80009ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800077c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000780:	f000 fbda 	bl	8000f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e00a      	b.n	80007b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800079a:	f3af 8000 	nop.w
 800079e:	4601      	mov	r1, r0
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	60ba      	str	r2, [r7, #8]
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbf0      	blt.n	800079a <_read+0x12>
  }

  return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	e009      	b.n	80007e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fcb5 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf1      	blt.n	80007d4 <_write+0x12>
  }
  return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_close>:

int _close(int file)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000820:	605a      	str	r2, [r3, #4]
  return 0;
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <_isatty>:

int _isatty(int file)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000842:	b480      	push	{r7}
 8000844:	b085      	sub	sp, #20
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f001 fc88 	bl	80021a0 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20005000 	.word	0x20005000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	200000cc 	.word	0x200000cc
 80008c4:	20000220 	.word	0x20000220

080008c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr

080008d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d4:	f7ff fff8 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008da:	490c      	ldr	r1, [pc, #48]	@ (800090c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000910 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a09      	ldr	r2, [pc, #36]	@ (8000914 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008f0:	4c09      	ldr	r4, [pc, #36]	@ (8000918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fe:	f001 fc55 	bl	80021ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fd4f 	bl	80003a4 <main>
  bx lr
 8000906:	4770      	bx	lr
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000910:	080026e8 	.word	0x080026e8
  ldr r2, =_sbss
 8000914:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000918:	20000220 	.word	0x20000220

0800091c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC1_2_IRQHandler>
	...

08000920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <HAL_Init+0x28>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a07      	ldr	r2, [pc, #28]	@ (8000948 <HAL_Init+0x28>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000930:	2003      	movs	r0, #3
 8000932:	f000 f923 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000936:	2000      	movs	r0, #0
 8000938:	f000 f808 	bl	800094c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800093c:	f7ff fe80 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40022000 	.word	0x40022000

0800094c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_InitTick+0x54>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <HAL_InitTick+0x58>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000962:	fbb3 f3f1 	udiv	r3, r3, r1
 8000966:	fbb2 f3f3 	udiv	r3, r2, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f93b 	bl	8000be6 <HAL_SYSTICK_Config>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e00e      	b.n	8000998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d80a      	bhi.n	8000996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f903 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800098c:	4a06      	ldr	r2, [pc, #24]	@ (80009a8 <HAL_InitTick+0x5c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000992:	2300      	movs	r3, #0
 8000994:	e000      	b.n	8000998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20000004 	.word	0x20000004

080009ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <HAL_IncTick+0x1c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <HAL_IncTick+0x20>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a03      	ldr	r2, [pc, #12]	@ (80009cc <HAL_IncTick+0x20>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000008 	.word	0x20000008
 80009cc:	200000d0 	.word	0x200000d0

080009d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b02      	ldr	r3, [pc, #8]	@ (80009e0 <HAL_GetTick+0x10>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	200000d0 	.word	0x200000d0

080009e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a00:	4013      	ands	r3, r2
 8000a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <__NVIC_SetPriorityGrouping+0x44>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a30:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <__NVIC_GetPriorityGrouping+0x18>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	0a1b      	lsrs	r3, r3, #8
 8000a36:	f003 0307 	and.w	r3, r3, #7
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	db0b      	blt.n	8000a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 021f 	and.w	r2, r3, #31
 8000a60:	4906      	ldr	r1, [pc, #24]	@ (8000a7c <__NVIC_EnableIRQ+0x34>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	095b      	lsrs	r3, r3, #5
 8000a68:	2001      	movs	r0, #1
 8000a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	@ (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	@ (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	@ 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff90 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff2d 	bl	80009e4 <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff42 	bl	8000a2c <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff90 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5f 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff35 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa2 	bl	8000b38 <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b08b      	sub	sp, #44	@ 0x2c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e169      	b.n	8000ee8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c14:	2201      	movs	r2, #1
 8000c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	f040 8158 	bne.w	8000ee2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	4a9a      	ldr	r2, [pc, #616]	@ (8000ea0 <HAL_GPIO_Init+0x2a0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d05e      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c3c:	4a98      	ldr	r2, [pc, #608]	@ (8000ea0 <HAL_GPIO_Init+0x2a0>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d875      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c42:	4a98      	ldr	r2, [pc, #608]	@ (8000ea4 <HAL_GPIO_Init+0x2a4>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d058      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c48:	4a96      	ldr	r2, [pc, #600]	@ (8000ea4 <HAL_GPIO_Init+0x2a4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d86f      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c4e:	4a96      	ldr	r2, [pc, #600]	@ (8000ea8 <HAL_GPIO_Init+0x2a8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d052      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c54:	4a94      	ldr	r2, [pc, #592]	@ (8000ea8 <HAL_GPIO_Init+0x2a8>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d869      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c5a:	4a94      	ldr	r2, [pc, #592]	@ (8000eac <HAL_GPIO_Init+0x2ac>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d04c      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c60:	4a92      	ldr	r2, [pc, #584]	@ (8000eac <HAL_GPIO_Init+0x2ac>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d863      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c66:	4a92      	ldr	r2, [pc, #584]	@ (8000eb0 <HAL_GPIO_Init+0x2b0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d046      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
 8000c6c:	4a90      	ldr	r2, [pc, #576]	@ (8000eb0 <HAL_GPIO_Init+0x2b0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d85d      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d82a      	bhi.n	8000ccc <HAL_GPIO_Init+0xcc>
 8000c76:	2b12      	cmp	r3, #18
 8000c78:	d859      	bhi.n	8000d2e <HAL_GPIO_Init+0x12e>
 8000c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c80 <HAL_GPIO_Init+0x80>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000cfb 	.word	0x08000cfb
 8000c84:	08000cd5 	.word	0x08000cd5
 8000c88:	08000ce7 	.word	0x08000ce7
 8000c8c:	08000d29 	.word	0x08000d29
 8000c90:	08000d2f 	.word	0x08000d2f
 8000c94:	08000d2f 	.word	0x08000d2f
 8000c98:	08000d2f 	.word	0x08000d2f
 8000c9c:	08000d2f 	.word	0x08000d2f
 8000ca0:	08000d2f 	.word	0x08000d2f
 8000ca4:	08000d2f 	.word	0x08000d2f
 8000ca8:	08000d2f 	.word	0x08000d2f
 8000cac:	08000d2f 	.word	0x08000d2f
 8000cb0:	08000d2f 	.word	0x08000d2f
 8000cb4:	08000d2f 	.word	0x08000d2f
 8000cb8:	08000d2f 	.word	0x08000d2f
 8000cbc:	08000d2f 	.word	0x08000d2f
 8000cc0:	08000d2f 	.word	0x08000d2f
 8000cc4:	08000cdd 	.word	0x08000cdd
 8000cc8:	08000cf1 	.word	0x08000cf1
 8000ccc:	4a79      	ldr	r2, [pc, #484]	@ (8000eb4 <HAL_GPIO_Init+0x2b4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d013      	beq.n	8000cfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cd2:	e02c      	b.n	8000d2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	623b      	str	r3, [r7, #32]
          break;
 8000cda:	e029      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	623b      	str	r3, [r7, #32]
          break;
 8000ce4:	e024      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	3308      	adds	r3, #8
 8000cec:	623b      	str	r3, [r7, #32]
          break;
 8000cee:	e01f      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	330c      	adds	r3, #12
 8000cf6:	623b      	str	r3, [r7, #32]
          break;
 8000cf8:	e01a      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d02:	2304      	movs	r3, #4
 8000d04:	623b      	str	r3, [r7, #32]
          break;
 8000d06:	e013      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d105      	bne.n	8000d1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d10:	2308      	movs	r3, #8
 8000d12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	611a      	str	r2, [r3, #16]
          break;
 8000d1a:	e009      	b.n	8000d30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	69fa      	ldr	r2, [r7, #28]
 8000d24:	615a      	str	r2, [r3, #20]
          break;
 8000d26:	e003      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
          break;
 8000d2c:	e000      	b.n	8000d30 <HAL_GPIO_Init+0x130>
          break;
 8000d2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	@ 0xff
 8000d34:	d801      	bhi.n	8000d3a <HAL_GPIO_Init+0x13a>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	e001      	b.n	8000d3e <HAL_GPIO_Init+0x13e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2bff      	cmp	r3, #255	@ 0xff
 8000d44:	d802      	bhi.n	8000d4c <HAL_GPIO_Init+0x14c>
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x152>
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4e:	3b08      	subs	r3, #8
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	210f      	movs	r1, #15
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	401a      	ands	r2, r3
 8000d64:	6a39      	ldr	r1, [r7, #32]
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 80b1 	beq.w	8000ee2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d80:	4b4d      	ldr	r3, [pc, #308]	@ (8000eb8 <HAL_GPIO_Init+0x2b8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb8 <HAL_GPIO_Init+0x2b8>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000eb8 <HAL_GPIO_Init+0x2b8>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d98:	4a48      	ldr	r2, [pc, #288]	@ (8000ebc <HAL_GPIO_Init+0x2bc>)
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a40      	ldr	r2, [pc, #256]	@ (8000ec0 <HAL_GPIO_Init+0x2c0>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d013      	beq.n	8000dec <HAL_GPIO_Init+0x1ec>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ec4 <HAL_GPIO_Init+0x2c4>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d00d      	beq.n	8000de8 <HAL_GPIO_Init+0x1e8>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a3e      	ldr	r2, [pc, #248]	@ (8000ec8 <HAL_GPIO_Init+0x2c8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d007      	beq.n	8000de4 <HAL_GPIO_Init+0x1e4>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ecc <HAL_GPIO_Init+0x2cc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d101      	bne.n	8000de0 <HAL_GPIO_Init+0x1e0>
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e006      	b.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000de0:	2304      	movs	r3, #4
 8000de2:	e004      	b.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000de4:	2302      	movs	r3, #2
 8000de6:	e002      	b.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e000      	b.n	8000dee <HAL_GPIO_Init+0x1ee>
 8000dec:	2300      	movs	r3, #0
 8000dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000df0:	f002 0203 	and.w	r2, r2, #3
 8000df4:	0092      	lsls	r2, r2, #2
 8000df6:	4093      	lsls	r3, r2
 8000df8:	68fa      	ldr	r2, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dfe:	492f      	ldr	r1, [pc, #188]	@ (8000ebc <HAL_GPIO_Init+0x2bc>)
 8000e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3302      	adds	r3, #2
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	492c      	ldr	r1, [pc, #176]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4928      	ldr	r1, [pc, #160]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	4922      	ldr	r1, [pc, #136]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
 8000e4c:	e006      	b.n	8000e5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	491e      	ldr	r1, [pc, #120]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e68:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	4918      	ldr	r1, [pc, #96]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	4914      	ldr	r1, [pc, #80]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d021      	beq.n	8000ed4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	490e      	ldr	r1, [pc, #56]	@ (8000ed0 <HAL_GPIO_Init+0x2d0>)
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
 8000e9c:	e021      	b.n	8000ee2 <HAL_GPIO_Init+0x2e2>
 8000e9e:	bf00      	nop
 8000ea0:	10320000 	.word	0x10320000
 8000ea4:	10310000 	.word	0x10310000
 8000ea8:	10220000 	.word	0x10220000
 8000eac:	10210000 	.word	0x10210000
 8000eb0:	10120000 	.word	0x10120000
 8000eb4:	10110000 	.word	0x10110000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40010000 	.word	0x40010000
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	40010c00 	.word	0x40010c00
 8000ec8:	40011000 	.word	0x40011000
 8000ecc:	40011400 	.word	0x40011400
 8000ed0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_GPIO_Init+0x304>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4909      	ldr	r1, [pc, #36]	@ (8000f04 <HAL_GPIO_Init+0x304>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eee:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f47f ae8e 	bne.w	8000c14 <HAL_GPIO_Init+0x14>
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	372c      	adds	r7, #44	@ 0x2c
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40010400 	.word	0x40010400

08000f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
 8000f14:	4613      	mov	r3, r2
 8000f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f18:	787b      	ldrb	r3, [r7, #1]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f24:	e003      	b.n	8000f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	041a      	lsls	r2, r3, #16
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	611a      	str	r2, [r3, #16]
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f42:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f44:	695a      	ldr	r2, [r3, #20]
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f806 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40010400 	.word	0x40010400

08000f68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e272      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8087 	beq.w	80010aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f9c:	4b92      	ldr	r3, [pc, #584]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d00c      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fa8:	4b8f      	ldr	r3, [pc, #572]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d112      	bne.n	8000fda <HAL_RCC_OscConfig+0x5e>
 8000fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc0:	d10b      	bne.n	8000fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc2:	4b89      	ldr	r3, [pc, #548]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d06c      	beq.n	80010a8 <HAL_RCC_OscConfig+0x12c>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d168      	bne.n	80010a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e24c      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x76>
 8000fe4:	4b80      	ldr	r3, [pc, #512]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a7f      	ldr	r2, [pc, #508]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e02e      	b.n	8001050 <HAL_RCC_OscConfig+0xd4>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x98>
 8000ffa:	4b7b      	ldr	r3, [pc, #492]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a7a      	ldr	r2, [pc, #488]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b78      	ldr	r3, [pc, #480]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a77      	ldr	r2, [pc, #476]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e01d      	b.n	8001050 <HAL_RCC_OscConfig+0xd4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0xbc>
 800101e:	4b72      	ldr	r3, [pc, #456]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a71      	ldr	r2, [pc, #452]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b6f      	ldr	r3, [pc, #444]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6e      	ldr	r2, [pc, #440]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e00b      	b.n	8001050 <HAL_RCC_OscConfig+0xd4>
 8001038:	4b6b      	ldr	r3, [pc, #428]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a6a      	ldr	r2, [pc, #424]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800103e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	4b68      	ldr	r3, [pc, #416]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a67      	ldr	r2, [pc, #412]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800104a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800104e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fcba 	bl	80009d0 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fcb6 	bl	80009d0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	@ 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e200      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	4b5d      	ldr	r3, [pc, #372]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0xe4>
 800107e:	e014      	b.n	80010aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001080:	f7ff fca6 	bl	80009d0 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001088:	f7ff fca2 	bl	80009d0 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b64      	cmp	r3, #100	@ 0x64
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e1ec      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	4b53      	ldr	r3, [pc, #332]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x10c>
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d063      	beq.n	800117e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010b6:	4b4c      	ldr	r3, [pc, #304]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010c2:	4b49      	ldr	r3, [pc, #292]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d11c      	bne.n	8001108 <HAL_RCC_OscConfig+0x18c>
 80010ce:	4b46      	ldr	r3, [pc, #280]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d116      	bne.n	8001108 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010da:	4b43      	ldr	r3, [pc, #268]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_RCC_OscConfig+0x176>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d001      	beq.n	80010f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e1c0      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b3d      	ldr	r3, [pc, #244]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4939      	ldr	r1, [pc, #228]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001106:	e03a      	b.n	800117e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001110:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <HAL_RCC_OscConfig+0x270>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fc5b 	bl	80009d0 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111e:	f7ff fc57 	bl	80009d0 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e1a1      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4927      	ldr	r1, [pc, #156]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
 8001150:	e015      	b.n	800117e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001152:	4b26      	ldr	r3, [pc, #152]	@ (80011ec <HAL_RCC_OscConfig+0x270>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff fc3a 	bl	80009d0 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fc36 	bl	80009d0 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e180      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	2b00      	cmp	r3, #0
 8001188:	d03a      	beq.n	8001200 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d019      	beq.n	80011c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_RCC_OscConfig+0x274>)
 8001194:	2201      	movs	r2, #1
 8001196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fc1a 	bl	80009d0 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fc16 	bl	80009d0 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e160      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 face 	bl	8001760 <RCC_Delay>
 80011c4:	e01c      	b.n	8001200 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_RCC_OscConfig+0x274>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff fc00 	bl	80009d0 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d2:	e00f      	b.n	80011f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff fbfc 	bl	80009d0 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d908      	bls.n	80011f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e146      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	42420000 	.word	0x42420000
 80011f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f4:	4b92      	ldr	r3, [pc, #584]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e9      	bne.n	80011d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80a6 	beq.w	800135a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001212:	4b8b      	ldr	r3, [pc, #556]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10d      	bne.n	800123a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b88      	ldr	r3, [pc, #544]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a87      	ldr	r2, [pc, #540]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b85      	ldr	r3, [pc, #532]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001236:	2301      	movs	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123a:	4b82      	ldr	r3, [pc, #520]	@ (8001444 <HAL_RCC_OscConfig+0x4c8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001242:	2b00      	cmp	r3, #0
 8001244:	d118      	bne.n	8001278 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001246:	4b7f      	ldr	r3, [pc, #508]	@ (8001444 <HAL_RCC_OscConfig+0x4c8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7e      	ldr	r2, [pc, #504]	@ (8001444 <HAL_RCC_OscConfig+0x4c8>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001252:	f7ff fbbd 	bl	80009d0 <HAL_GetTick>
 8001256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125a:	f7ff fbb9 	bl	80009d0 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b64      	cmp	r3, #100	@ 0x64
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e103      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	4b75      	ldr	r3, [pc, #468]	@ (8001444 <HAL_RCC_OscConfig+0x4c8>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x312>
 8001280:	4b6f      	ldr	r3, [pc, #444]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4a6e      	ldr	r2, [pc, #440]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6213      	str	r3, [r2, #32]
 800128c:	e02d      	b.n	80012ea <HAL_RCC_OscConfig+0x36e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x334>
 8001296:	4b6a      	ldr	r3, [pc, #424]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	4a69      	ldr	r2, [pc, #420]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	6213      	str	r3, [r2, #32]
 80012a2:	4b67      	ldr	r3, [pc, #412]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	4a66      	ldr	r2, [pc, #408]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	f023 0304 	bic.w	r3, r3, #4
 80012ac:	6213      	str	r3, [r2, #32]
 80012ae:	e01c      	b.n	80012ea <HAL_RCC_OscConfig+0x36e>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d10c      	bne.n	80012d2 <HAL_RCC_OscConfig+0x356>
 80012b8:	4b61      	ldr	r3, [pc, #388]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a60      	ldr	r2, [pc, #384]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6213      	str	r3, [r2, #32]
 80012c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6213      	str	r3, [r2, #32]
 80012d0:	e00b      	b.n	80012ea <HAL_RCC_OscConfig+0x36e>
 80012d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012d4:	6a1b      	ldr	r3, [r3, #32]
 80012d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	f023 0301 	bic.w	r3, r3, #1
 80012dc:	6213      	str	r3, [r2, #32]
 80012de:	4b58      	ldr	r3, [pc, #352]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	6a1b      	ldr	r3, [r3, #32]
 80012e2:	4a57      	ldr	r2, [pc, #348]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	f023 0304 	bic.w	r3, r3, #4
 80012e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d015      	beq.n	800131e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fb6d 	bl	80009d0 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f8:	e00a      	b.n	8001310 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fa:	f7ff fb69 	bl	80009d0 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001308:	4293      	cmp	r3, r2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e0b1      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001310:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ee      	beq.n	80012fa <HAL_RCC_OscConfig+0x37e>
 800131c:	e014      	b.n	8001348 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fb57 	bl	80009d0 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff fb53 	bl	80009d0 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e09b      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ee      	bne.n	8001326 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d105      	bne.n	800135a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800134e:	4b3c      	ldr	r3, [pc, #240]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a3b      	ldr	r2, [pc, #236]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001358:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8087 	beq.w	8001472 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001364:	4b36      	ldr	r3, [pc, #216]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d061      	beq.n	8001434 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d146      	bne.n	8001406 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001378:	4b33      	ldr	r3, [pc, #204]	@ (8001448 <HAL_RCC_OscConfig+0x4cc>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fb27 	bl	80009d0 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fb23 	bl	80009d0 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e06d      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ac:	d108      	bne.n	80013c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ae:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	4921      	ldr	r1, [pc, #132]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a19      	ldr	r1, [r3, #32]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	430b      	orrs	r3, r1
 80013d2:	491b      	ldr	r1, [pc, #108]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_RCC_OscConfig+0x4cc>)
 80013da:	2201      	movs	r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff faf7 	bl	80009d0 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff faf3 	bl	80009d0 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e03d      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x46a>
 8001404:	e035      	b.n	8001472 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_RCC_OscConfig+0x4cc>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fae0 	bl	80009d0 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fadc 	bl	80009d0 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e026      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x498>
 8001432:	e01e      	b.n	8001472 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d107      	bne.n	800144c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e019      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
 8001440:	40021000 	.word	0x40021000
 8001444:	40007000 	.word	0x40007000
 8001448:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800144c:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <HAL_RCC_OscConfig+0x500>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	429a      	cmp	r2, r3
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40021000 	.word	0x40021000

08001480 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0d0      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d910      	bls.n	80014c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b67      	ldr	r3, [pc, #412]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 0207 	bic.w	r2, r3, #7
 80014aa:	4965      	ldr	r1, [pc, #404]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b63      	ldr	r3, [pc, #396]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0b8      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014dc:	4b59      	ldr	r3, [pc, #356]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a58      	ldr	r2, [pc, #352]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f4:	4b53      	ldr	r3, [pc, #332]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a52      	ldr	r2, [pc, #328]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001500:	4b50      	ldr	r3, [pc, #320]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	494d      	ldr	r1, [pc, #308]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d040      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d115      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07f      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e073      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	4b3d      	ldr	r3, [pc, #244]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06b      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155e:	4b39      	ldr	r3, [pc, #228]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f023 0203 	bic.w	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4936      	ldr	r1, [pc, #216]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff fa2e 	bl	80009d0 <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	e00a      	b.n	800158e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f7ff fa2a 	bl	80009d0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e053      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	4b2d      	ldr	r3, [pc, #180]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 020c 	and.w	r2, r3, #12
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	429a      	cmp	r2, r3
 800159e:	d1eb      	bne.n	8001578 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a0:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d210      	bcs.n	80015d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 0207 	bic.w	r2, r3, #7
 80015b6:	4922      	ldr	r1, [pc, #136]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e032      	b.n	8001636 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015dc:	4b19      	ldr	r3, [pc, #100]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4916      	ldr	r1, [pc, #88]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d009      	beq.n	800160e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	490e      	ldr	r1, [pc, #56]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800160e:	f000 f821 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 8001612:	4602      	mov	r2, r0
 8001614:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	490a      	ldr	r1, [pc, #40]	@ (8001648 <HAL_RCC_ClockConfig+0x1c8>)
 8001620:	5ccb      	ldrb	r3, [r1, r3]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_RCC_ClockConfig+0x1cc>)
 8001628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800162a:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <HAL_RCC_ClockConfig+0x1d0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff f98c 	bl	800094c <HAL_InitTick>

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40022000 	.word	0x40022000
 8001644:	40021000 	.word	0x40021000
 8001648:	080026b4 	.word	0x080026b4
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004

08001654 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800166e:	4b1e      	ldr	r3, [pc, #120]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b04      	cmp	r3, #4
 800167c:	d002      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x30>
 800167e:	2b08      	cmp	r3, #8
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x36>
 8001682:	e027      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001684:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x98>)
 8001686:	613b      	str	r3, [r7, #16]
      break;
 8001688:	e027      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	0c9b      	lsrs	r3, r3, #18
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001694:	5cd3      	ldrb	r3, [r2, r3]
 8001696:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d010      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016a2:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	0c5b      	lsrs	r3, r3, #17
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x98>)
 80016b6:	fb03 f202 	mul.w	r2, r3, r2
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e004      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a0c      	ldr	r2, [pc, #48]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	613b      	str	r3, [r7, #16]
      break;
 80016d2:	e002      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x98>)
 80016d6:	613b      	str	r3, [r7, #16]
      break;
 80016d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016da:	693b      	ldr	r3, [r7, #16]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	007a1200 	.word	0x007a1200
 80016f0:	080026cc 	.word	0x080026cc
 80016f4:	080026dc 	.word	0x080026dc
 80016f8:	003d0900 	.word	0x003d0900

080016fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001700:	4b02      	ldr	r3, [pc, #8]	@ (800170c <HAL_RCC_GetHCLKFreq+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001714:	f7ff fff2 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	0a1b      	lsrs	r3, r3, #8
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4903      	ldr	r1, [pc, #12]	@ (8001734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	080026c4 	.word	0x080026c4

08001738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800173c:	f7ff ffde 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	0adb      	lsrs	r3, r3, #11
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4903      	ldr	r1, [pc, #12]	@ (800175c <HAL_RCC_GetPCLK2Freq+0x24>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	080026c4 	.word	0x080026c4

08001760 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001768:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <RCC_Delay+0x34>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <RCC_Delay+0x38>)
 800176e:	fba2 2303 	umull	r2, r3, r2, r3
 8001772:	0a5b      	lsrs	r3, r3, #9
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	fb02 f303 	mul.w	r3, r2, r3
 800177a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800177c:	bf00      	nop
  }
  while (Delay --);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	60fa      	str	r2, [r7, #12]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1f9      	bne.n	800177c <RCC_Delay+0x1c>
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	20000000 	.word	0x20000000
 8001798:	10624dd3 	.word	0x10624dd3

0800179c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e042      	b.n	8001834 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7fe ff6e 	bl	80006a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2224      	movs	r2, #36	@ 0x24
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 fa09 	bl	8001bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80017f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001804:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001814:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	@ 0x28
 8001840:	af02      	add	r7, sp, #8
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	4613      	mov	r3, r2
 800184a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b20      	cmp	r3, #32
 800185a:	d175      	bne.n	8001948 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_UART_Transmit+0x2c>
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e06e      	b.n	800194a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2221      	movs	r2, #33	@ 0x21
 8001876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800187a:	f7ff f8a9 	bl	80009d0 <HAL_GetTick>
 800187e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	88fa      	ldrh	r2, [r7, #6]
 8001884:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	88fa      	ldrh	r2, [r7, #6]
 800188a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001894:	d108      	bne.n	80018a8 <HAL_UART_Transmit+0x6c>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d104      	bne.n	80018a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e003      	b.n	80018b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018b0:	e02e      	b.n	8001910 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2200      	movs	r2, #0
 80018ba:	2180      	movs	r1, #128	@ 0x80
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f8df 	bl	8001a80 <UART_WaitOnFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2220      	movs	r2, #32
 80018cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e03a      	b.n	800194a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10b      	bne.n	80018f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3302      	adds	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	e007      	b.n	8001902 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	3301      	adds	r3, #1
 8001900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001906:	b29b      	uxth	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001914:	b29b      	uxth	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1cb      	bne.n	80018b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2200      	movs	r2, #0
 8001922:	2140      	movs	r1, #64	@ 0x40
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f8ab 	bl	8001a80 <UART_WaitOnFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e006      	b.n	800194a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2220      	movs	r2, #32
 8001940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3720      	adds	r7, #32
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b08a      	sub	sp, #40	@ 0x28
 8001956:	af02      	add	r7, sp, #8
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4613      	mov	r3, r2
 8001960:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b20      	cmp	r3, #32
 8001970:	f040 8081 	bne.w	8001a76 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_UART_Receive+0x2e>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e079      	b.n	8001a78 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2222      	movs	r2, #34	@ 0x22
 800198e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001998:	f7ff f81a 	bl	80009d0 <HAL_GetTick>
 800199c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019b2:	d108      	bne.n	80019c6 <HAL_UART_Receive+0x74>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d104      	bne.n	80019c6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	e003      	b.n	80019ce <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80019ce:	e047      	b.n	8001a60 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2200      	movs	r2, #0
 80019d8:	2120      	movs	r1, #32
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 f850 	bl	8001a80 <UART_WaitOnFlagUntilTimeout>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2220      	movs	r2, #32
 80019ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e042      	b.n	8001a78 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10c      	bne.n	8001a12 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	e01f      	b.n	8001a52 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a1a:	d007      	beq.n	8001a2c <HAL_UART_Receive+0xda>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <HAL_UART_Receive+0xe8>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d106      	bne.n	8001a3a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e008      	b.n	8001a4c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1b2      	bne.n	80019d0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001a76:	2302      	movs	r3, #2
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3720      	adds	r7, #32
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a90:	e03b      	b.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d037      	beq.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a9a:	f7fe ff99 	bl	80009d0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	6a3a      	ldr	r2, [r7, #32]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d302      	bcc.n	8001ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e03a      	b.n	8001b2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d023      	beq.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b80      	cmp	r3, #128	@ 0x80
 8001ac6:	d020      	beq.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b40      	cmp	r3, #64	@ 0x40
 8001acc:	d01d      	beq.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0308 	and.w	r3, r3, #8
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d116      	bne.n	8001b0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f81d 	bl	8001b32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2208      	movs	r2, #8
 8001afc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4013      	ands	r3, r2
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d0b4      	beq.n	8001a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b095      	sub	sp, #84	@ 0x54
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	330c      	adds	r3, #12
 8001b40:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b44:	e853 3f00 	ldrex	r3, [r3]
 8001b48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	330c      	adds	r3, #12
 8001b58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001b60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b62:	e841 2300 	strex	r3, r2, [r1]
 8001b66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1e5      	bne.n	8001b3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3314      	adds	r3, #20
 8001b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	e853 3f00 	ldrex	r3, [r3]
 8001b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3314      	adds	r3, #20
 8001b8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b96:	e841 2300 	strex	r3, r2, [r1]
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1e5      	bne.n	8001b6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d119      	bne.n	8001bde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	330c      	adds	r3, #12
 8001bb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	e853 3f00 	ldrex	r3, [r3]
 8001bb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	f023 0310 	bic.w	r3, r3, #16
 8001bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	330c      	adds	r3, #12
 8001bc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bca:	61ba      	str	r2, [r7, #24]
 8001bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bce:	6979      	ldr	r1, [r7, #20]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	e841 2300 	strex	r3, r2, [r1]
 8001bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1e5      	bne.n	8001baa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001bec:	bf00      	nop
 8001bee:	3754      	adds	r7, #84	@ 0x54
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
	...

08001bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001c32:	f023 030c 	bic.w	r3, r3, #12
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d0c <UART_SetConfig+0x114>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d103      	bne.n	8001c68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c60:	f7ff fd6a 	bl	8001738 <HAL_RCC_GetPCLK2Freq>
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	e002      	b.n	8001c6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c68:	f7ff fd52 	bl	8001710 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	009a      	lsls	r2, r3, #2
 8001c78:	441a      	add	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	4a22      	ldr	r2, [pc, #136]	@ (8001d10 <UART_SetConfig+0x118>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	095b      	lsrs	r3, r3, #5
 8001c8c:	0119      	lsls	r1, r3, #4
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	009a      	lsls	r2, r3, #2
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d10 <UART_SetConfig+0x118>)
 8001ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2064      	movs	r0, #100	@ 0x64
 8001cae:	fb00 f303 	mul.w	r3, r0, r3
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	3332      	adds	r3, #50	@ 0x32
 8001cb8:	4a15      	ldr	r2, [pc, #84]	@ (8001d10 <UART_SetConfig+0x118>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc4:	4419      	add	r1, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4413      	add	r3, r2
 8001cce:	009a      	lsls	r2, r3, #2
 8001cd0:	441a      	add	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <UART_SetConfig+0x118>)
 8001cde:	fba3 0302 	umull	r0, r3, r3, r2
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2064      	movs	r0, #100	@ 0x64
 8001ce6:	fb00 f303 	mul.w	r3, r0, r3
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	3332      	adds	r3, #50	@ 0x32
 8001cf0:	4a07      	ldr	r2, [pc, #28]	@ (8001d10 <UART_SetConfig+0x118>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	440a      	add	r2, r1
 8001d02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40013800 	.word	0x40013800
 8001d10:	51eb851f 	.word	0x51eb851f

08001d14 <std>:
 8001d14:	2300      	movs	r3, #0
 8001d16:	b510      	push	{r4, lr}
 8001d18:	4604      	mov	r4, r0
 8001d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8001d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d22:	6083      	str	r3, [r0, #8]
 8001d24:	8181      	strh	r1, [r0, #12]
 8001d26:	6643      	str	r3, [r0, #100]	@ 0x64
 8001d28:	81c2      	strh	r2, [r0, #14]
 8001d2a:	6183      	str	r3, [r0, #24]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	2208      	movs	r2, #8
 8001d30:	305c      	adds	r0, #92	@ 0x5c
 8001d32:	f000 f9e7 	bl	8002104 <memset>
 8001d36:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <std+0x58>)
 8001d38:	6224      	str	r4, [r4, #32]
 8001d3a:	6263      	str	r3, [r4, #36]	@ 0x24
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <std+0x5c>)
 8001d3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <std+0x60>)
 8001d42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <std+0x64>)
 8001d46:	6323      	str	r3, [r4, #48]	@ 0x30
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <std+0x68>)
 8001d4a:	429c      	cmp	r4, r3
 8001d4c:	d006      	beq.n	8001d5c <std+0x48>
 8001d4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001d52:	4294      	cmp	r4, r2
 8001d54:	d002      	beq.n	8001d5c <std+0x48>
 8001d56:	33d0      	adds	r3, #208	@ 0xd0
 8001d58:	429c      	cmp	r4, r3
 8001d5a:	d105      	bne.n	8001d68 <std+0x54>
 8001d5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d64:	f000 ba46 	b.w	80021f4 <__retarget_lock_init_recursive>
 8001d68:	bd10      	pop	{r4, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08001f55 	.word	0x08001f55
 8001d70:	08001f77 	.word	0x08001f77
 8001d74:	08001faf 	.word	0x08001faf
 8001d78:	08001fd3 	.word	0x08001fd3
 8001d7c:	200000d4 	.word	0x200000d4

08001d80 <stdio_exit_handler>:
 8001d80:	4a02      	ldr	r2, [pc, #8]	@ (8001d8c <stdio_exit_handler+0xc>)
 8001d82:	4903      	ldr	r1, [pc, #12]	@ (8001d90 <stdio_exit_handler+0x10>)
 8001d84:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <stdio_exit_handler+0x14>)
 8001d86:	f000 b869 	b.w	8001e5c <_fwalk_sglue>
 8001d8a:	bf00      	nop
 8001d8c:	2000000c 	.word	0x2000000c
 8001d90:	080024e9 	.word	0x080024e9
 8001d94:	2000001c 	.word	0x2000001c

08001d98 <cleanup_stdio>:
 8001d98:	6841      	ldr	r1, [r0, #4]
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <cleanup_stdio+0x34>)
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4299      	cmp	r1, r3
 8001da0:	4604      	mov	r4, r0
 8001da2:	d001      	beq.n	8001da8 <cleanup_stdio+0x10>
 8001da4:	f000 fba0 	bl	80024e8 <_fflush_r>
 8001da8:	68a1      	ldr	r1, [r4, #8]
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <cleanup_stdio+0x38>)
 8001dac:	4299      	cmp	r1, r3
 8001dae:	d002      	beq.n	8001db6 <cleanup_stdio+0x1e>
 8001db0:	4620      	mov	r0, r4
 8001db2:	f000 fb99 	bl	80024e8 <_fflush_r>
 8001db6:	68e1      	ldr	r1, [r4, #12]
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <cleanup_stdio+0x3c>)
 8001dba:	4299      	cmp	r1, r3
 8001dbc:	d004      	beq.n	8001dc8 <cleanup_stdio+0x30>
 8001dbe:	4620      	mov	r0, r4
 8001dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dc4:	f000 bb90 	b.w	80024e8 <_fflush_r>
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	bf00      	nop
 8001dcc:	200000d4 	.word	0x200000d4
 8001dd0:	2000013c 	.word	0x2000013c
 8001dd4:	200001a4 	.word	0x200001a4

08001dd8 <global_stdio_init.part.0>:
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <global_stdio_init.part.0+0x30>)
 8001ddc:	4c0b      	ldr	r4, [pc, #44]	@ (8001e0c <global_stdio_init.part.0+0x34>)
 8001dde:	4a0c      	ldr	r2, [pc, #48]	@ (8001e10 <global_stdio_init.part.0+0x38>)
 8001de0:	4620      	mov	r0, r4
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	2104      	movs	r1, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	f7ff ff94 	bl	8001d14 <std>
 8001dec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001df0:	2201      	movs	r2, #1
 8001df2:	2109      	movs	r1, #9
 8001df4:	f7ff ff8e 	bl	8001d14 <std>
 8001df8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e02:	2112      	movs	r1, #18
 8001e04:	f7ff bf86 	b.w	8001d14 <std>
 8001e08:	2000020c 	.word	0x2000020c
 8001e0c:	200000d4 	.word	0x200000d4
 8001e10:	08001d81 	.word	0x08001d81

08001e14 <__sfp_lock_acquire>:
 8001e14:	4801      	ldr	r0, [pc, #4]	@ (8001e1c <__sfp_lock_acquire+0x8>)
 8001e16:	f000 b9ee 	b.w	80021f6 <__retarget_lock_acquire_recursive>
 8001e1a:	bf00      	nop
 8001e1c:	20000215 	.word	0x20000215

08001e20 <__sfp_lock_release>:
 8001e20:	4801      	ldr	r0, [pc, #4]	@ (8001e28 <__sfp_lock_release+0x8>)
 8001e22:	f000 b9e9 	b.w	80021f8 <__retarget_lock_release_recursive>
 8001e26:	bf00      	nop
 8001e28:	20000215 	.word	0x20000215

08001e2c <__sinit>:
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4604      	mov	r4, r0
 8001e30:	f7ff fff0 	bl	8001e14 <__sfp_lock_acquire>
 8001e34:	6a23      	ldr	r3, [r4, #32]
 8001e36:	b11b      	cbz	r3, 8001e40 <__sinit+0x14>
 8001e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e3c:	f7ff bff0 	b.w	8001e20 <__sfp_lock_release>
 8001e40:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <__sinit+0x28>)
 8001e42:	6223      	str	r3, [r4, #32]
 8001e44:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <__sinit+0x2c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f5      	bne.n	8001e38 <__sinit+0xc>
 8001e4c:	f7ff ffc4 	bl	8001dd8 <global_stdio_init.part.0>
 8001e50:	e7f2      	b.n	8001e38 <__sinit+0xc>
 8001e52:	bf00      	nop
 8001e54:	08001d99 	.word	0x08001d99
 8001e58:	2000020c 	.word	0x2000020c

08001e5c <_fwalk_sglue>:
 8001e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e60:	4607      	mov	r7, r0
 8001e62:	4688      	mov	r8, r1
 8001e64:	4614      	mov	r4, r2
 8001e66:	2600      	movs	r6, #0
 8001e68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001e6c:	f1b9 0901 	subs.w	r9, r9, #1
 8001e70:	d505      	bpl.n	8001e7e <_fwalk_sglue+0x22>
 8001e72:	6824      	ldr	r4, [r4, #0]
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	d1f7      	bne.n	8001e68 <_fwalk_sglue+0xc>
 8001e78:	4630      	mov	r0, r6
 8001e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e7e:	89ab      	ldrh	r3, [r5, #12]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d907      	bls.n	8001e94 <_fwalk_sglue+0x38>
 8001e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	d003      	beq.n	8001e94 <_fwalk_sglue+0x38>
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	4638      	mov	r0, r7
 8001e90:	47c0      	blx	r8
 8001e92:	4306      	orrs	r6, r0
 8001e94:	3568      	adds	r5, #104	@ 0x68
 8001e96:	e7e9      	b.n	8001e6c <_fwalk_sglue+0x10>

08001e98 <_puts_r>:
 8001e98:	6a03      	ldr	r3, [r0, #32]
 8001e9a:	b570      	push	{r4, r5, r6, lr}
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	460e      	mov	r6, r1
 8001ea0:	6884      	ldr	r4, [r0, #8]
 8001ea2:	b90b      	cbnz	r3, 8001ea8 <_puts_r+0x10>
 8001ea4:	f7ff ffc2 	bl	8001e2c <__sinit>
 8001ea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001eaa:	07db      	lsls	r3, r3, #31
 8001eac:	d405      	bmi.n	8001eba <_puts_r+0x22>
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	0598      	lsls	r0, r3, #22
 8001eb2:	d402      	bmi.n	8001eba <_puts_r+0x22>
 8001eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001eb6:	f000 f99e 	bl	80021f6 <__retarget_lock_acquire_recursive>
 8001eba:	89a3      	ldrh	r3, [r4, #12]
 8001ebc:	0719      	lsls	r1, r3, #28
 8001ebe:	d502      	bpl.n	8001ec6 <_puts_r+0x2e>
 8001ec0:	6923      	ldr	r3, [r4, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d135      	bne.n	8001f32 <_puts_r+0x9a>
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f000 f8c5 	bl	8002058 <__swsetup_r>
 8001ece:	b380      	cbz	r0, 8001f32 <_puts_r+0x9a>
 8001ed0:	f04f 35ff 	mov.w	r5, #4294967295
 8001ed4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001ed6:	07da      	lsls	r2, r3, #31
 8001ed8:	d405      	bmi.n	8001ee6 <_puts_r+0x4e>
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	059b      	lsls	r3, r3, #22
 8001ede:	d402      	bmi.n	8001ee6 <_puts_r+0x4e>
 8001ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ee2:	f000 f989 	bl	80021f8 <__retarget_lock_release_recursive>
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	bd70      	pop	{r4, r5, r6, pc}
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da04      	bge.n	8001ef8 <_puts_r+0x60>
 8001eee:	69a2      	ldr	r2, [r4, #24]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dc17      	bgt.n	8001f24 <_puts_r+0x8c>
 8001ef4:	290a      	cmp	r1, #10
 8001ef6:	d015      	beq.n	8001f24 <_puts_r+0x8c>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	6022      	str	r2, [r4, #0]
 8001efe:	7019      	strb	r1, [r3, #0]
 8001f00:	68a3      	ldr	r3, [r4, #8]
 8001f02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001f06:	3b01      	subs	r3, #1
 8001f08:	60a3      	str	r3, [r4, #8]
 8001f0a:	2900      	cmp	r1, #0
 8001f0c:	d1ed      	bne.n	8001eea <_puts_r+0x52>
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da11      	bge.n	8001f36 <_puts_r+0x9e>
 8001f12:	4622      	mov	r2, r4
 8001f14:	210a      	movs	r1, #10
 8001f16:	4628      	mov	r0, r5
 8001f18:	f000 f85f 	bl	8001fda <__swbuf_r>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d0d7      	beq.n	8001ed0 <_puts_r+0x38>
 8001f20:	250a      	movs	r5, #10
 8001f22:	e7d7      	b.n	8001ed4 <_puts_r+0x3c>
 8001f24:	4622      	mov	r2, r4
 8001f26:	4628      	mov	r0, r5
 8001f28:	f000 f857 	bl	8001fda <__swbuf_r>
 8001f2c:	3001      	adds	r0, #1
 8001f2e:	d1e7      	bne.n	8001f00 <_puts_r+0x68>
 8001f30:	e7ce      	b.n	8001ed0 <_puts_r+0x38>
 8001f32:	3e01      	subs	r6, #1
 8001f34:	e7e4      	b.n	8001f00 <_puts_r+0x68>
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	6022      	str	r2, [r4, #0]
 8001f3c:	220a      	movs	r2, #10
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e7ee      	b.n	8001f20 <_puts_r+0x88>
	...

08001f44 <puts>:
 8001f44:	4b02      	ldr	r3, [pc, #8]	@ (8001f50 <puts+0xc>)
 8001f46:	4601      	mov	r1, r0
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	f7ff bfa5 	b.w	8001e98 <_puts_r>
 8001f4e:	bf00      	nop
 8001f50:	20000018 	.word	0x20000018

08001f54 <__sread>:
 8001f54:	b510      	push	{r4, lr}
 8001f56:	460c      	mov	r4, r1
 8001f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f5c:	f000 f8fc 	bl	8002158 <_read_r>
 8001f60:	2800      	cmp	r0, #0
 8001f62:	bfab      	itete	ge
 8001f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001f66:	89a3      	ldrhlt	r3, [r4, #12]
 8001f68:	181b      	addge	r3, r3, r0
 8001f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001f6e:	bfac      	ite	ge
 8001f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001f72:	81a3      	strhlt	r3, [r4, #12]
 8001f74:	bd10      	pop	{r4, pc}

08001f76 <__swrite>:
 8001f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f7a:	461f      	mov	r7, r3
 8001f7c:	898b      	ldrh	r3, [r1, #12]
 8001f7e:	4605      	mov	r5, r0
 8001f80:	05db      	lsls	r3, r3, #23
 8001f82:	460c      	mov	r4, r1
 8001f84:	4616      	mov	r6, r2
 8001f86:	d505      	bpl.n	8001f94 <__swrite+0x1e>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f90:	f000 f8d0 	bl	8002134 <_lseek_r>
 8001f94:	89a3      	ldrh	r3, [r4, #12]
 8001f96:	4632      	mov	r2, r6
 8001f98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f9c:	81a3      	strh	r3, [r4, #12]
 8001f9e:	4628      	mov	r0, r5
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001faa:	f000 b8e7 	b.w	800217c <_write_r>

08001fae <__sseek>:
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb6:	f000 f8bd 	bl	8002134 <_lseek_r>
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	89a3      	ldrh	r3, [r4, #12]
 8001fbe:	bf15      	itete	ne
 8001fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001fca:	81a3      	strheq	r3, [r4, #12]
 8001fcc:	bf18      	it	ne
 8001fce:	81a3      	strhne	r3, [r4, #12]
 8001fd0:	bd10      	pop	{r4, pc}

08001fd2 <__sclose>:
 8001fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fd6:	f000 b89d 	b.w	8002114 <_close_r>

08001fda <__swbuf_r>:
 8001fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fdc:	460e      	mov	r6, r1
 8001fde:	4614      	mov	r4, r2
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	b118      	cbz	r0, 8001fec <__swbuf_r+0x12>
 8001fe4:	6a03      	ldr	r3, [r0, #32]
 8001fe6:	b90b      	cbnz	r3, 8001fec <__swbuf_r+0x12>
 8001fe8:	f7ff ff20 	bl	8001e2c <__sinit>
 8001fec:	69a3      	ldr	r3, [r4, #24]
 8001fee:	60a3      	str	r3, [r4, #8]
 8001ff0:	89a3      	ldrh	r3, [r4, #12]
 8001ff2:	071a      	lsls	r2, r3, #28
 8001ff4:	d501      	bpl.n	8001ffa <__swbuf_r+0x20>
 8001ff6:	6923      	ldr	r3, [r4, #16]
 8001ff8:	b943      	cbnz	r3, 800200c <__swbuf_r+0x32>
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	f000 f82b 	bl	8002058 <__swsetup_r>
 8002002:	b118      	cbz	r0, 800200c <__swbuf_r+0x32>
 8002004:	f04f 37ff 	mov.w	r7, #4294967295
 8002008:	4638      	mov	r0, r7
 800200a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	6922      	ldr	r2, [r4, #16]
 8002010:	b2f6      	uxtb	r6, r6
 8002012:	1a98      	subs	r0, r3, r2
 8002014:	6963      	ldr	r3, [r4, #20]
 8002016:	4637      	mov	r7, r6
 8002018:	4283      	cmp	r3, r0
 800201a:	dc05      	bgt.n	8002028 <__swbuf_r+0x4e>
 800201c:	4621      	mov	r1, r4
 800201e:	4628      	mov	r0, r5
 8002020:	f000 fa62 	bl	80024e8 <_fflush_r>
 8002024:	2800      	cmp	r0, #0
 8002026:	d1ed      	bne.n	8002004 <__swbuf_r+0x2a>
 8002028:	68a3      	ldr	r3, [r4, #8]
 800202a:	3b01      	subs	r3, #1
 800202c:	60a3      	str	r3, [r4, #8]
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	6022      	str	r2, [r4, #0]
 8002034:	701e      	strb	r6, [r3, #0]
 8002036:	6962      	ldr	r2, [r4, #20]
 8002038:	1c43      	adds	r3, r0, #1
 800203a:	429a      	cmp	r2, r3
 800203c:	d004      	beq.n	8002048 <__swbuf_r+0x6e>
 800203e:	89a3      	ldrh	r3, [r4, #12]
 8002040:	07db      	lsls	r3, r3, #31
 8002042:	d5e1      	bpl.n	8002008 <__swbuf_r+0x2e>
 8002044:	2e0a      	cmp	r6, #10
 8002046:	d1df      	bne.n	8002008 <__swbuf_r+0x2e>
 8002048:	4621      	mov	r1, r4
 800204a:	4628      	mov	r0, r5
 800204c:	f000 fa4c 	bl	80024e8 <_fflush_r>
 8002050:	2800      	cmp	r0, #0
 8002052:	d0d9      	beq.n	8002008 <__swbuf_r+0x2e>
 8002054:	e7d6      	b.n	8002004 <__swbuf_r+0x2a>
	...

08002058 <__swsetup_r>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4b29      	ldr	r3, [pc, #164]	@ (8002100 <__swsetup_r+0xa8>)
 800205c:	4605      	mov	r5, r0
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	460c      	mov	r4, r1
 8002062:	b118      	cbz	r0, 800206c <__swsetup_r+0x14>
 8002064:	6a03      	ldr	r3, [r0, #32]
 8002066:	b90b      	cbnz	r3, 800206c <__swsetup_r+0x14>
 8002068:	f7ff fee0 	bl	8001e2c <__sinit>
 800206c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002070:	0719      	lsls	r1, r3, #28
 8002072:	d422      	bmi.n	80020ba <__swsetup_r+0x62>
 8002074:	06da      	lsls	r2, r3, #27
 8002076:	d407      	bmi.n	8002088 <__swsetup_r+0x30>
 8002078:	2209      	movs	r2, #9
 800207a:	602a      	str	r2, [r5, #0]
 800207c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	81a3      	strh	r3, [r4, #12]
 8002086:	e033      	b.n	80020f0 <__swsetup_r+0x98>
 8002088:	0758      	lsls	r0, r3, #29
 800208a:	d512      	bpl.n	80020b2 <__swsetup_r+0x5a>
 800208c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800208e:	b141      	cbz	r1, 80020a2 <__swsetup_r+0x4a>
 8002090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002094:	4299      	cmp	r1, r3
 8002096:	d002      	beq.n	800209e <__swsetup_r+0x46>
 8002098:	4628      	mov	r0, r5
 800209a:	f000 f8af 	bl	80021fc <_free_r>
 800209e:	2300      	movs	r3, #0
 80020a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80020a2:	89a3      	ldrh	r3, [r4, #12]
 80020a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80020a8:	81a3      	strh	r3, [r4, #12]
 80020aa:	2300      	movs	r3, #0
 80020ac:	6063      	str	r3, [r4, #4]
 80020ae:	6923      	ldr	r3, [r4, #16]
 80020b0:	6023      	str	r3, [r4, #0]
 80020b2:	89a3      	ldrh	r3, [r4, #12]
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	81a3      	strh	r3, [r4, #12]
 80020ba:	6923      	ldr	r3, [r4, #16]
 80020bc:	b94b      	cbnz	r3, 80020d2 <__swsetup_r+0x7a>
 80020be:	89a3      	ldrh	r3, [r4, #12]
 80020c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80020c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020c8:	d003      	beq.n	80020d2 <__swsetup_r+0x7a>
 80020ca:	4621      	mov	r1, r4
 80020cc:	4628      	mov	r0, r5
 80020ce:	f000 fa58 	bl	8002582 <__smakebuf_r>
 80020d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020d6:	f013 0201 	ands.w	r2, r3, #1
 80020da:	d00a      	beq.n	80020f2 <__swsetup_r+0x9a>
 80020dc:	2200      	movs	r2, #0
 80020de:	60a2      	str	r2, [r4, #8]
 80020e0:	6962      	ldr	r2, [r4, #20]
 80020e2:	4252      	negs	r2, r2
 80020e4:	61a2      	str	r2, [r4, #24]
 80020e6:	6922      	ldr	r2, [r4, #16]
 80020e8:	b942      	cbnz	r2, 80020fc <__swsetup_r+0xa4>
 80020ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80020ee:	d1c5      	bne.n	800207c <__swsetup_r+0x24>
 80020f0:	bd38      	pop	{r3, r4, r5, pc}
 80020f2:	0799      	lsls	r1, r3, #30
 80020f4:	bf58      	it	pl
 80020f6:	6962      	ldrpl	r2, [r4, #20]
 80020f8:	60a2      	str	r2, [r4, #8]
 80020fa:	e7f4      	b.n	80020e6 <__swsetup_r+0x8e>
 80020fc:	2000      	movs	r0, #0
 80020fe:	e7f7      	b.n	80020f0 <__swsetup_r+0x98>
 8002100:	20000018 	.word	0x20000018

08002104 <memset>:
 8002104:	4603      	mov	r3, r0
 8002106:	4402      	add	r2, r0
 8002108:	4293      	cmp	r3, r2
 800210a:	d100      	bne.n	800210e <memset+0xa>
 800210c:	4770      	bx	lr
 800210e:	f803 1b01 	strb.w	r1, [r3], #1
 8002112:	e7f9      	b.n	8002108 <memset+0x4>

08002114 <_close_r>:
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	2300      	movs	r3, #0
 8002118:	4d05      	ldr	r5, [pc, #20]	@ (8002130 <_close_r+0x1c>)
 800211a:	4604      	mov	r4, r0
 800211c:	4608      	mov	r0, r1
 800211e:	602b      	str	r3, [r5, #0]
 8002120:	f7fe fb6b 	bl	80007fa <_close>
 8002124:	1c43      	adds	r3, r0, #1
 8002126:	d102      	bne.n	800212e <_close_r+0x1a>
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	b103      	cbz	r3, 800212e <_close_r+0x1a>
 800212c:	6023      	str	r3, [r4, #0]
 800212e:	bd38      	pop	{r3, r4, r5, pc}
 8002130:	20000210 	.word	0x20000210

08002134 <_lseek_r>:
 8002134:	b538      	push	{r3, r4, r5, lr}
 8002136:	4604      	mov	r4, r0
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	2200      	movs	r2, #0
 800213e:	4d05      	ldr	r5, [pc, #20]	@ (8002154 <_lseek_r+0x20>)
 8002140:	602a      	str	r2, [r5, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	f7fe fb7d 	bl	8000842 <_lseek>
 8002148:	1c43      	adds	r3, r0, #1
 800214a:	d102      	bne.n	8002152 <_lseek_r+0x1e>
 800214c:	682b      	ldr	r3, [r5, #0]
 800214e:	b103      	cbz	r3, 8002152 <_lseek_r+0x1e>
 8002150:	6023      	str	r3, [r4, #0]
 8002152:	bd38      	pop	{r3, r4, r5, pc}
 8002154:	20000210 	.word	0x20000210

08002158 <_read_r>:
 8002158:	b538      	push	{r3, r4, r5, lr}
 800215a:	4604      	mov	r4, r0
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	2200      	movs	r2, #0
 8002162:	4d05      	ldr	r5, [pc, #20]	@ (8002178 <_read_r+0x20>)
 8002164:	602a      	str	r2, [r5, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	f7fe fb0e 	bl	8000788 <_read>
 800216c:	1c43      	adds	r3, r0, #1
 800216e:	d102      	bne.n	8002176 <_read_r+0x1e>
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	b103      	cbz	r3, 8002176 <_read_r+0x1e>
 8002174:	6023      	str	r3, [r4, #0]
 8002176:	bd38      	pop	{r3, r4, r5, pc}
 8002178:	20000210 	.word	0x20000210

0800217c <_write_r>:
 800217c:	b538      	push	{r3, r4, r5, lr}
 800217e:	4604      	mov	r4, r0
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	2200      	movs	r2, #0
 8002186:	4d05      	ldr	r5, [pc, #20]	@ (800219c <_write_r+0x20>)
 8002188:	602a      	str	r2, [r5, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	f7fe fb19 	bl	80007c2 <_write>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d102      	bne.n	800219a <_write_r+0x1e>
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	b103      	cbz	r3, 800219a <_write_r+0x1e>
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	bd38      	pop	{r3, r4, r5, pc}
 800219c:	20000210 	.word	0x20000210

080021a0 <__errno>:
 80021a0:	4b01      	ldr	r3, [pc, #4]	@ (80021a8 <__errno+0x8>)
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000018 	.word	0x20000018

080021ac <__libc_init_array>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	2600      	movs	r6, #0
 80021b0:	4d0c      	ldr	r5, [pc, #48]	@ (80021e4 <__libc_init_array+0x38>)
 80021b2:	4c0d      	ldr	r4, [pc, #52]	@ (80021e8 <__libc_init_array+0x3c>)
 80021b4:	1b64      	subs	r4, r4, r5
 80021b6:	10a4      	asrs	r4, r4, #2
 80021b8:	42a6      	cmp	r6, r4
 80021ba:	d109      	bne.n	80021d0 <__libc_init_array+0x24>
 80021bc:	f000 fa50 	bl	8002660 <_init>
 80021c0:	2600      	movs	r6, #0
 80021c2:	4d0a      	ldr	r5, [pc, #40]	@ (80021ec <__libc_init_array+0x40>)
 80021c4:	4c0a      	ldr	r4, [pc, #40]	@ (80021f0 <__libc_init_array+0x44>)
 80021c6:	1b64      	subs	r4, r4, r5
 80021c8:	10a4      	asrs	r4, r4, #2
 80021ca:	42a6      	cmp	r6, r4
 80021cc:	d105      	bne.n	80021da <__libc_init_array+0x2e>
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d4:	4798      	blx	r3
 80021d6:	3601      	adds	r6, #1
 80021d8:	e7ee      	b.n	80021b8 <__libc_init_array+0xc>
 80021da:	f855 3b04 	ldr.w	r3, [r5], #4
 80021de:	4798      	blx	r3
 80021e0:	3601      	adds	r6, #1
 80021e2:	e7f2      	b.n	80021ca <__libc_init_array+0x1e>
 80021e4:	080026e0 	.word	0x080026e0
 80021e8:	080026e0 	.word	0x080026e0
 80021ec:	080026e0 	.word	0x080026e0
 80021f0:	080026e4 	.word	0x080026e4

080021f4 <__retarget_lock_init_recursive>:
 80021f4:	4770      	bx	lr

080021f6 <__retarget_lock_acquire_recursive>:
 80021f6:	4770      	bx	lr

080021f8 <__retarget_lock_release_recursive>:
 80021f8:	4770      	bx	lr
	...

080021fc <_free_r>:
 80021fc:	b538      	push	{r3, r4, r5, lr}
 80021fe:	4605      	mov	r5, r0
 8002200:	2900      	cmp	r1, #0
 8002202:	d040      	beq.n	8002286 <_free_r+0x8a>
 8002204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002208:	1f0c      	subs	r4, r1, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	bfb8      	it	lt
 800220e:	18e4      	addlt	r4, r4, r3
 8002210:	f000 f8de 	bl	80023d0 <__malloc_lock>
 8002214:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <_free_r+0x8c>)
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	b933      	cbnz	r3, 8002228 <_free_r+0x2c>
 800221a:	6063      	str	r3, [r4, #4]
 800221c:	6014      	str	r4, [r2, #0]
 800221e:	4628      	mov	r0, r5
 8002220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002224:	f000 b8da 	b.w	80023dc <__malloc_unlock>
 8002228:	42a3      	cmp	r3, r4
 800222a:	d908      	bls.n	800223e <_free_r+0x42>
 800222c:	6820      	ldr	r0, [r4, #0]
 800222e:	1821      	adds	r1, r4, r0
 8002230:	428b      	cmp	r3, r1
 8002232:	bf01      	itttt	eq
 8002234:	6819      	ldreq	r1, [r3, #0]
 8002236:	685b      	ldreq	r3, [r3, #4]
 8002238:	1809      	addeq	r1, r1, r0
 800223a:	6021      	streq	r1, [r4, #0]
 800223c:	e7ed      	b.n	800221a <_free_r+0x1e>
 800223e:	461a      	mov	r2, r3
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	b10b      	cbz	r3, 8002248 <_free_r+0x4c>
 8002244:	42a3      	cmp	r3, r4
 8002246:	d9fa      	bls.n	800223e <_free_r+0x42>
 8002248:	6811      	ldr	r1, [r2, #0]
 800224a:	1850      	adds	r0, r2, r1
 800224c:	42a0      	cmp	r0, r4
 800224e:	d10b      	bne.n	8002268 <_free_r+0x6c>
 8002250:	6820      	ldr	r0, [r4, #0]
 8002252:	4401      	add	r1, r0
 8002254:	1850      	adds	r0, r2, r1
 8002256:	4283      	cmp	r3, r0
 8002258:	6011      	str	r1, [r2, #0]
 800225a:	d1e0      	bne.n	800221e <_free_r+0x22>
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4408      	add	r0, r1
 8002262:	6010      	str	r0, [r2, #0]
 8002264:	6053      	str	r3, [r2, #4]
 8002266:	e7da      	b.n	800221e <_free_r+0x22>
 8002268:	d902      	bls.n	8002270 <_free_r+0x74>
 800226a:	230c      	movs	r3, #12
 800226c:	602b      	str	r3, [r5, #0]
 800226e:	e7d6      	b.n	800221e <_free_r+0x22>
 8002270:	6820      	ldr	r0, [r4, #0]
 8002272:	1821      	adds	r1, r4, r0
 8002274:	428b      	cmp	r3, r1
 8002276:	bf01      	itttt	eq
 8002278:	6819      	ldreq	r1, [r3, #0]
 800227a:	685b      	ldreq	r3, [r3, #4]
 800227c:	1809      	addeq	r1, r1, r0
 800227e:	6021      	streq	r1, [r4, #0]
 8002280:	6063      	str	r3, [r4, #4]
 8002282:	6054      	str	r4, [r2, #4]
 8002284:	e7cb      	b.n	800221e <_free_r+0x22>
 8002286:	bd38      	pop	{r3, r4, r5, pc}
 8002288:	2000021c 	.word	0x2000021c

0800228c <sbrk_aligned>:
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4e0f      	ldr	r6, [pc, #60]	@ (80022cc <sbrk_aligned+0x40>)
 8002290:	460c      	mov	r4, r1
 8002292:	6831      	ldr	r1, [r6, #0]
 8002294:	4605      	mov	r5, r0
 8002296:	b911      	cbnz	r1, 800229e <sbrk_aligned+0x12>
 8002298:	f000 f9d2 	bl	8002640 <_sbrk_r>
 800229c:	6030      	str	r0, [r6, #0]
 800229e:	4621      	mov	r1, r4
 80022a0:	4628      	mov	r0, r5
 80022a2:	f000 f9cd 	bl	8002640 <_sbrk_r>
 80022a6:	1c43      	adds	r3, r0, #1
 80022a8:	d103      	bne.n	80022b2 <sbrk_aligned+0x26>
 80022aa:	f04f 34ff 	mov.w	r4, #4294967295
 80022ae:	4620      	mov	r0, r4
 80022b0:	bd70      	pop	{r4, r5, r6, pc}
 80022b2:	1cc4      	adds	r4, r0, #3
 80022b4:	f024 0403 	bic.w	r4, r4, #3
 80022b8:	42a0      	cmp	r0, r4
 80022ba:	d0f8      	beq.n	80022ae <sbrk_aligned+0x22>
 80022bc:	1a21      	subs	r1, r4, r0
 80022be:	4628      	mov	r0, r5
 80022c0:	f000 f9be 	bl	8002640 <_sbrk_r>
 80022c4:	3001      	adds	r0, #1
 80022c6:	d1f2      	bne.n	80022ae <sbrk_aligned+0x22>
 80022c8:	e7ef      	b.n	80022aa <sbrk_aligned+0x1e>
 80022ca:	bf00      	nop
 80022cc:	20000218 	.word	0x20000218

080022d0 <_malloc_r>:
 80022d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022d4:	1ccd      	adds	r5, r1, #3
 80022d6:	f025 0503 	bic.w	r5, r5, #3
 80022da:	3508      	adds	r5, #8
 80022dc:	2d0c      	cmp	r5, #12
 80022de:	bf38      	it	cc
 80022e0:	250c      	movcc	r5, #12
 80022e2:	2d00      	cmp	r5, #0
 80022e4:	4606      	mov	r6, r0
 80022e6:	db01      	blt.n	80022ec <_malloc_r+0x1c>
 80022e8:	42a9      	cmp	r1, r5
 80022ea:	d904      	bls.n	80022f6 <_malloc_r+0x26>
 80022ec:	230c      	movs	r3, #12
 80022ee:	6033      	str	r3, [r6, #0]
 80022f0:	2000      	movs	r0, #0
 80022f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023cc <_malloc_r+0xfc>
 80022fa:	f000 f869 	bl	80023d0 <__malloc_lock>
 80022fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002302:	461c      	mov	r4, r3
 8002304:	bb44      	cbnz	r4, 8002358 <_malloc_r+0x88>
 8002306:	4629      	mov	r1, r5
 8002308:	4630      	mov	r0, r6
 800230a:	f7ff ffbf 	bl	800228c <sbrk_aligned>
 800230e:	1c43      	adds	r3, r0, #1
 8002310:	4604      	mov	r4, r0
 8002312:	d158      	bne.n	80023c6 <_malloc_r+0xf6>
 8002314:	f8d8 4000 	ldr.w	r4, [r8]
 8002318:	4627      	mov	r7, r4
 800231a:	2f00      	cmp	r7, #0
 800231c:	d143      	bne.n	80023a6 <_malloc_r+0xd6>
 800231e:	2c00      	cmp	r4, #0
 8002320:	d04b      	beq.n	80023ba <_malloc_r+0xea>
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	4639      	mov	r1, r7
 8002326:	4630      	mov	r0, r6
 8002328:	eb04 0903 	add.w	r9, r4, r3
 800232c:	f000 f988 	bl	8002640 <_sbrk_r>
 8002330:	4581      	cmp	r9, r0
 8002332:	d142      	bne.n	80023ba <_malloc_r+0xea>
 8002334:	6821      	ldr	r1, [r4, #0]
 8002336:	4630      	mov	r0, r6
 8002338:	1a6d      	subs	r5, r5, r1
 800233a:	4629      	mov	r1, r5
 800233c:	f7ff ffa6 	bl	800228c <sbrk_aligned>
 8002340:	3001      	adds	r0, #1
 8002342:	d03a      	beq.n	80023ba <_malloc_r+0xea>
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	442b      	add	r3, r5
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	f8d8 3000 	ldr.w	r3, [r8]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	bb62      	cbnz	r2, 80023ac <_malloc_r+0xdc>
 8002352:	f8c8 7000 	str.w	r7, [r8]
 8002356:	e00f      	b.n	8002378 <_malloc_r+0xa8>
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	1b52      	subs	r2, r2, r5
 800235c:	d420      	bmi.n	80023a0 <_malloc_r+0xd0>
 800235e:	2a0b      	cmp	r2, #11
 8002360:	d917      	bls.n	8002392 <_malloc_r+0xc2>
 8002362:	1961      	adds	r1, r4, r5
 8002364:	42a3      	cmp	r3, r4
 8002366:	6025      	str	r5, [r4, #0]
 8002368:	bf18      	it	ne
 800236a:	6059      	strne	r1, [r3, #4]
 800236c:	6863      	ldr	r3, [r4, #4]
 800236e:	bf08      	it	eq
 8002370:	f8c8 1000 	streq.w	r1, [r8]
 8002374:	5162      	str	r2, [r4, r5]
 8002376:	604b      	str	r3, [r1, #4]
 8002378:	4630      	mov	r0, r6
 800237a:	f000 f82f 	bl	80023dc <__malloc_unlock>
 800237e:	f104 000b 	add.w	r0, r4, #11
 8002382:	1d23      	adds	r3, r4, #4
 8002384:	f020 0007 	bic.w	r0, r0, #7
 8002388:	1ac2      	subs	r2, r0, r3
 800238a:	bf1c      	itt	ne
 800238c:	1a1b      	subne	r3, r3, r0
 800238e:	50a3      	strne	r3, [r4, r2]
 8002390:	e7af      	b.n	80022f2 <_malloc_r+0x22>
 8002392:	6862      	ldr	r2, [r4, #4]
 8002394:	42a3      	cmp	r3, r4
 8002396:	bf0c      	ite	eq
 8002398:	f8c8 2000 	streq.w	r2, [r8]
 800239c:	605a      	strne	r2, [r3, #4]
 800239e:	e7eb      	b.n	8002378 <_malloc_r+0xa8>
 80023a0:	4623      	mov	r3, r4
 80023a2:	6864      	ldr	r4, [r4, #4]
 80023a4:	e7ae      	b.n	8002304 <_malloc_r+0x34>
 80023a6:	463c      	mov	r4, r7
 80023a8:	687f      	ldr	r7, [r7, #4]
 80023aa:	e7b6      	b.n	800231a <_malloc_r+0x4a>
 80023ac:	461a      	mov	r2, r3
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	42a3      	cmp	r3, r4
 80023b2:	d1fb      	bne.n	80023ac <_malloc_r+0xdc>
 80023b4:	2300      	movs	r3, #0
 80023b6:	6053      	str	r3, [r2, #4]
 80023b8:	e7de      	b.n	8002378 <_malloc_r+0xa8>
 80023ba:	230c      	movs	r3, #12
 80023bc:	4630      	mov	r0, r6
 80023be:	6033      	str	r3, [r6, #0]
 80023c0:	f000 f80c 	bl	80023dc <__malloc_unlock>
 80023c4:	e794      	b.n	80022f0 <_malloc_r+0x20>
 80023c6:	6005      	str	r5, [r0, #0]
 80023c8:	e7d6      	b.n	8002378 <_malloc_r+0xa8>
 80023ca:	bf00      	nop
 80023cc:	2000021c 	.word	0x2000021c

080023d0 <__malloc_lock>:
 80023d0:	4801      	ldr	r0, [pc, #4]	@ (80023d8 <__malloc_lock+0x8>)
 80023d2:	f7ff bf10 	b.w	80021f6 <__retarget_lock_acquire_recursive>
 80023d6:	bf00      	nop
 80023d8:	20000214 	.word	0x20000214

080023dc <__malloc_unlock>:
 80023dc:	4801      	ldr	r0, [pc, #4]	@ (80023e4 <__malloc_unlock+0x8>)
 80023de:	f7ff bf0b 	b.w	80021f8 <__retarget_lock_release_recursive>
 80023e2:	bf00      	nop
 80023e4:	20000214 	.word	0x20000214

080023e8 <__sflush_r>:
 80023e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	0716      	lsls	r6, r2, #28
 80023f0:	4605      	mov	r5, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	d454      	bmi.n	80024a0 <__sflush_r+0xb8>
 80023f6:	684b      	ldr	r3, [r1, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	dc02      	bgt.n	8002402 <__sflush_r+0x1a>
 80023fc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	dd48      	ble.n	8002494 <__sflush_r+0xac>
 8002402:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002404:	2e00      	cmp	r6, #0
 8002406:	d045      	beq.n	8002494 <__sflush_r+0xac>
 8002408:	2300      	movs	r3, #0
 800240a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800240e:	682f      	ldr	r7, [r5, #0]
 8002410:	6a21      	ldr	r1, [r4, #32]
 8002412:	602b      	str	r3, [r5, #0]
 8002414:	d030      	beq.n	8002478 <__sflush_r+0x90>
 8002416:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002418:	89a3      	ldrh	r3, [r4, #12]
 800241a:	0759      	lsls	r1, r3, #29
 800241c:	d505      	bpl.n	800242a <__sflush_r+0x42>
 800241e:	6863      	ldr	r3, [r4, #4]
 8002420:	1ad2      	subs	r2, r2, r3
 8002422:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002424:	b10b      	cbz	r3, 800242a <__sflush_r+0x42>
 8002426:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002428:	1ad2      	subs	r2, r2, r3
 800242a:	2300      	movs	r3, #0
 800242c:	4628      	mov	r0, r5
 800242e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002430:	6a21      	ldr	r1, [r4, #32]
 8002432:	47b0      	blx	r6
 8002434:	1c43      	adds	r3, r0, #1
 8002436:	89a3      	ldrh	r3, [r4, #12]
 8002438:	d106      	bne.n	8002448 <__sflush_r+0x60>
 800243a:	6829      	ldr	r1, [r5, #0]
 800243c:	291d      	cmp	r1, #29
 800243e:	d82b      	bhi.n	8002498 <__sflush_r+0xb0>
 8002440:	4a28      	ldr	r2, [pc, #160]	@ (80024e4 <__sflush_r+0xfc>)
 8002442:	40ca      	lsrs	r2, r1
 8002444:	07d6      	lsls	r6, r2, #31
 8002446:	d527      	bpl.n	8002498 <__sflush_r+0xb0>
 8002448:	2200      	movs	r2, #0
 800244a:	6062      	str	r2, [r4, #4]
 800244c:	6922      	ldr	r2, [r4, #16]
 800244e:	04d9      	lsls	r1, r3, #19
 8002450:	6022      	str	r2, [r4, #0]
 8002452:	d504      	bpl.n	800245e <__sflush_r+0x76>
 8002454:	1c42      	adds	r2, r0, #1
 8002456:	d101      	bne.n	800245c <__sflush_r+0x74>
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	b903      	cbnz	r3, 800245e <__sflush_r+0x76>
 800245c:	6560      	str	r0, [r4, #84]	@ 0x54
 800245e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002460:	602f      	str	r7, [r5, #0]
 8002462:	b1b9      	cbz	r1, 8002494 <__sflush_r+0xac>
 8002464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002468:	4299      	cmp	r1, r3
 800246a:	d002      	beq.n	8002472 <__sflush_r+0x8a>
 800246c:	4628      	mov	r0, r5
 800246e:	f7ff fec5 	bl	80021fc <_free_r>
 8002472:	2300      	movs	r3, #0
 8002474:	6363      	str	r3, [r4, #52]	@ 0x34
 8002476:	e00d      	b.n	8002494 <__sflush_r+0xac>
 8002478:	2301      	movs	r3, #1
 800247a:	4628      	mov	r0, r5
 800247c:	47b0      	blx	r6
 800247e:	4602      	mov	r2, r0
 8002480:	1c50      	adds	r0, r2, #1
 8002482:	d1c9      	bne.n	8002418 <__sflush_r+0x30>
 8002484:	682b      	ldr	r3, [r5, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0c6      	beq.n	8002418 <__sflush_r+0x30>
 800248a:	2b1d      	cmp	r3, #29
 800248c:	d001      	beq.n	8002492 <__sflush_r+0xaa>
 800248e:	2b16      	cmp	r3, #22
 8002490:	d11d      	bne.n	80024ce <__sflush_r+0xe6>
 8002492:	602f      	str	r7, [r5, #0]
 8002494:	2000      	movs	r0, #0
 8002496:	e021      	b.n	80024dc <__sflush_r+0xf4>
 8002498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800249c:	b21b      	sxth	r3, r3
 800249e:	e01a      	b.n	80024d6 <__sflush_r+0xee>
 80024a0:	690f      	ldr	r7, [r1, #16]
 80024a2:	2f00      	cmp	r7, #0
 80024a4:	d0f6      	beq.n	8002494 <__sflush_r+0xac>
 80024a6:	0793      	lsls	r3, r2, #30
 80024a8:	bf18      	it	ne
 80024aa:	2300      	movne	r3, #0
 80024ac:	680e      	ldr	r6, [r1, #0]
 80024ae:	bf08      	it	eq
 80024b0:	694b      	ldreq	r3, [r1, #20]
 80024b2:	1bf6      	subs	r6, r6, r7
 80024b4:	600f      	str	r7, [r1, #0]
 80024b6:	608b      	str	r3, [r1, #8]
 80024b8:	2e00      	cmp	r6, #0
 80024ba:	ddeb      	ble.n	8002494 <__sflush_r+0xac>
 80024bc:	4633      	mov	r3, r6
 80024be:	463a      	mov	r2, r7
 80024c0:	4628      	mov	r0, r5
 80024c2:	6a21      	ldr	r1, [r4, #32]
 80024c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80024c8:	47e0      	blx	ip
 80024ca:	2800      	cmp	r0, #0
 80024cc:	dc07      	bgt.n	80024de <__sflush_r+0xf6>
 80024ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024d6:	f04f 30ff 	mov.w	r0, #4294967295
 80024da:	81a3      	strh	r3, [r4, #12]
 80024dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024de:	4407      	add	r7, r0
 80024e0:	1a36      	subs	r6, r6, r0
 80024e2:	e7e9      	b.n	80024b8 <__sflush_r+0xd0>
 80024e4:	20400001 	.word	0x20400001

080024e8 <_fflush_r>:
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	690b      	ldr	r3, [r1, #16]
 80024ec:	4605      	mov	r5, r0
 80024ee:	460c      	mov	r4, r1
 80024f0:	b913      	cbnz	r3, 80024f8 <_fflush_r+0x10>
 80024f2:	2500      	movs	r5, #0
 80024f4:	4628      	mov	r0, r5
 80024f6:	bd38      	pop	{r3, r4, r5, pc}
 80024f8:	b118      	cbz	r0, 8002502 <_fflush_r+0x1a>
 80024fa:	6a03      	ldr	r3, [r0, #32]
 80024fc:	b90b      	cbnz	r3, 8002502 <_fflush_r+0x1a>
 80024fe:	f7ff fc95 	bl	8001e2c <__sinit>
 8002502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f3      	beq.n	80024f2 <_fflush_r+0xa>
 800250a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800250c:	07d0      	lsls	r0, r2, #31
 800250e:	d404      	bmi.n	800251a <_fflush_r+0x32>
 8002510:	0599      	lsls	r1, r3, #22
 8002512:	d402      	bmi.n	800251a <_fflush_r+0x32>
 8002514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002516:	f7ff fe6e 	bl	80021f6 <__retarget_lock_acquire_recursive>
 800251a:	4628      	mov	r0, r5
 800251c:	4621      	mov	r1, r4
 800251e:	f7ff ff63 	bl	80023e8 <__sflush_r>
 8002522:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002524:	4605      	mov	r5, r0
 8002526:	07da      	lsls	r2, r3, #31
 8002528:	d4e4      	bmi.n	80024f4 <_fflush_r+0xc>
 800252a:	89a3      	ldrh	r3, [r4, #12]
 800252c:	059b      	lsls	r3, r3, #22
 800252e:	d4e1      	bmi.n	80024f4 <_fflush_r+0xc>
 8002530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002532:	f7ff fe61 	bl	80021f8 <__retarget_lock_release_recursive>
 8002536:	e7dd      	b.n	80024f4 <_fflush_r+0xc>

08002538 <__swhatbuf_r>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	460c      	mov	r4, r1
 800253c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002540:	4615      	mov	r5, r2
 8002542:	2900      	cmp	r1, #0
 8002544:	461e      	mov	r6, r3
 8002546:	b096      	sub	sp, #88	@ 0x58
 8002548:	da0c      	bge.n	8002564 <__swhatbuf_r+0x2c>
 800254a:	89a3      	ldrh	r3, [r4, #12]
 800254c:	2100      	movs	r1, #0
 800254e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002552:	bf14      	ite	ne
 8002554:	2340      	movne	r3, #64	@ 0x40
 8002556:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800255a:	2000      	movs	r0, #0
 800255c:	6031      	str	r1, [r6, #0]
 800255e:	602b      	str	r3, [r5, #0]
 8002560:	b016      	add	sp, #88	@ 0x58
 8002562:	bd70      	pop	{r4, r5, r6, pc}
 8002564:	466a      	mov	r2, sp
 8002566:	f000 f849 	bl	80025fc <_fstat_r>
 800256a:	2800      	cmp	r0, #0
 800256c:	dbed      	blt.n	800254a <__swhatbuf_r+0x12>
 800256e:	9901      	ldr	r1, [sp, #4]
 8002570:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002574:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002578:	4259      	negs	r1, r3
 800257a:	4159      	adcs	r1, r3
 800257c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002580:	e7eb      	b.n	800255a <__swhatbuf_r+0x22>

08002582 <__smakebuf_r>:
 8002582:	898b      	ldrh	r3, [r1, #12]
 8002584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002586:	079d      	lsls	r5, r3, #30
 8002588:	4606      	mov	r6, r0
 800258a:	460c      	mov	r4, r1
 800258c:	d507      	bpl.n	800259e <__smakebuf_r+0x1c>
 800258e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	6123      	str	r3, [r4, #16]
 8002596:	2301      	movs	r3, #1
 8002598:	6163      	str	r3, [r4, #20]
 800259a:	b003      	add	sp, #12
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800259e:	466a      	mov	r2, sp
 80025a0:	ab01      	add	r3, sp, #4
 80025a2:	f7ff ffc9 	bl	8002538 <__swhatbuf_r>
 80025a6:	9f00      	ldr	r7, [sp, #0]
 80025a8:	4605      	mov	r5, r0
 80025aa:	4639      	mov	r1, r7
 80025ac:	4630      	mov	r0, r6
 80025ae:	f7ff fe8f 	bl	80022d0 <_malloc_r>
 80025b2:	b948      	cbnz	r0, 80025c8 <__smakebuf_r+0x46>
 80025b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025b8:	059a      	lsls	r2, r3, #22
 80025ba:	d4ee      	bmi.n	800259a <__smakebuf_r+0x18>
 80025bc:	f023 0303 	bic.w	r3, r3, #3
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	81a3      	strh	r3, [r4, #12]
 80025c6:	e7e2      	b.n	800258e <__smakebuf_r+0xc>
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80025ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025d2:	81a3      	strh	r3, [r4, #12]
 80025d4:	9b01      	ldr	r3, [sp, #4]
 80025d6:	6020      	str	r0, [r4, #0]
 80025d8:	b15b      	cbz	r3, 80025f2 <__smakebuf_r+0x70>
 80025da:	4630      	mov	r0, r6
 80025dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025e0:	f000 f81e 	bl	8002620 <_isatty_r>
 80025e4:	b128      	cbz	r0, 80025f2 <__smakebuf_r+0x70>
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	f023 0303 	bic.w	r3, r3, #3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	81a3      	strh	r3, [r4, #12]
 80025f2:	89a3      	ldrh	r3, [r4, #12]
 80025f4:	431d      	orrs	r5, r3
 80025f6:	81a5      	strh	r5, [r4, #12]
 80025f8:	e7cf      	b.n	800259a <__smakebuf_r+0x18>
	...

080025fc <_fstat_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	2300      	movs	r3, #0
 8002600:	4d06      	ldr	r5, [pc, #24]	@ (800261c <_fstat_r+0x20>)
 8002602:	4604      	mov	r4, r0
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	602b      	str	r3, [r5, #0]
 800260a:	f7fe f901 	bl	8000810 <_fstat>
 800260e:	1c43      	adds	r3, r0, #1
 8002610:	d102      	bne.n	8002618 <_fstat_r+0x1c>
 8002612:	682b      	ldr	r3, [r5, #0]
 8002614:	b103      	cbz	r3, 8002618 <_fstat_r+0x1c>
 8002616:	6023      	str	r3, [r4, #0]
 8002618:	bd38      	pop	{r3, r4, r5, pc}
 800261a:	bf00      	nop
 800261c:	20000210 	.word	0x20000210

08002620 <_isatty_r>:
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	2300      	movs	r3, #0
 8002624:	4d05      	ldr	r5, [pc, #20]	@ (800263c <_isatty_r+0x1c>)
 8002626:	4604      	mov	r4, r0
 8002628:	4608      	mov	r0, r1
 800262a:	602b      	str	r3, [r5, #0]
 800262c:	f7fe f8ff 	bl	800082e <_isatty>
 8002630:	1c43      	adds	r3, r0, #1
 8002632:	d102      	bne.n	800263a <_isatty_r+0x1a>
 8002634:	682b      	ldr	r3, [r5, #0]
 8002636:	b103      	cbz	r3, 800263a <_isatty_r+0x1a>
 8002638:	6023      	str	r3, [r4, #0]
 800263a:	bd38      	pop	{r3, r4, r5, pc}
 800263c:	20000210 	.word	0x20000210

08002640 <_sbrk_r>:
 8002640:	b538      	push	{r3, r4, r5, lr}
 8002642:	2300      	movs	r3, #0
 8002644:	4d05      	ldr	r5, [pc, #20]	@ (800265c <_sbrk_r+0x1c>)
 8002646:	4604      	mov	r4, r0
 8002648:	4608      	mov	r0, r1
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	f7fe f906 	bl	800085c <_sbrk>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	d102      	bne.n	800265a <_sbrk_r+0x1a>
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	b103      	cbz	r3, 800265a <_sbrk_r+0x1a>
 8002658:	6023      	str	r3, [r4, #0]
 800265a:	bd38      	pop	{r3, r4, r5, pc}
 800265c:	20000210 	.word	0x20000210

08002660 <_init>:
 8002660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002662:	bf00      	nop
 8002664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002666:	bc08      	pop	{r3}
 8002668:	469e      	mov	lr, r3
 800266a:	4770      	bx	lr

0800266c <_fini>:
 800266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266e:	bf00      	nop
 8002670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002672:	bc08      	pop	{r3}
 8002674:	469e      	mov	lr, r3
 8002676:	4770      	bx	lr
